{
	"name": "Health Quiz Data Processor",
	"nodes": [
		{
			"parameters": {
				"httpMethod": "POST",
				"path": "quiz-webhook",
				"options": {}
			},
			"id": "2dc87e1f-2306-4da2-9b8e-71b60ccb0a54",
			"name": "Webhook",
			"type": "n8n-nodes-base.webhook",
			"typeVersion": 1,
			"position": [
				-160,
				320
			],
			"webhookId": "f3a17f6a-de5b-426c-bb98-be3527276205"
		},
		{
			"parameters": {
				"jsCode": "// Get incoming quiz data\nconst rawData = $input.item.json;\nlet quizData;\n\n// Check if data came from URL parameter or other source format\nif (rawData && rawData.data && typeof rawData.data === 'string') {\n  try {\n    quizData = JSON.parse(decodeURIComponent(rawData.data));\n  } catch (e) {\n    console.log('Error parsing data:', e);\n    quizData = rawData;\n  }\n} else {\n  quizData = rawData || {};\n}\n\n// Extract key information from responses - with validation\nconst extractAnswer = (questionId) => {\n  if (!quizData.responses || !Array.isArray(quizData.responses)) {\n    return null;\n  }\n  const response = quizData.responses.find(r => r && r.questionId === questionId);\n  return response ? response.answer : null;\n};\n\n// Get email and validate it with a stricter validation function\nlet customerEmail = extractAnswer('q5') || '';\n\n// Improved email validation function\nfunction isValidEmail(email) {\n  if (!email || typeof email !== 'string') return false;\n  \n  // Trim whitespace\n  email = email.trim();\n  \n  // Check for empty string after trimming\n  if (email === '') return false;\n  \n  // Use a more comprehensive regex for email validation\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  \n  // Check if it passes the regex test\n  if (!emailRegex.test(email)) return false;\n  \n  // Make sure there's a domain with at least one dot\n  const parts = email.split('@');\n  if (parts.length !== 2) return false;\n  if (!parts[1].includes('.')) return false;\n  \n  // Check domain length\n  const domain = parts[1];\n  if (domain.length < 3) return false;\n  \n  // Passed all checks\n  return true;\n}\n\n// Normalize email (lowercase)\nif (customerEmail) {\n  customerEmail = customerEmail.trim().toLowerCase();\n}\n\n// Format the quiz data into a more usable structure with defaults\nconst formattedData = {\n  quizId: quizData.quizId || 'unknown',\n  quizTitle: quizData.quizTitle || 'Unknown Quiz',\n  completedAt: quizData.completedAt || new Date().toISOString(),\n  customerEmail: customerEmail,\n  isValidEmail: isValidEmail(customerEmail),\n  state: extractAnswer('q3') || '',\n  insurance: extractAnswer('q4') || '',\n  mainReason: extractAnswer('q1') || '',\n  secondaryReasons: extractAnswer('q2') || [],\n  allResponses: Array.isArray(quizData.responses) ? quizData.responses : []\n};\n\n// Add formatted date fields safely\ntry {\n  const date = new Date(formattedData.completedAt);\n  formattedData.formattedDate = date.toLocaleDateString();\n  formattedData.formattedTime = date.toLocaleTimeString();\n} catch (e) {\n  console.log('Error formatting date:', e);\n  formattedData.formattedDate = '';\n  formattedData.formattedTime = '';\n}\n\n// Map option IDs to readable text (based on your quiz structure)\nconst reasonMap = {\n  'opt1': 'Weight Concerns',\n  'opt2': 'Intuitive/Mindful Eating',\n  'opt3': 'Gut Health',\n  'opt4': 'Emotional Eating',\n  'opt5': 'Mental Health Nutrition',\n  'opt6': 'Women\\'s Health',\n  'opt7': 'General Wellbeing',\n  'opt8': 'More'\n};\n\n// Convert option IDs to readable text with safety checks\nformattedData.mainReasonText = formattedData.mainReason && reasonMap[formattedData.mainReason] \n  ? reasonMap[formattedData.mainReason] \n  : (formattedData.mainReason || 'Unknown');\n\n// Always set secondaryReasonsText\nif (Array.isArray(formattedData.secondaryReasons) && formattedData.secondaryReasons.length > 0) {\n  formattedData.secondaryReasonsText = formattedData.secondaryReasons\n    .map(id => (id && reasonMap[id]) ? reasonMap[id] : (id || ''))\n    .filter(text => text.length > 0)\n    .join(', ');\n} else {\n  formattedData.secondaryReasonsText = '';\n}\n\n// Prepare data for Klaviyo - with safety checks\nformattedData.klaviyoProperties = {\n  $email: formattedData.isValidEmail ? formattedData.customerEmail : '',\n  $first_name: \"\", \n  $last_name: \"\", \n  $phone_number: \"\", \n  $address1: \"\",\n  $city: \"\",\n  $state: formattedData.state || '',\n  $zip: \"\",\n  $country: \"US\",\n  $source: \"Curalife Health Quiz\",\n  quiz_id: formattedData.quizId || '',\n  quiz_title: formattedData.quizTitle || '',\n  quiz_completed_at: formattedData.completedAt || '',\n  quiz_main_interest: formattedData.mainReasonText || '',\n  quiz_secondary_interests: formattedData.secondaryReasonsText || '',\n  insurance_provider: formattedData.insurance || ''\n};\n\n// Extra check to ensure we don't proceed with invalid emails\nif (formattedData.isValidEmail === false) {\n  console.log('Invalid email detected and marked as invalid:', customerEmail);\n}\n\n// Log for debugging\nconsole.log('Processed quiz data:', JSON.stringify(formattedData));\n\nreturn {json: formattedData};"
			},
			"id": "83e4b3e7-41c5-46b2-8ffe-dc8a5d5b62d9",
			"name": "Format Quiz Data",
			"type": "n8n-nodes-base.code",
			"typeVersion": 1,
			"position": [
				60,
				320
			]
		},
		{
			"parameters": {
				"conditions": {
					"string": [
						{
							"value1": "={{$json.isValidEmail}}",
							"operation": "equal",
							"value2": true
						}
					],
					"boolean": [
						{
							"value1": "={{!!$json.customerEmail}}",
							"value2": true
						}
					]
				},
				"combineOperation": "AND"
			},
			"id": "cde45675-7fc8-4bf9-afb0-9d15ef3a7ba0",
			"name": "IF Email Valid",
			"type": "n8n-nodes-base.if",
			"typeVersion": 1,
			"position": [
				220,
				320
			]
		},
		{
			"parameters": {
				"method": "POST",
				"url": "https://a.klaviyo.com/api/profiles/",
				"authentication": "genericCredentialType",
				"genericAuthType": "httpHeaderAuth",
				"sendHeaders": true,
				"headerParameters": {
					"parameters": [
						{
							"name": "revision",
							"value": "2023-09-15"
						},
						{
							"name": "Authorization",
							"value": "Klaviyo-API-Key {{$env.KLAVIYO_API_KEY}}"
						},
						{
							"name": "Content-Type",
							"value": "application/json"
						},
						{
							"name": "Accept",
							"value": "application/json"
						}
					]
				},
				"sendBody": true,
				"specifyBody": "json",
				"jsonBody": "{\n  \"data\": {\n    \"type\": \"profile\",\n    \"attributes\": {\n      \"email\": \"{{$json.customerEmail}}\",\n      \"properties\": {\n        \"State\": \"{{$json.state}}\",\n        \"Insurance\": \"{{$json.insurance}}\",\n        \"Main Interest\": \"{{$json.mainReasonText}}\",\n        \"Secondary Interests\": \"{{$json.secondaryReasonsText}}\",\n        \"Quiz Source\": \"{{$json.quizTitle}}\",\n        \"Quiz Completed\": \"{{$json.formattedDate}}\",\n        \"$source\": \"Health Quiz\"\n      }\n    }\n  }\n}",
				"options": {}
			},
			"id": "e37dd9c9-4c60-4d84-8cfa-d0ebd2c1fb49",
			"name": "Create Klaviyo Profile",
			"type": "n8n-nodes-base.httpRequest",
			"typeVersion": 3,
			"position": [
				420,
				240
			],
			"credentials": {
				"httpBasicAuth": {
					"id": "VnzgcdY1RFMswXRw",
					"name": "Unnamed credential"
				},
				"httpBearerAuth": {
					"id": "pwkdvnYsfBEadamL",
					"name": "Bearer Auth account"
				},
				"httpHeaderAuth": {
					"id": "XUHoeyU5U9QiArKP",
					"name": "Header Auth account"
				}
			}
		},
		{
			"parameters": {
				"jsCode": "// Prepare Klaviyo event data\nconst data = $input.item.json;\n\n// Double-check email validation before creating event\nif (!data.isValidEmail || !data.customerEmail) {\n  throw new Error('Cannot create Klaviyo event: Invalid or missing email');\n}\n\n// Create event data for Klaviyo\nconst eventData = {\n  data: {\n    type: \"event\",\n    attributes: {\n      profile: {\n        email: data.customerEmail\n      },\n      metric: {\n        name: \"Completed Health Quiz\"\n      },\n      properties: {\n        \"Quiz Title\": data.quizTitle,\n        \"Main Interest\": data.mainReasonText,\n        \"Insurance\": data.insurance || \"Not Provided\",\n        \"State\": data.state,\n        \"Secondary Interests\": data.secondaryReasonsText || \"None\"\n      },\n      time: data.completedAt || new Date().toISOString()\n    }\n  }\n};\n\nreturn {json: {data, eventData}};"
			},
			"id": "9f3feb14-d9e7-42e3-9bb5-c1ae9e8d2fcd",
			"name": "Prepare Klaviyo Event",
			"type": "n8n-nodes-base.code",
			"typeVersion": 1,
			"position": [
				640,
				240
			]
		},
		{
			"parameters": {
				"method": "POST",
				"url": "https://a.klaviyo.com/api/events/",
				"sendHeaders": true,
				"headerParameters": {
					"parameters": [
						{
							"name": "revision",
							"value": "2023-09-15"
						},
						{
							"name": "Authorization",
							"value": "Klaviyo-API-KEY {{$env.KLAVIYO_API_KEY}}"
						},
						{
							"name": "Content-Type",
							"value": "application/json"
						},
						{
							"name": "Accept",
							"value": "application/json"
						}
					]
				},
				"sendBody": true,
				"specifyBody": "json",
				"jsonBody": "={{ $json.eventData }}",
				"options": {}
			},
			"id": "75a8d3f5-2d18-4e24-bbf3-4d6c8d1f9ca5",
			"name": "Track Klaviyo Event",
			"type": "n8n-nodes-base.httpRequest",
			"typeVersion": 3,
			"position": [
				840,
				240
			]
		},
		{
			"parameters": {
				"jsCode": "// Log that we received a quiz submission with invalid email\nconst data = $input.item.json;\n\nconsole.log(`Quiz submitted with invalid or missing email. Quiz ID: ${data.quizId}, Title: ${data.quizTitle}, Email attempted: ${data.customerEmail || 'None provided'}`);\n\n// You could store this information in a database or send to another system\n// for tracking quiz submissions without valid emails\n\nreturn {\n  json: {\n    status: \"skipped\",\n    reason: \"Invalid email address\",\n    quizId: data.quizId,\n    quizTitle: data.quizTitle,\n    timestamp: new Date().toISOString(),\n    attemptedEmail: data.customerEmail || 'None provided'\n  }\n};"
			},
			"id": "ab123456-7890-4def-abcd-ef1234567890",
			"name": "Handle Invalid Email",
			"type": "n8n-nodes-base.code",
			"typeVersion": 1,
			"position": [
				420,
				400
			]
		},
		{
			"parameters": {},
			"id": "c41abcde-f123-4567-89ab-cdef12345678",
			"name": "Merge",
			"type": "n8n-nodes-base.merge",
			"typeVersion": 2,
			"position": [
				1040,
				320
			]
		},
		{
			"parameters": {
				"responseCode": "200",
				"responseMode": "responseBody",
				"options": {}
			},
			"id": "de987654-3210-fedc-ba98-7654321fedcb",
			"name": "Respond to Webhook",
			"type": "n8n-nodes-base.respondToWebhook",
			"typeVersion": 1,
			"position": [
				1240,
				320
			]
		}
	],
	"connections": {
		"Webhook": {
			"main": [
				[
					{
						"node": "Format Quiz Data",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"Format Quiz Data": {
			"main": [
				[
					{
						"node": "IF Email Valid",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"IF Email Valid": {
			"main": [
				[
					{
						"node": "Create Klaviyo Profile",
						"type": "main",
						"index": 0
					}
				],
				[
					{
						"node": "Handle Invalid Email",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"Create Klaviyo Profile": {
			"main": [
				[
					{
						"node": "Prepare Klaviyo Event",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"Prepare Klaviyo Event": {
			"main": [
				[
					{
						"node": "Track Klaviyo Event",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"Track Klaviyo Event": {
			"main": [
				[
					{
						"node": "Merge",
						"type": "main",
						"index": 0
					}
				]
			]
		},
		"Handle Invalid Email": {
			"main": [
				[
					{
						"node": "Merge",
						"type": "main",
						"index": 1
					}
				]
			]
		},
		"Merge": {
			"main": [
				[
					{
						"node": "Respond to Webhook",
						"type": "main",
						"index": 0
					}
				]
			]
		}
	},
	"settings": {},
	"pinData": {},
	"meta": {
		"templateCredsSetupCompleted": true,
		"instanceId": "f15776d71e783ab65b5ded264368414021571e48c329de491bbc7f5f44253f60"
	}
}