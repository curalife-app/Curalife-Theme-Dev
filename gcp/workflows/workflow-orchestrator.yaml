# ==================================================================
#  Workflow Orchestrator - HIPAA Compliant Process Manager
# ==================================================================

main:
  params: [request]

  steps:
    # ---------------------------------------------------------------
    # 0. Load configuration & CORS headers
    # ---------------------------------------------------------------
    - setup:
        assign:
          - corsHeaders:
              Access-Control-Allow-Origin: "*"
              Access-Control-Allow-Methods: "POST, GET, OPTIONS"
              Access-Control-Allow-Headers: "Content-Type, Authorization, X-Requested-With"
              Access-Control-Allow-Credentials: "true"
              Access-Control-Max-Age: "3600"
              Content-Type: "application/json"
          - rawData: ${request}
          - timestamp: ${sys.now()}
          # Status tracking configuration - use provided ID or generate new one
          - statusTrackingId: ${if("statusTrackingId" in request, request.statusTrackingId, text.replace_all(text.replace_all(string(timestamp), ".", ""), ":", ""))}
          - bucketName: "curalife-workflow-status"
          - statusObjectName: ${"status/" + statusTrackingId + ".json"}
          # Workflow endpoints
          - userCreationWorkflowUrl: "https://us-central1-telemedicine-458913.cloudfunctions.net/workflow_user_creation"
          - eligibilityWorkflowUrl: "https://us-central1-telemedicine-458913.cloudfunctions.net/workflow_eligibility"
          - insurancePlanWorkflowUrl: "https://us-central1-telemedicine-458913.cloudfunctions.net/workflow_insurance_plan"

    # ---------------------------------------------------------------
    # 0a. Initialize status tracking
    # ---------------------------------------------------------------
    - initializeStatus:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "initializing"
            progress: 0
            message: "🚀 Starting user creation process..."
            timestamp: ${timestamp}
            completed: false
            error: false
            debug:
              workflowStartTime: ${timestamp}
              customerEmail: ${if(rawData != null and "customerEmail" in rawData, rawData.customerEmail, "unknown")}
              hasInsurance: ${if(rawData != null and "insurance" in rawData and rawData.insurance != "", true, false)}
              hasMemberId: ${if(rawData != null and "insuranceMemberId" in rawData and rawData.insuranceMemberId != "", true, false)}
              workflowPath: "determining..."
        result: statusInitResult
        next: validatePayload

    # ---------------------------------------------------------------
    # 1. Validate payload structure
    # ---------------------------------------------------------------
    - validatePayload:
        assign:
          - customerEmail: ${if(rawData != null and "customerEmail" in rawData, rawData.customerEmail, "")}
          - firstName: ${if(rawData != null and "firstName" in rawData, rawData.firstName, "")}
          - lastName: ${if(rawData != null and "lastName" in rawData, rawData.lastName, "")}
          - insurance: ${if(rawData != null and "insurance" in rawData, rawData.insurance, "")}
          - insuranceMemberId: ${if(rawData != null and "insuranceMemberId" in rawData, rawData.insuranceMemberId, "")}
        next: updateStatusValidating

    # ---------------------------------------------------------------
    # 2. Update status: Validating
    # ---------------------------------------------------------------
    - updateStatusValidating:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "validating"
            progress: 10
            message: "📋 Validating information..."
            timestamp: ${sys.now()}
            completed: false
            error: false
            debug:
              validationChecks:
                emailProvided: ${customerEmail != ""}
                firstNameProvided: ${firstName != ""}
                lastNameProvided: ${lastName != ""}
                insuranceProvided: ${insurance != ""}
                memberIdProvided: ${insuranceMemberId != ""}
              elapsedTime: ${sys.now() - timestamp}
        result: statusValidatingResult
        next: validateRequired

    - validateRequired:
        switch:
          - condition: ${customerEmail == ""}
            next: updateStatusError
          - condition: true
            next: determineWorkflowPath

    # ---------------------------------------------------------------
    # 3. Determine workflow path based on insurance info
    # ---------------------------------------------------------------
    - determineWorkflowPath:
        switch:
          # Full workflow: Has insurance info, needs eligibility check
          - condition: ${insurance != "" and insuranceMemberId != "" and firstName != "" and lastName != ""}
            next: updateStatusEligibility
          # Simple workflow: No insurance info, skip eligibility
          - condition: true
            next: updateStatusUserCreation

    # ---------------------------------------------------------------
    # 4. FULL WORKFLOW PATH: Check insurance eligibility first
    # ---------------------------------------------------------------
    - updateStatusEligibility:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "eligibility"
            progress: 25
            message: "🔍 Checking insurance eligibility..."
            timestamp: ${sys.now()}
            completed: false
            error: false
            debug:
              workflowPath: "full_workflow_with_insurance"
              eligibilityWorkflowUrl: ${eligibilityWorkflowUrl}
              insuranceInfo:
                provider: ${insurance}
                hasMemberId: ${insuranceMemberId != ""}
                hasGroupNumber: ${if(rawData != null and "groupNumber" in rawData and rawData.groupNumber != "", true, false)}
              elapsedTime: ${sys.now() - timestamp}
        result: statusEligibilityResult
        next: callEligibilityWorkflow

    - callEligibilityWorkflow:
        try:
          call: http.post
          args:
            url: ${eligibilityWorkflowUrl}
            headers:
              Content-Type: "application/json"
              X-Workflow-Type: "eligibility"
            body: ${rawData}
            timeout: 300
          result: eligibilityResponse
        except:
          as: e
          steps:
            - logEligibilityError:
                call: googleapis.storage.v1.objects.insert
                args:
                  bucket: ${bucketName}
                  name: ${"debug/eligibility-error-" + statusTrackingId + ".json"}
                  uploadType: "media"
                  body:
                    statusTrackingId: ${statusTrackingId}
                    step: "callEligibilityWorkflow"
                    error: ${e}
                    timestamp: ${sys.now()}
                result: errorLogResult
            - assignEligibilityError:
                assign:
                  - eligibilityResponse:
                      error: true
                      message: ${e.message}
                      exception: ${e}
                      errorCode: "http_error"
                      isTimeout: ${if("message" in e, e.message == "upstream request timeout" or e.message == "timeout", false)}
        next: processEligibilityResponse

    - processEligibilityResponse:
        switch:
          - condition: ${eligibilityResponse != null and "body" in eligibilityResponse and eligibilityResponse.body != null}
            assign:
              - eligibilityData: ${eligibilityResponse.body}
              - eligibilitySuccess: true
            next: updateStatusUserCreationWithEligibility
          - condition: ${eligibilityResponse != null and "statusCode" in eligibilityResponse and eligibilityResponse.statusCode >= 200 and eligibilityResponse.statusCode < 300}
            assign:
              - eligibilityData: ${eligibilityResponse}
              - eligibilitySuccess: true
            next: updateStatusUserCreationWithEligibility
          - condition: ${eligibilityResponse != null and "code" in eligibilityResponse and eligibilityResponse.code >= 200 and eligibilityResponse.code < 300}
            assign:
              - eligibilityData: ${eligibilityResponse}
              - eligibilitySuccess: true
            next: updateStatusUserCreationWithEligibility
          - condition: ${eligibilityResponse != null and "error" in eligibilityResponse and "isTimeout" in eligibilityResponse and eligibilityResponse.isTimeout == true}
            # Handle timeout - continue workflow but mark eligibility as processing
            assign:
              - eligibilityData:
                  eligibilityData:
                    eligibilityStatus: "PROCESSING"
                    isEligible: false
                    userMessage: "Insurance eligibility check is processing. We'll update your account once verification is complete."
                    isProcessing: true
                  debug:
                    timeoutOccurred: true
                    originalError: ${eligibilityResponse.exception}
                    fallbackApplied: true
              - eligibilitySuccess: true
            next: updateStatusUserCreationWithEligibility
          - condition: true
            # Continue without eligibility data if check failed
            assign:
              - eligibilityData: null
              - eligibilitySuccess: false
            next: updateStatusUserCreationWithEligibility

    # ---------------------------------------------------------------
    # 5. Update status: Creating user account (after eligibility)
    # ---------------------------------------------------------------
    - updateStatusUserCreationWithEligibility:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "user_creation"
            progress: 50
            message: "🛍️ Creating user accounts..."
            timestamp: ${sys.now()}
            completed: false
            error: false
            debug:
              workflowPath: "full_workflow_with_insurance"
              userCreationWorkflowUrl: ${userCreationWorkflowUrl}
              eligibilityCompleted: true
              eligibilitySuccess: ${eligibilitySuccess}
              eligibilityResponseCode: "completed"
              elapsedTime: ${sys.now() - timestamp}
        result: statusUserCreationResult
        next: callUserCreationWorkflowWithEligibility

    - callUserCreationWorkflowWithEligibility:
        try:
          call: http.post
          args:
            url: ${userCreationWorkflowUrl}
            headers:
              Content-Type: "application/json"
            body:
              customerEmail: ${customerEmail}
              firstName: ${firstName}
              lastName: ${lastName}
              phoneNumber: ${if(rawData != null and "phoneNumber" in rawData, rawData.phoneNumber, "")}
              state: ${if(rawData != null and "state" in rawData, rawData.state, "")}
              zip: ${if(rawData != null and "zip" in rawData, rawData.zip, "")}
              city: ${if(rawData != null and "city" in rawData, rawData.city, "")}
              address: ${if(rawData != null and "address" in rawData, rawData.address, "")}
              sex: ${if(rawData != null and "sex" in rawData, rawData.sex, "")}
              dateOfBirth: ${if(rawData != null and "dateOfBirth" in rawData, rawData.dateOfBirth, "")}
              insurance: ${insurance}
              insuranceMemberId: ${insuranceMemberId}
              insurancePrimaryPayerId: ${if(rawData != null and "insurancePrimaryPayerId" in rawData, rawData.insurancePrimaryPayerId, "")}
              groupNumber: ${if(rawData != null and "groupNumber" in rawData, rawData.groupNumber, "")}
              mainReasons: ${if(rawData != null and "mainReasons" in rawData, rawData.mainReasons, "")}
              medicalConditions: ${if(rawData != null and "medicalConditions" in rawData, rawData.medicalConditions, [])}
              consent: ${if(rawData != null and "consent" in rawData, rawData.consent, true)}
              testMode: false
              statusTrackingId: ${statusTrackingId}
            timeout: 120
          result: userCreationResponse
        except:
          as: e
          assign:
            - userCreationResponse:
                error: true
                message: ${e.message}
                exception: ${e}
                errorCode: "http_error"
        next: processUserCreationResponseWithEligibility

    - processUserCreationResponseWithEligibility:
        switch:
          - condition: ${userCreationResponse != null and "body" in userCreationResponse and userCreationResponse.body != null}
            assign:
              - userCreationData: ${userCreationResponse.body}
              - hubspotContactId: ${if("hubspotContactId" in userCreationResponse.body, userCreationResponse.body.hubspotContactId, "not_found")}
              - userCreationSuccess: true
            next: updateStatusInsurancePlan
          - condition: ${userCreationResponse != null and "statusCode" in userCreationResponse and userCreationResponse.statusCode >= 200 and userCreationResponse.statusCode < 300}
            assign:
              - userCreationData: ${userCreationResponse}
              - hubspotContactId: ${if("hubspotContactId" in userCreationResponse, userCreationResponse.hubspotContactId, "not_found")}
              - userCreationSuccess: true
            next: updateStatusInsurancePlan
          - condition: ${userCreationResponse != null and "code" in userCreationResponse and userCreationResponse.code >= 200 and userCreationResponse.code < 300}
            assign:
              - userCreationData: ${userCreationResponse}
              - hubspotContactId: ${if("hubspotContactId" in userCreationResponse, userCreationResponse.hubspotContactId, "not_found")}
              - userCreationSuccess: true
            next: updateStatusInsurancePlan
          - condition: true
            # User creation failed
            assign:
              - userCreationSuccess: false
            next: updateStatusUserCreationError

    # ---------------------------------------------------------------
    # 6. Update status: Creating insurance plan
    # ---------------------------------------------------------------
    - updateStatusInsurancePlan:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "insurance_plan"
            progress: 75
            message: "🏥 Processing insurance plan details..."
            timestamp: ${sys.now()}
            completed: false
            error: false
            debug:
              workflowPath: "full_workflow_with_insurance"
              insurancePlanWorkflowUrl: ${insurancePlanWorkflowUrl}
              userCreationCompleted: true
              userCreationSuccess: ${userCreationSuccess}
              userCreationResponseCode: "pending"
              hubspotContactId: ${hubspotContactId}
              elapsedTime: ${sys.now() - timestamp}
        result: statusInsurancePlanResult
        next: callInsurancePlanWorkflow

    - callInsurancePlanWorkflow:
        try:
          call: http.post
          args:
            url: ${insurancePlanWorkflowUrl}
            headers:
              Content-Type: "application/json"
            body:
              customerEmail: ${customerEmail}
              firstName: ${firstName}
              lastName: ${lastName}
              phoneNumber: ${if(rawData != null and "phoneNumber" in rawData, rawData.phoneNumber, "")}
              state: ${if(rawData != null and "state" in rawData, rawData.state, "")}
              insurance: ${insurance}
              insuranceMemberId: ${insuranceMemberId}
              groupNumber: ${if(rawData != null and "groupNumber" in rawData, rawData.groupNumber, "")}
              dateOfBirth: ${if(rawData != null and "dateOfBirth" in rawData, rawData.dateOfBirth, "")}
              hubspotContactId: ${hubspotContactId}
              eligibilityData: ${if(eligibilityData != null and "eligibilityData" in eligibilityData, eligibilityData.eligibilityData, null)}
              stediResponse: ${if(eligibilityData != null and "debug" in eligibilityData, eligibilityData.debug, null)}
              mainReasons: ${if(rawData != null and "mainReasons" in rawData, rawData.mainReasons, [])}
              medicalConditions: ${if(rawData != null and "medicalConditions" in rawData, rawData.medicalConditions, [])}
            timeout: 180
          result: insurancePlanResponse
        except:
          as: e
          assign:
            - insurancePlanResponse:
                error: true
                message: ${e.message}
                exception: ${e}
                errorCode: "http_error"
        next: processInsurancePlanResponse

    - processInsurancePlanResponse:
        switch:
          - condition: ${insurancePlanResponse != null and "body" in insurancePlanResponse and insurancePlanResponse.body != null}
            assign:
              - insurancePlanData: ${insurancePlanResponse.body}
              - insurancePlanSuccess: true
            next: updateStatusCompletedFull
          - condition: ${insurancePlanResponse != null and "statusCode" in insurancePlanResponse and insurancePlanResponse.statusCode >= 200 and insurancePlanResponse.statusCode < 300}
            assign:
              - insurancePlanData: ${insurancePlanResponse}
              - insurancePlanSuccess: true
            next: updateStatusCompletedFull
          - condition: ${insurancePlanResponse != null and "code" in insurancePlanResponse and insurancePlanResponse.code >= 200 and insurancePlanResponse.code < 300}
            assign:
              - insurancePlanData: ${insurancePlanResponse}
              - insurancePlanSuccess: true
            next: updateStatusCompletedFull
          - condition: true
            # Insurance plan creation failed, but continue
            assign:
              - insurancePlanData:
                  success: false
                  error: "Insurance plan creation failed"
              - insurancePlanSuccess: false
            next: updateStatusCompletedWithWarning

    # ---------------------------------------------------------------
    # 7. SIMPLE WORKFLOW PATH: No insurance info
    # ---------------------------------------------------------------
    - updateStatusUserCreation:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "user_creation"
            progress: 50
            message: "🛍️ Creating user accounts..."
            timestamp: ${sys.now()}
            completed: false
            error: false
            debug:
              workflowPath: "simple_workflow_no_insurance"
              userCreationWorkflowUrl: ${userCreationWorkflowUrl}
              skipReason: "no_insurance_info_provided"
              elapsedTime: ${sys.now() - timestamp}
        result: statusUserCreationSimpleResult
        next: callUserCreationWorkflow

    - callUserCreationWorkflow:
        try:
          call: http.post
          args:
            url: ${userCreationWorkflowUrl}
            headers:
              Content-Type: "application/json"
            body:
              customerEmail: ${customerEmail}
              firstName: ${firstName}
              lastName: ${lastName}
              phoneNumber: ${if(rawData != null and "phoneNumber" in rawData, rawData.phoneNumber, "")}
              state: ${if(rawData != null and "state" in rawData, rawData.state, "")}
              zip: ${if(rawData != null and "zip" in rawData, rawData.zip, "")}
              city: ${if(rawData != null and "city" in rawData, rawData.city, "")}
              address: ${if(rawData != null and "address" in rawData, rawData.address, "")}
              sex: ${if(rawData != null and "sex" in rawData, rawData.sex, "")}
              dateOfBirth: ${if(rawData != null and "dateOfBirth" in rawData, rawData.dateOfBirth, "")}
              insurance: ${if(rawData != null and "insurance" in rawData, rawData.insurance, "")}
              insuranceMemberId: ${if(rawData != null and "insuranceMemberId" in rawData, rawData.insuranceMemberId, "")}
              insurancePrimaryPayerId: ${if(rawData != null and "insurancePrimaryPayerId" in rawData, rawData.insurancePrimaryPayerId, "")}
              groupNumber: ${if(rawData != null and "groupNumber" in rawData, rawData.groupNumber, "")}
              mainReasons: ${if(rawData != null and "mainReasons" in rawData, rawData.mainReasons, "")}
              medicalConditions: ${if(rawData != null and "medicalConditions" in rawData, rawData.medicalConditions, [])}
              consent: ${if(rawData != null and "consent" in rawData, rawData.consent, true)}
              testMode: false
              statusTrackingId: ${statusTrackingId}
            timeout: 120
          result: userCreationSimpleResponse
        except:
          as: e
          assign:
            - userCreationSimpleResponse:
                error: true
                message: ${e.message}
                exception: ${e}
                errorCode: "http_error"
        next: processUserCreationResponse

    - processUserCreationResponse:
        switch:
          - condition: ${userCreationSimpleResponse != null and "body" in userCreationSimpleResponse and userCreationSimpleResponse.body != null}
            assign:
              - userCreationData: ${userCreationSimpleResponse.body}
            next: updateStatusCompletedSimple
          - condition: ${userCreationSimpleResponse != null and "statusCode" in userCreationSimpleResponse and userCreationSimpleResponse.statusCode >= 200 and userCreationSimpleResponse.statusCode < 300}
            assign:
              - userCreationData: ${userCreationSimpleResponse}
            next: updateStatusCompletedSimple
          - condition: ${userCreationSimpleResponse != null and "code" in userCreationSimpleResponse and userCreationSimpleResponse.code >= 200 and userCreationSimpleResponse.code < 300}
            assign:
              - userCreationData: ${userCreationSimpleResponse}
            next: updateStatusCompletedSimple
          - condition: true
            assign:
              - userCreationResponse: ${userCreationSimpleResponse}
            next: updateStatusUserCreationError

    # ---------------------------------------------------------------
    # 8. SUCCESS RESPONSES
    # ---------------------------------------------------------------
    - updateStatusCompletedFull:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "completed"
            progress: 100
            message: "✅ Account creation completed successfully!"
            timestamp: ${sys.now()}
            completed: true
            error: false
            finalData:
              userCreation: ${userCreationData}
              eligibility: ${eligibilityData}
              insurancePlan: ${insurancePlanData}
            debug:
              workflowPath: "full_workflow_with_insurance"
              totalElapsedTime: ${sys.now() - timestamp}
              completionSummary:
                eligibilitySuccess: ${eligibilitySuccess}
                userCreationSuccess: ${userCreationSuccess}
                insurancePlanSuccess: ${insurancePlanSuccess}
              responseCodes:
                eligibility: ${if(eligibilitySuccess, "success", "failed")}
                userCreation: ${if(userCreationSuccess, "success", "failed")}
                insurancePlan: ${if(insurancePlanSuccess, "success", "failed")}
        result: statusCompletedFullResult
        next: returnSuccessFull

    - returnSuccessFull:
        return:
          statusCode: 200
          headers: ${corsHeaders}
          body:
            success: true
            statusTrackingId: ${statusTrackingId}
            message: "Account creation completed successfully"
            data:
              userCreation: ${userCreationData}
              eligibility: ${eligibilityData}
              insurancePlan: ${insurancePlanData}
            timestamp: ${sys.now()}

    - updateStatusCompletedWithWarning:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "completed"
            progress: 100
            message: "⚠️ Account created but insurance plan processing failed"
            timestamp: ${sys.now()}
            completed: true
            error: false
            hasWarning: true
            finalData:
              userCreation: ${userCreationData}
              eligibility: ${eligibilityData}
              insurancePlan: ${insurancePlanData}
        result: statusCompletedWarningResult
        next: returnSuccessWithWarning

    - returnSuccessWithWarning:
        return:
          statusCode: 200
          headers: ${corsHeaders}
          body:
            success: true
            statusTrackingId: ${statusTrackingId}
            message: "Account created but insurance plan processing failed"
            hasWarning: true
            data:
              userCreation: ${userCreationData}
              eligibility: ${eligibilityData}
              insurancePlan: ${insurancePlanData}
            timestamp: ${sys.now()}

    - updateStatusCompletedSimple:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "completed"
            progress: 100
            message: "✅ Account creation completed (no insurance coverage)"
            timestamp: ${sys.now()}
            completed: true
            error: false
            finalData:
              userCreation: ${userCreationData}
        result: statusCompletedSimpleResult
        next: returnSuccessSimple

    - returnSuccessSimple:
        return:
          statusCode: 200
          headers: ${corsHeaders}
          body:
            success: true
            statusTrackingId: ${statusTrackingId}
            message: "Account creation completed (no insurance coverage)"
            data:
              userCreation: ${userCreationData}
            timestamp: ${sys.now()}

    # ---------------------------------------------------------------
    # 9. ERROR HANDLERS
    # ---------------------------------------------------------------
    - updateStatusError:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "error"
            progress: 0
            message: "❌ Invalid email address"
            timestamp: ${sys.now()}
            completed: true
            error: true
            errorDetails: "Invalid email address"
        result: statusErrorResult
        next: returnValidationError

    - returnValidationError:
        return:
          statusCode: 400
          headers: ${corsHeaders}
          body:
            success: false
            statusTrackingId: ${statusTrackingId}
            error: "Invalid email address"
            timestamp: ${sys.now()}

    - updateStatusUserCreationError:
        call: googleapis.storage.v1.objects.insert
        args:
          bucket: ${bucketName}
          name: ${statusObjectName}
          uploadType: "media"
          body:
            statusTrackingId: ${statusTrackingId}
            currentStep: "error"
            progress: 0
            message: "❌ Failed to create user accounts"
            timestamp: ${sys.now()}
            completed: true
            error: true
            errorType: "user_creation"
            errorDetails: ${if(userCreationResponse != null and "message" in userCreationResponse, userCreationResponse.message, "User creation workflow failed")}
        result: statusUserCreationErrorResult
        next: returnUserCreationError

    - returnUserCreationError:
        return:
          statusCode: 500
          headers: ${corsHeaders}
          body:
            success: false
            statusTrackingId: ${statusTrackingId}
            error: "Failed to create user accounts"
            details: ${if(userCreationResponse != null and "message" in userCreationResponse, userCreationResponse.message, "User creation workflow failed")}
            timestamp: ${sys.now()}
