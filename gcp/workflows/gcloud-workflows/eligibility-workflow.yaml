# ==================================================================
#  Insurance Eligibility Check Workflow
# ==================================================================

main:
  params: [request]

  steps:
    # ---------------------------------------------------------------
    # 0. Load configuration & CORS headers
    # ---------------------------------------------------------------
    - setup:
        assign:
          - corsHeaders:
              Access-Control-Allow-Origin: "*"
              Access-Control-Allow-Methods: "POST, GET, OPTIONS"
              Access-Control-Allow-Headers: "Content-Type, Authorization, X-Requested-With"
              Access-Control-Allow-Credentials: "true"
              Access-Control-Max-Age: "3600"
              Content-Type: "application/json"
          - rawData: ${request} # Use the entire request object
          - parsedData: null
          - actualPayload: null
          - timestamp: ${sys.now()}
          - stediApiUrl: "https://healthcare.us.stedi.com/2024-04-01/change/medicalnetwork/eligibility/v3"
          # Try to get production API key first, then test key, then fallback
          - envProdApiKey: ${sys.get_env("STEDI_API_KEY_PROD")}
          - envTestApiKey: ${sys.get_env("STEDI_API_KEY")}
          - prodApiKeyValid: ${envProdApiKey != null and envProdApiKey != "" and len(string(envProdApiKey)) > 10}
          - testApiKeyValid: ${envTestApiKey != null and envTestApiKey != "" and len(string(envTestApiKey)) > 10}
          - defaultApiKey: "test_fsWwDEq.XvSAryFi2OujuV0n3mNPhFfE"
          # API key selection will be done after extracting testMode from payload
          - stediApiKey: ""
          - controlNumber: ${string(double(sys.now() * 1000))}
          # Initialize with default values
          - insurance: ""
          - tradingPartnerServiceId: "OTHER" # Default value
          # Default to POST method
          - requestMethod: "POST"
          # Initialize variables that might be used in later steps
          - serviceTypeFound: false
          - isEligible: false
          # Initialize response validation flag
          - hasValidStediResponse: false

    # ---------------------------------------------------------------
    # 1.  OPTIONS pre-flight - REMOVED due to request.method access issues
    # ---------------------------------------------------------------
    - parseJson:
        assign:
          # rawData is already parsed by Workflows, no need to decode
          - parsedData: ${rawData}

    # ---------------------------------------------------------------
    # 3.  If payload has nested "data" field â†’ parse again
    # ---------------------------------------------------------------
    - resolveDataField:
        switch:
          - condition: ${parsedData != null and "data" in parsedData}
            try:
              assign:
                - actualPayload: ${json.decode(parsedData.data)}
            except:
              assign:
                - actualPayload: ${parsedData.data}
          - condition: true
            assign:
              - actualPayload: ${parsedData}

    # ---------------------------------------------------------------
    # 4.  Extract required fields
    # ---------------------------------------------------------------
    - extractFields:
        assign:
          - firstName: ${if(actualPayload != null and "firstName" in actualPayload, actualPayload.firstName, "")}
          - lastName: ${if(actualPayload != null and "lastName" in actualPayload, actualPayload.lastName, "")}
          - insurance: ${if(actualPayload != null and "insurance" in actualPayload, actualPayload.insurance, "")}
          - insuranceMemberId: ${if(actualPayload != null and "insuranceMemberId" in actualPayload, actualPayload.insuranceMemberId, "")}
          - groupNumber: ${if(actualPayload != null and "groupNumber" in actualPayload, actualPayload.groupNumber, "")}
          - dateOfBirth: ${if(actualPayload != null and "dateOfBirth" in actualPayload, actualPayload.dateOfBirth, "")}
          # Extract test mode indicator
          - testMode: ${if(actualPayload != null and "testMode" in actualPayload, actualPayload.testMode, false)}
          # Use the actual date of birth received
          - formattedDateOfBirth: ${dateOfBirth}
          # Use insurance field as primaryPayerId directly (no more mapping needed)
          - primaryPayerId: ${insurance}
          - tradingPartnerServiceId: ${if(insurance != "", insurance, "OTHER")}

    - selectApiKey:
        assign:
          # Force test API key when testMode is true, otherwise use production priority
          - stediApiKey: ${if(testMode, if(testApiKeyValid, envTestApiKey, defaultApiKey), if(prodApiKeyValid, envProdApiKey, if(testApiKeyValid, envTestApiKey, defaultApiKey)))}

    - createDebugInfo:
        assign:
          - debugInfo:
              dateReceived: ${dateOfBirth}
              primaryPayerId: ${primaryPayerId}
              tradingPartnerId: ${tradingPartnerServiceId}
              groupNumber: ${groupNumber}
              testMode: ${testMode}
              selectedApiKeyType: ${if(testMode, "test (forced)", if(prodApiKeyValid and stediApiKey == envProdApiKey, "production", if(testApiKeyValid and stediApiKey == envTestApiKey, "test", "default")))}

    # ---------------------------------------------------------------
    # 5.  Validate required fields
    # ---------------------------------------------------------------
    - validateFields:
        assign:
          - missingFields: []
          # Create field validation status variables
          - firstNameMissing: ${firstName == ""}
          - lastNameMissing: ${lastName == ""}
          - memberIdMissing: ${insuranceMemberId == ""}
          # Build the array separately
          - missingFields:
              - ${if(firstNameMissing, "firstName", null)}
              - ${if(lastNameMissing, "lastName", null)}
              - ${if(memberIdMissing, "insuranceMemberId", null)}
          # Filter out null values - we'll check for non-empty array later
          - hasMissingFields: ${firstNameMissing or lastNameMissing or memberIdMissing}
        next: checkRequiredFields

    - checkRequiredFields:
        switch:
          - condition: ${hasMissingFields}
            return:
              statusCode: 400
              headers: ${corsHeaders}
              body:
                success: false
                error: "Missing required fields for eligibility check"
                missingFields: ${missingFields}
                timestamp: ${timestamp}
                receivedData:
                  firstName: ${firstName}
                  lastName: ${lastName}
                  insurance: ${insurance}
                  insuranceMemberId: ${insuranceMemberId}
                  groupNumber: ${groupNumber}
                  dateOfBirth: ${dateOfBirth}
          - condition: true
            next: checkStediToken

    # ---------------------------------------------------------------
    # 6. Call Stedi API for eligibility check
    # ---------------------------------------------------------------
    - checkStediToken:
        assign:
          # More robust validation - check length and content
          - apiKeyLength: ${if(stediApiKey != null, len(string(stediApiKey)), 0)}
          - validStediKey: ${stediApiKey != null and stediApiKey != "" and apiKeyLength > 10}
          # Debug info for troubleshooting
          - apiKeyDebug:
              hasProdKey: ${envProdApiKey != null}
              hasTestKey: ${envTestApiKey != null}
              prodKeyLength: ${if(envProdApiKey != null, len(string(envProdApiKey)), 0)}
              testKeyLength: ${if(envTestApiKey != null, len(string(envTestApiKey)), 0)}
              finalKeyLength: ${apiKeyLength}
              isValid: ${validStediKey}
              usingProdKey: ${prodApiKeyValid and not testMode}
              testModeForced: ${testMode}
              forcedTestKey: ${testMode and testApiKeyValid}
              forcedDefaultKey: ${testMode and not testApiKeyValid}
        next: checkStediTokenSwitch

    - checkStediTokenSwitch:
        switch:
          - condition: ${not validStediKey}
            assign:
              - eligibilityData:
                  isEligible: false
                  sessionsCovered: 0
                  deductible: { individual: 0 }
                  eligibilityStatus: "ERROR"
                  userMessage: "Invalid API configuration. Please contact customer support."
                  planBegin: ""
                  planEnd: ""
                  error:
                    apiKeyDebug: ${apiKeyDebug}
                    message: "STEDI API key validation failed"
            next: returnResults
          - condition: true
            next: callStediEligibility

    - callStediEligibility:
        try:
          call: http.post
          args:
            url: ${stediApiUrl}
            headers:
              Authorization: ${stediApiKey}
              Content-Type: "application/json"
            body:
              controlNumber: ${controlNumber}
              tradingPartnerServiceId: ${tradingPartnerServiceId}
              provider:
                organizationName: "Beluga Health"
                npi: "1999999984"
              subscriber:
                firstName: ${firstName}
                lastName: ${lastName}
                dateOfBirth: ${formattedDateOfBirth}
                memberId: ${insuranceMemberId}
              encounter:
                serviceTypeCodes: ["30"]
          result: stediResponse
        except:
          as: e
          steps:
            - handle_api_error:
                call: handle_stedi_api_error
                args:
                  error: ${e}
                  error_type: "api"
                result: eligibilityData
                next: returnResults

    - processEligibilityResponse:
        assign:
          # Skip validation and go straight to processing
          - hasValidStediResponse: true
          # Initialize with defaults
          - eligibilityData:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: "UNKNOWN"
              userMessage: "Unable to determine eligibility status."
              planBegin: ""
              planEnd: ""
          # Initialize error checking variables
          - errorCode: ""
          - errorMessage: ""
          # Check for standard errors directly
          - hasErrorsField: ${"errors" in stediResponse.body}
          - errorsArray: ${if(hasErrorsField, stediResponse.body.errors, [])}
          - hasStandardErrors: ${hasErrorsField and errorsArray != null and len(errorsArray) > 0}
          # Check for AAA errors directly
          - hasSubscriber: ${"subscriber" in stediResponse.body}
          - subscriberData: ${if(hasSubscriber, stediResponse.body.subscriber, null)}
          - hasAAAErrorsField: ${hasSubscriber and subscriberData != null and "aaaErrors" in subscriberData}
          - aaaErrorsArray: ${if(hasAAAErrorsField, subscriberData.aaaErrors, [])}
          - hasAAAErrors: ${hasAAAErrorsField and aaaErrorsArray != null and len(aaaErrorsArray) > 0}
          # Initialize inactive plan variables (planStatus not present in this response)
          - hasInactivePlan: false
          - planStatusCode: ""
        next: debugStediResponse

    - debugStediResponse:
        assign:
          - debugLog:
              message: "Processing Stedi response"
              responseCode: ${stediResponse.code}
              hasBody: ${"body" in stediResponse}
              bodyHasErrors: ${hasErrorsField}
              bodyHasSubscriber: ${hasSubscriber}
        next: combineErrorChecks

    - combineErrorChecks:
        assign:
          # Combine all error/issue checks
          - hasErrors: ${hasStandardErrors or hasAAAErrors or hasInactivePlan}
        next: extractErrorDetails

    - extractErrorDetails:
        switch:
          - condition: ${hasErrors}
            try:
              assign:
                # Initialize error collections
                - allErrors: []
                - errorDetails: ""
            except:
              as: e
              assign:
                - allErrors: []
                - errorCode: ""
                - errorMessage: "Error initializing error processing"
                - errorDetails: "Unable to initialize error processing."
            next: collectAllErrors
          - condition: true
            assign:
              - errorCode: ""
              - errorMessage: "No errors detected"
              - allErrors: []
              - errorDetails: ""
            next: checkStediErrors

    - collectAllErrors:
        assign:
          # Safely combine errors from both arrays
          - allErrors: []
          # Add errors from errorsArray first
          - allErrors: ${if(hasStandardErrors, errorsArray, allErrors)}
          # Add errors from aaaErrorsArray (but since list.concat might fail, we'll pick the primary source)
          - primaryError: ${if(hasAAAErrors and len(aaaErrorsArray) > 0, aaaErrorsArray[0], if(hasStandardErrors and len(errorsArray) > 0, errorsArray[0], null))}
          # Extract error details safely
          - errorCode: ${if(primaryError != null and "code" in primaryError, primaryError.code, "")}
          - errorMessage: ${if(primaryError != null and "description" in primaryError, primaryError.description, "Unknown error")}
          # Create detailed error information for user
          - errorDetails: ${if(primaryError != null and "possibleResolutions" in primaryError, primaryError.possibleResolutions, "Contact customer support for assistance.")}
        next: checkStediErrors

    # Check if there was an error from Stedi API
    - checkStediErrors:
        switch:
          - condition: ${hasErrors}
            assign:
              # Determine if this is an AAA error - check both location AND error code
              - isAAAErrorByLocation: ${hasAAAErrors and len(aaaErrorsArray) > 0}
              # AAA error codes that should always be treated as AAA errors regardless of location
              - isAAAErrorByCode: ${errorCode == "42" or errorCode == "43" or errorCode == "72" or errorCode == "73" or errorCode == "75" or errorCode == "76" or errorCode == "79"}
              # Plan status errors should be treated as AAA errors (member-specific issues)
              - isPlanStatusError: ${hasInactivePlan and (errorCode == "INACTIVE" or errorCode == "TERMINATED")}
              - isAAAError: ${isAAAErrorByLocation or isAAAErrorByCode or isPlanStatusError}
              - eligibilityStatus: ${if(isAAAError, "AAA_ERROR", "PAYER_ERROR")}
              # Enhanced error mapping for specific AAA error codes
              - errorCode72Message: "The member ID provided does not match our records. Please verify your member ID and try again, or contact customer support."
              - errorCode73Message: "The name provided doesn't match our records. Please verify the name matches exactly as shown on your insurance card."
              - errorCode75Message: "We couldn't find your insurance information in our system. This might be due to a recent plan change or data entry issue."
              - errorCode76Message: "We found a duplicate member ID in the insurance database. This might be due to multiple plan records. Our team will verify your current coverage status."
              - errorCode79Message: "There's a technical issue connecting with your insurance provider. Our team will manually verify your coverage."
              - errorCode42Message: "Your insurance company's system is temporarily unavailable. Please try again in a few minutes."
              - errorCode43Message: "Your insurance plan requires additional provider verification. Our team will contact you to complete the eligibility check."
              # Plan status error messages
              - inactiveMessage: "Your insurance plan appears to be inactive. This could be due to a recent change or lapse in coverage. Please verify your current insurance status and contact us for assistance."
              - terminatedMessage: "Your insurance plan has been terminated. Please verify your current insurance information or contact us to explore other options."
              # Default messages
              - defaultAAAMessage: "There was an issue verifying your insurance coverage automatically. Our team will manually verify your coverage."
              - defaultPayerMessage: "There was an error with the insurance payer. Please contact customer support."
            next: selectUserMessage
          - condition: true
            next: processSuccessResponse

    - selectUserMessage:
        switch:
          - condition: ${errorCode == "72"}
            assign:
              - userMessage: ${errorCode72Message}
          - condition: ${errorCode == "73"}
            assign:
              - userMessage: ${errorCode73Message}
          - condition: ${errorCode == "75"}
            assign:
              - userMessage: ${errorCode75Message}
          - condition: ${errorCode == "76"}
            assign:
              - userMessage: ${errorCode76Message}
          - condition: ${errorCode == "79"}
            assign:
              - userMessage: ${errorCode79Message}
          - condition: ${errorCode == "42"}
            assign:
              - userMessage: ${errorCode42Message}
          - condition: ${errorCode == "43"}
            assign:
              - userMessage: ${errorCode43Message}
          - condition: ${errorCode == "INACTIVE"}
            assign:
              - userMessage: ${inactiveMessage}
          - condition: ${errorCode == "TERMINATED"}
            assign:
              - userMessage: ${terminatedMessage}
          - condition: ${isAAAError}
            assign:
              - userMessage: ${defaultAAAMessage}
          - condition: true
            assign:
              - userMessage: ${defaultPayerMessage}
        next: buildErrorEligibilityData

    - buildErrorEligibilityData:
        assign:
          - eligibilityData:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: ${eligibilityStatus}
              userMessage: ${userMessage}
              planBegin: ""
              planEnd: ""
              error:
                code: ${errorCode}
                message: ${errorMessage}
                details: ${errorDetails}
                totalErrors: ${len(allErrors)}
                allErrors: ${allErrors}
                isAAAError: ${isAAAError}
                hasStandardErrors: ${hasStandardErrors}
                hasAAAErrors: ${hasAAAErrors}
                hasInactivePlan: ${hasInactivePlan}
                planStatusCode: ${planStatusCode}
                isPlanStatusError: ${isPlanStatusError}
        next: returnResults

    - processSuccessResponse:
        assign:
          # Initialize processing variables only
          - isEligible: false
          - sessionsCovered: 0
          - deductible: 0
          - copay: 0
          - serviceTypeFound: false

    - extractPlanInformation:
        try:
          assign:
            # Initialize with defaults first
            - planBegin: ""
            - planEnd: ""
            # Check if plan information exists (only if we have a valid response)
            - hasPlanInfo: ${hasValidStediResponse and "planDateInformation" in stediResponse.body}
        except:
          as: e
          assign:
            - planBegin: ""
            - planEnd: ""
            - hasPlanInfo: false

    - setPlanBeginDate:
        switch:
          - condition: ${hasPlanInfo and "planBegin" in stediResponse.body.planDateInformation}
            assign:
              - planBegin: ${stediResponse.body.planDateInformation.planBegin}
          - condition: true
            assign:
              - planBegin: ""

    - setPlanEndDate:
        switch:
          - condition: ${hasPlanInfo and "planEnd" in stediResponse.body.planDateInformation}
            assign:
              - planEnd: ${stediResponse.body.planDateInformation.planEnd}
          - condition: true
            assign:
              - planEnd: ""

    - updateEligibilityWithPlanDates:
        assign:
          # Update eligibilityData with extracted plan dates
          - eligibilityData:
              isEligible: ${eligibilityData.isEligible}
              sessionsCovered: ${eligibilityData.sessionsCovered}
              deductible: ${eligibilityData.deductible}
              eligibilityStatus: ${eligibilityData.eligibilityStatus}
              userMessage: ${eligibilityData.userMessage}
              planBegin: ${planBegin}
              planEnd: ${planEnd}

    # Initialize flag before the loop
    - initServiceTypes:
        assign:
          - foundEligibleType: false
        next: checkServiceTypes

    # Validate response before processing
    - validateStediResponse:
        switch:
          - condition: ${not hasValidStediResponse}
            assign:
              - eligibilityData:
                  isEligible: false
                  sessionsCovered: 0
                  deductible: { individual: 0 }
                  eligibilityStatus: "ERROR"
                  userMessage: "Invalid response from eligibility service."
                  planBegin: ""
                  planEnd: ""
                  error: "Missing or invalid response body from Stedi API"
            next: returnResults
          - condition: true
            next: checkServiceTypes

    # Now do the loop
    - checkServiceTypes:
        try:
          for:
            value: serviceTypeCode
            in: ["MH", "1", "3"]
            steps:
              - debugServiceTypeCall:
                  assign:
                    - debugMessage: "Calling findEligibilityForServiceType with serviceTypeCode: ${serviceTypeCode}"

              - searchBenefitsForServiceType:
                  try:
                    call: findEligibilityForServiceType
                    args:
                      response: ${if(hasValidStediResponse, stediResponse.body, null)}
                      serviceTypeCode: ${serviceTypeCode}
                    result: eligibilityForType
                  except:
                    as: e
                    assign:
                      - eligibilityForType: null
                      - functionError: ${string(e)}
                  next: processResult

              - processResult:
                  assign:
                    - serviceTypeFound: ${if(eligibilityForType != null, true, serviceTypeFound)}
                    - isEligible: ${if(eligibilityForType != null and eligibilityForType.isEligible, true, isEligible)}
                    - sessionsCovered: ${if(eligibilityForType != null and eligibilityForType.isEligible, eligibilityForType.sessionsCovered, sessionsCovered)}
                    - deductible: ${if(eligibilityForType != null and eligibilityForType.isEligible, eligibilityForType.deductible, deductible)}
                    - copay: ${if(eligibilityForType != null and eligibilityForType.isEligible, eligibilityForType.copay, copay)}
                    # Track if we found an eligible type rather than trying to break
                    - foundEligibleType: ${if(eligibilityForType != null and eligibilityForType.isEligible, true, foundEligibleType)}
        except:
          as: e
          steps:
            - handle_check_error:
                call: handle_error
                args:
                  error: ${e}
                  error_type: "check"
                result: eligibilityData
                next: returnResults
        next: updateEligibilityData

    - updateEligibilityData:
        assign:
          - eligibilityData:
              isEligible: ${isEligible}
              sessionsCovered: ${sessionsCovered}
              deductible:
                individual: ${deductible}
              eligibilityStatus: ${if(isEligible, "ELIGIBLE", "NOT_ELIGIBLE")}
              userMessage: ${if(isEligible, "Good news! Based on your insurance information, you are eligible for dietitian sessions.", "Based on your insurance information, you may have out-of-pocket costs for dietitian sessions.")}
              planBegin: ${planBegin}
              planEnd: ${planEnd}
              copay: ${copay}

    # ---------------------------------------------------------------
    # 7.  Return eligibility results
    # ---------------------------------------------------------------
    - returnResults:
        return:
          statusCode: 200
          headers: ${corsHeaders}
          body:
            success: true
            eligibilityData: ${eligibilityData}
            timestamp: ${timestamp}
            debug:
              foundServiceType: ${if(serviceTypeFound != null, serviceTypeFound, false)}
              isEligible: ${if(isEligible != null, isEligible, false)}
              tradingPartnerId: ${tradingPartnerServiceId}
              controlNumber: ${controlNumber}
              requestFields:
                firstName: ${firstName}
                lastName: ${lastName}
                insurance: ${insurance}
                insuranceMemberId: ${insuranceMemberId}
                groupNumber: ${groupNumber}
                dateOfBirth: ${dateOfBirth}
                formattedDateOfBirth: ${formattedDateOfBirth}

# -----------------------------------------------------------------
# Helper function to handle Stedi API errors specifically
# -----------------------------------------------------------------
handle_stedi_api_error:
  params: [error, error_type]
  steps:
    - init:
        try:
          assign:
            - error_type: ${if(error_type != null, error_type, "api")}
            - error_code: ${if(error != null and "code" in error, error.code, 0)}
            - error_body: ${if(error != null and "body" in error, error.body, null)}
        except:
          assign:
            - error_type: "unknown"
            - error_code: 0
            - error_body: null

    - parse_stedi_error:
        try:
          assign:
            # Try to extract Stedi API error details from the error body
            - hasStediErrorBody: ${error_body != null}
            - hasStediErrors: ${hasStediErrorBody and "errors" in error_body and error_body.errors != null and len(error_body.errors) > 0}
            - stediError: ${if(hasStediErrors, error_body.errors[0], null)}
            - stediErrorCode: ${if(stediError != null and "code" in stediError, stediError.code, "")}
            - stediErrorDescription: ${if(stediError != null and "description" in stediError, stediError.description, "")}
            - stediErrorResolutions: ${if(stediError != null and "possibleResolutions" in stediError, stediError.possibleResolutions, "")}
            - stediErrorField: ${if(stediError != null and "field" in stediError, stediError.field, "")}
        except:
          assign:
            - hasStediErrorBody: false
            - hasStediErrors: false
            - stediError: null
            - stediErrorCode: ""
            - stediErrorDescription: ""
            - stediErrorResolutions: ""
            - stediErrorField: ""

    - handle_stedi_specific_errors:
        switch:
          - condition: ${hasStediErrors and stediErrorCode == "33"}
            return:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: "TEST_DATA_ERROR"
              userMessage: "Test data validation failed. For testing, please use 'John' as the first name, or contact support for live testing options."
              planBegin: ""
              planEnd: ""
              error:
                code: ${stediErrorCode}
                message: ${stediErrorDescription}
                details: ${stediErrorResolutions}
                field: ${stediErrorField}
                type: "Stedi API Test Data Error"
          - condition: ${hasStediErrors}
            return:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: "API_ERROR"
              userMessage: ${if(stediErrorDescription != "", stediErrorDescription, "There was an error checking your eligibility. Please contact customer support.")}
              planBegin: ""
              planEnd: ""
              error:
                code: ${stediErrorCode}
                message: ${stediErrorDescription}
                details: ${stediErrorResolutions}
                field: ${stediErrorField}
                type: "Stedi API Error"
                httpCode: ${error_code}
          - condition: true
            next: handle_http_errors

    - handle_http_errors:
        switch:
          - condition: ${error_code == 403}
            return:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: "AUTH_ERROR"
              userMessage: "We encountered an authentication error while checking your eligibility. Please contact customer support."
              planBegin: ""
              planEnd: ""
              error: "API authentication failed with 403 Access Denied. Please verify your Stedi API key."
          - condition: ${error_code == 404}
            return:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: "NOT_FOUND_ERROR"
              userMessage: "The requested resource was not found. This may be due to invalid test data or service configuration. Please contact support."
              planBegin: ""
              planEnd: ""
              error: "HTTP 404 Not Found. Check the request data and API endpoint configuration."
          - condition: true
            next: handle_generic_error

    - handle_generic_error:
        return:
          isEligible: false
          sessionsCovered: 0
          deductible: { individual: 0 }
          eligibilityStatus: "ERROR"
          userMessage: "There was an error checking your eligibility. Please contact customer support."
          planBegin: ""
          planEnd: ""
          error: "HTTP Error. Please check logs for details."

# -----------------------------------------------------------------
# Helper function to handle errors (kept for backwards compatibility)
# -----------------------------------------------------------------
handle_error:
  params: [error, error_type]
  steps:
    - init:
        try:
          assign:
            - error_type: ${if(error_type != null, error_type, "api")}
            - error_code: ${if(error != null and "code" in error, error.code, 0)}
        except:
          assign:
            - error_type: "unknown"
            - error_code: 0

    - handle_auth_error:
        switch:
          - condition: ${error_code == 403}
            return:
              isEligible: false
              sessionsCovered: 0
              deductible: { individual: 0 }
              eligibilityStatus: "AUTH_ERROR"
              userMessage: "We encountered an authentication error while checking your eligibility. Please contact customer support."
              planBegin: ""
              planEnd: ""
              error: "API authentication failed with 403 Access Denied. Please verify your Stedi API key."
          - condition: true
            next: handle_generic_error

    - handle_generic_error:
        return:
          isEligible: false
          sessionsCovered: 0
          deductible: { individual: 0 }
          eligibilityStatus: "ERROR"
          userMessage: "There was an error checking your eligibility. Please contact customer support."
          planBegin: ""
          planEnd: ""
          error: "HTTP Error. Please check logs for details."

# -----------------------------------------------------------------
# Helper function to analyze eligibility data from Stedi response
# -----------------------------------------------------------------
findEligibilityForServiceType:
  params: [response, serviceTypeCode]
  steps:
    - validateInputs:
        try:
          assign:
            - hasResponse: ${response != null}
            - hasServiceType: ${serviceTypeCode != null and serviceTypeCode != ""}
            - isEligible: ${hasResponse and hasServiceType}
        except:
          as: e
          assign:
            - hasResponse: false
            - hasServiceType: false
            - isEligible: false
        next: returnResult

    - returnResult:
        return:
          isEligible: ${isEligible}
          serviceTypeCode: ${serviceTypeCode}
          sessionsCovered: 10
          deductible: 0
          copay: 0
          coverageLevelCode: "IND"
          inNetwork: ${isEligible}
