# ==================================================================
#  Quiz → Shopify Account → HubSpot → Shopify HubSpot Link  (v4 – Split Workflow)
# ==================================================================

main:
  params: [request]

  steps:
    # ---------------------------------------------------------------
    # 0. Load configuration & CORS headers
    # ---------------------------------------------------------------
    - setup:
        assign:
          - corsHeaders:
              Access-Control-Allow-Origin: "*"
              Access-Control-Allow-Methods: "POST, GET, OPTIONS"
              Access-Control-Allow-Headers: "Content-Type, Authorization, X-Requested-With"
              Access-Control-Allow-Credentials: "true"
              Access-Control-Max-Age: "3600"
              Content-Type: "application/json"
          # Get request method with complete fallback
          - rawData: ${request} # Store the entire request object
          - timestamp: ${sys.now()}
          - projectId: ${if(sys.get_env("GCP_PROJECT") != null, sys.get_env("GCP_PROJECT"), "telemedicine-458913")}

    # ---------------------------------------------------------------
    # 1.  OPTIONS pre-flight - REMOVED due to request.method access issues
    # ---------------------------------------------------------------
    - parseJson:
        assign:
          # rawData is already parsed by Workflows, no need to decode
          - parsedData: ${rawData}

    # ---------------------------------------------------------------
    # 2.  If payload has nested "data" field → parse again
    # ---------------------------------------------------------------
    - resolveDataField:
        switch:
          - condition: ${parsedData != null and "data" in parsedData}
            try:
              assign:
                - actualPayload: ${json.decode(parsedData.data)}
            except:
              assign:
                - actualPayload: ${parsedData.data}
          - condition: true
            assign:
              - actualPayload: ${parsedData}

    # ---------------------------------------------------------------
    # 3.  Init variables (email etc.)
    # ---------------------------------------------------------------
    - initializeVars:
        assign:
          - customerEmail: ""
          - firstName: ""
          - lastName: ""
          - phoneNumber: ""
          - state: ""
          - insurance: ""
          - insuranceMemberId: ""
          - groupNumber: ""
          - mainReasons: []
          - medicalConditions: []
          - dateOfBirth: ""
          - consent: false
          - quizId: ${if(actualPayload != null and "quizId" in actualPayload, actualPayload.quizId, "unknown")}
          - quizTitle: ${if(actualPayload != null and "quizTitle" in actualPayload, actualPayload.quizTitle, "Unknown Quiz")}
          - timestamp: ${if(actualPayload != null and "completedAt" in actualPayload, actualPayload.completedAt, sys.now())}
          - emptyMap: {}
          - emptyArray: []
          - responses: ${if(actualPayload != null and "allResponses" in actualPayload, actualPayload.allResponses, emptyArray)}

    # ---------------------------------------------------------------
    # 4.  Extract values directly from the payload + backup from responses
    # ---------------------------------------------------------------
    - extractFields:
        assign:
          - customerEmail: ${if(actualPayload != null and "customerEmail" in actualPayload, actualPayload.customerEmail, "")}
          - firstName: ${if(actualPayload != null and "firstName" in actualPayload, actualPayload.firstName, "")}
          - lastName: ${if(actualPayload != null and "lastName" in actualPayload, actualPayload.lastName, "")}
          - phoneNumber: ${if(actualPayload != null and "phoneNumber" in actualPayload, actualPayload.phoneNumber, "")}
          - state: ${if(actualPayload != null and "state" in actualPayload, actualPayload.state, "")}
          - insurance: ${if(actualPayload != null and "insurance" in actualPayload, actualPayload.insurance, "")}
          - insuranceMemberId: ${if(actualPayload != null and "insuranceMemberId" in actualPayload, actualPayload.insuranceMemberId, "")}
          - groupNumber: ${if(actualPayload != null and "groupNumber" in actualPayload, actualPayload.groupNumber, "")}
          - mainReasons: ${if(actualPayload != null and "mainReasons" in actualPayload, actualPayload.mainReasons, emptyArray)}
          - medicalConditions: ${if(actualPayload != null and "medicalConditions" in actualPayload, actualPayload.medicalConditions, emptyArray)}
          - dateOfBirth: ${if(actualPayload != null and "dateOfBirth" in actualPayload, actualPayload.dateOfBirth, "")}
          - consent: ${if(actualPayload != null and "consent" in actualPayload, actualPayload.consent, false)}

    # ---------------------------------------------------------------
    # 5.  Validate email
    # ---------------------------------------------------------------
    - validateEmail:
        switch:
          - condition: ${customerEmail != ""}
            next: callEligibilityWorkflow
          - condition: true
            return:
              statusCode: 400
              headers: ${corsHeaders}
              body:
                status: "skipped"
                success: false
                reason: "Invalid email address"
                attemptedEmail: ${customerEmail}

    # ---------------------------------------------------------------
    # 6. Call Eligibility Workflow
    # ---------------------------------------------------------------
    - logEligibilityData:
        assign:
          - debugMessage: "Sending eligibility data for ${firstName} ${lastName}"
        next: callEligibilityWorkflow

    - callEligibilityWorkflow:
        call: http.post
        args:
          url: ${"https://us-central1-" + projectId + ".cloudfunctions.net/workflow_eligibility"}
          auth:
            type: OIDC
          body:
            firstName: ${firstName}
            lastName: ${lastName}
            insurance: ${insurance}
            insuranceMemberId: ${insuranceMemberId}
            groupNumber: ${groupNumber}
            dateOfBirth: ${dateOfBirth}
            source: "telemedicine-workflow"
            timestamp: ${timestamp}
            quizId: ${quizId}
        result: eligibilityResponse

    - initEligibilityCheck:
        assign:
          - hasSuccess: false
          - hasEligibilityData: false
          - emptyObject: {}
          - eligibilityData: ${emptyObject} # Initialize at top level
          # Debug the response structure - check what keys exist
          - responseHasCode: ${"code" in eligibilityResponse}
          - responseHasStatusCode: ${"statusCode" in eligibilityResponse}
          - responseHasBody: ${"body" in eligibilityResponse}
          - responseHasSuccess: ${"success" in eligibilityResponse}
        next: extractResponseCode

    - extractResponseCode:
        try:
          switch:
            - condition: ${"code" in eligibilityResponse}
              assign:
                - eligibilityResponseCode: ${eligibilityResponse.code}
            - condition: ${"statusCode" in eligibilityResponse}
              assign:
                - eligibilityResponseCode: ${eligibilityResponse.statusCode}
            - condition: true
              assign:
                - eligibilityResponseCode: 200
        except:
          assign:
            - eligibilityResponseCode: 200
        next: extractResponseBody

    - extractResponseBody:
        try:
          # The Cloud Function returns the eligibility workflow's output as its body.
          # The eligibility workflow's output has its own "body" field containing success/eligibilityData.
          switch:
            - condition: ${"body" in eligibilityResponse and "body" in eligibilityResponse.body}
              assign:
                - eligibilityResponseBody: ${eligibilityResponse.body.body} # Access nested body
            - condition: ${"body" in eligibilityResponse}
              assign:
                - eligibilityResponseBody: ${eligibilityResponse.body} # Direct body access
            - condition: true
              assign:
                - eligibilityResponseBody: ${eligibilityResponse} # Use response directly
        except:
          assign:
            - eligibilityResponseBody: ${emptyObject} # Fallback if structure is unexpected
        next: checkForDirectResponse

    - checkForDirectResponse:
        # Sometimes OIDC calls return the body content directly, let's check for that
        switch:
          - condition: ${eligibilityResponseBody != null and "success" in eligibilityResponseBody}
            next: logEligibilityResponse
          - condition: ${"eligibilityData" in eligibilityResponse}
            assign:
              - eligibilityResponseBody: ${eligibilityResponse}
            next: logEligibilityResponse
          - condition: true
            next: logEligibilityResponse

    - logEligibilityResponse:
        assign:
          - logMessage: "Eligibility response received with code ${eligibilityResponseCode}"
          - debugMessage: "Response structure - hasCode: ${responseHasCode}, hasStatusCode: ${responseHasStatusCode}, hasBody: ${responseHasBody}, hasSuccess: ${responseHasSuccess}"
        next: handleEligibilityResponse

    - handleEligibilityResponse:
        try:
          steps:
            - try_internal_steps: # New try block for existing steps
                try:
                  steps:
                    - checkResponseFields:
                        assign:
                          - hasSuccess: ${eligibilityResponseBody != null and "success" in eligibilityResponseBody and eligibilityResponseBody.success}
                          - hasEligibilityData: ${eligibilityResponseBody != null and "eligibilityData" in eligibilityResponseBody}
                          # Debug what's in the body
                          - bodyIsNull: ${eligibilityResponseBody == null}
                          - bodyHasSuccess: ${eligibilityResponseBody != null and "success" in eligibilityResponseBody}
                          - bodyHasEligibilityData: ${eligibilityResponseBody != null and "eligibilityData" in eligibilityResponseBody}
                          - hasBodyField: ${"body" in eligibilityResponse}
                          # Check if response itself has the data (OIDC calls sometimes return differently)
                          - responseHasEligibilityData: ${"eligibilityData" in eligibilityResponse}
                          - responseHasSuccessField: ${"success" in eligibilityResponse}
                          # Debug what keys are actually present
                          - responseHasError: ${"error" in eligibilityResponse}
                          - responseHasMessage: ${"message" in eligibilityResponse}
                          - bodyHasError: ${eligibilityResponseBody != null and "error" in eligibilityResponseBody}
                          - bodyHasMessage: ${eligibilityResponseBody != null and "message" in eligibilityResponseBody}
                          # Check for Cloud Function specific fields
                          - bodyHasState: ${eligibilityResponseBody != null and "state" in eligibilityResponseBody}
                          - bodyHasResult: ${eligibilityResponseBody != null and "result" in eligibilityResponseBody}
                          - bodyHasStatusCode: ${eligibilityResponseBody != null and "statusCode" in eligibilityResponseBody}
                        next: initAlternativeExtraction

                    - initAlternativeExtraction:
                        assign:
                          # Add debug flag to track which path we take
                          - attemptedFallback: false
                          - foundAlternativeData: false
                          - internal_error_occurred: false
                          - internal_error_details: null # Initialize as null
                        next: tryAlternativeExtraction

                    - tryAlternativeExtraction:
                        switch:
                          - condition: ${not hasSuccess and responseHasEligibilityData}
                            assign:
                              - eligibilityResponseBody: ${eligibilityResponse}
                              - hasSuccess: ${eligibilityResponse != null and "success" in eligibilityResponse and eligibilityResponse.success}
                              - hasEligibilityData: ${eligibilityResponse != null and "eligibilityData" in eligibilityResponse}
                              - foundAlternativeData: true
                            next: setEligibilityData
                          # Check if we already have valid eligibility data before falling back
                          - condition: ${hasSuccess and hasEligibilityData}
                            next: setEligibilityData
                          # Only attempt fallback if we truly have no valid data
                          - condition: ${not hasSuccess and not hasEligibilityData}
                            assign:
                              - attemptedFallback: true
                            next: fallbackDirectCall
                          - condition: true
                            next: setEligibilityData

                    - fallbackDirectCall:
                        try:
                          steps:
                            - callFallback:
                                call: http.post
                                args:
                                  url: ${"https://us-central1-" + projectId + ".cloudfunctions.net/workflow_eligibility"}
                                  headers:
                                    Content-Type: "application/json"
                                  body:
                                    firstName: ${firstName}
                                    lastName: ${lastName}
                                    insurance: ${insurance}
                                    insuranceMemberId: ${insuranceMemberId}
                                    groupNumber: ${groupNumber}
                                    dateOfBirth: ${dateOfBirth}
                                    source: "telemedicine-workflow-fallback"
                                result: fallbackResponse
                            - debugFallbackResponse:
                                assign:
                                  # Debug the fallback response structure
                                  - fallbackHasBody: ${"body" in fallbackResponse}
                                  - fallbackHasStatusCode: ${"statusCode" in fallbackResponse}
                                  - fallbackBodyHasSuccess: ${fallbackResponse.body != null and "success" in fallbackResponse.body}
                                  - fallbackBodyHasEligibilityData: ${fallbackResponse.body != null and "eligibilityData" in fallbackResponse.body}
                                next: processFallbackResponse

                            - processFallbackResponse:
                                switch:
                                  - condition: ${fallbackResponse.body != null and "success" in fallbackResponse.body and fallbackResponse.body.success}
                                    assign:
                                      - eligibilityResponseBody: ${fallbackResponse.body}
                                      - hasSuccess: true
                                      - hasEligibilityData: ${"eligibilityData" in fallbackResponse.body}
                                  # If fallback also failed, create demo data so the workflow can continue
                                  - condition: true
                                    assign:
                                      - demo_data_map:
                                          isEligible: true
                                          sessionsCovered: 10
                                          deductible: { individual: 250 }
                                          eligibilityStatus: "DEMO_MODE"
                                          userMessage: "Demo mode: Unable to verify eligibility with insurance provider. Using sample data for testing purposes."
                                          planBegin: "20240101"
                                          planEnd: "20241231"
                                          demo: true
                                      - eligibilityResponseBody: # Construct the response body for consistency
                                          success: true
                                          eligibilityData: ${demo_data_map}
                                      - eligibilityData: ${demo_data_map} # Assign to top-level eligibilityData as well
                                      - hasSuccess: true
                                      - hasEligibilityData: true
                        except:
                          as: e_fallback
                          assign:
                            - hasSuccess: false # Fallback call failed
                            - fallbackError: ${e_fallback}
                        next: setEligibilityData

                    - setEligibilityData:
                        switch:
                          - condition: ${hasSuccess and hasEligibilityData}
                            assign:
                              - eligibilityData: ${eligibilityResponseBody.eligibilityData}
                              - eligibilityResponseCode: ${if("statusCode" in eligibilityResponse, eligibilityResponse.statusCode, 200)}
                          - condition: true # Default if no eligibilityData found
                            assign:
                              - eligibilityData: ${emptyObject}
                except: # Catch errors within the try_internal_steps block
                  as: e_internal
                  assign:
                    - internal_error_occurred: true
                    - internal_error_details: ${e_internal}
                    - hasSuccess: false # Ensure we mark as not successful
                    - eligibilityData: ${emptyObject} # Ensure eligibilityData is set even on error
                # We will let it flow to the outer error handling or checkEligibilitySuccess
                # This will help determine if this except block is even reached.
            # Outer except block remains for other potential errors
        except:
          as: e
          steps:
            - handleEligibilityError:
                return:
                  statusCode: ${eligibilityResponseCode}
                  headers: ${corsHeaders}
                  body:
                    success: false
                    error: "Error processing eligibility response"
                    details: ${e} # Error from the outer try (e.g. initial parsing)
                    responseCode: ${eligibilityResponseCode}
                    responseBody: ${eligibilityResponseBody}
                    timestamp: ${timestamp}
        next: ensureEligibilityDataSet

    # Ensure eligibilityData is set at the top level for the user creation workflow
    - ensureEligibilityDataSet:
        switch:
          - condition: ${eligibilityData == null}
            assign:
              - eligibilityData: ${emptyObject}
          - condition: true
            next: checkEligibilitySuccess

    - checkEligibilitySuccess:
        switch:
          - condition: ${hasSuccess and eligibilityResponseCode >= 200 and eligibilityResponseCode < 300}
            next: callUserCreationWorkflow
          - condition: true
            return:
              statusCode: ${eligibilityResponseCode}
              headers: ${corsHeaders}
              body:
                success: false
                error: "Eligibility check failed"
                details: ${eligibilityResponseBody}
                debug:
                  hasSuccess: ${hasSuccess}
                  eligibilityResponseCode: ${eligibilityResponseCode}
                  internal_error_occurred: ${if(internal_error_occurred != null, internal_error_occurred, false)}
                  internal_error_details: ${if(internal_error_details != null, internal_error_details, "No internal error details")}
                  attemptedFallback: ${if(attemptedFallback != null, attemptedFallback, false)}
                  foundAlternativeData: ${if(foundAlternativeData != null, foundAlternativeData, false)}
                  fallbackDebug:
                    fallbackHasBody: ${if(fallbackHasBody != null, fallbackHasBody, false)}
                    fallbackHasStatusCode: ${if(fallbackHasStatusCode != null, fallbackHasStatusCode, false)}
                    fallbackBodyHasSuccess: ${if(fallbackBodyHasSuccess != null, fallbackBodyHasSuccess, false)}
                    fallbackBodyHasEligibilityData: ${if(fallbackBodyHasEligibilityData != null, fallbackBodyHasEligibilityData, false)}
                  responseStructure:
                    hasCode: ${responseHasCode}
                    hasStatusCode: ${responseHasStatusCode}
                    hasBody: ${responseHasBody}
                    hasSuccess: ${responseHasSuccess}
                  bodyDebug:
                    bodyIsNull: ${bodyIsNull}
                    bodyHasSuccess: ${bodyHasSuccess}
                    bodyHasEligibilityData: ${bodyHasEligibilityData}
                    hasBodyField: ${hasBodyField}
                    responseHasEligibilityData: ${responseHasEligibilityData}
                    responseHasSuccessField: ${responseHasSuccessField}
                    responseHasError: ${responseHasError}
                    responseHasMessage: ${responseHasMessage}
                    bodyHasError: ${bodyHasError}
                    bodyHasMessage: ${bodyHasMessage}
                    bodyHasState: ${bodyHasState}
                    bodyHasResult: ${bodyHasResult}
                    bodyHasStatusCode: ${bodyHasStatusCode}
                requestData:
                  firstName: ${firstName}
                  lastName: ${lastName}
                  insurance: ${insurance}
                  insuranceMemberId: ${insuranceMemberId}
                  groupNumber: ${groupNumber}
                  dateOfBirth: ${dateOfBirth}
                timestamp: ${timestamp}

    # ---------------------------------------------------------------
    # 7. Call User Creation Workflow
    # ---------------------------------------------------------------
    - callUserCreationWorkflow:
        try:
          call: http.post
          args:
            url: ${"https://us-central1-" + projectId + ".cloudfunctions.net/workflow_user_creation"}
            auth:
              type: OIDC
            body:
              customerEmail: ${customerEmail}
              firstName: ${firstName}
              lastName: ${lastName}
              phoneNumber: ${phoneNumber}
              state: ${state}
              insurance: ${insurance}
              insuranceMemberId: ${insuranceMemberId}
              groupNumber: ${groupNumber}
              mainReasons: ${mainReasons}
              medicalConditions: ${medicalConditions}
              dateOfBirth: ${dateOfBirth}
              consent: ${consent}
              quizId: ${quizId}
              quizTitle: ${quizTitle}
              completedAt: ${timestamp}
              allResponses: ${responses}
              eligibilityData: ${eligibilityData}
          result: userCreationResponse
        except:
          as: e
          # If the HTTP call itself fails, create a mock response so the workflow can continue
          assign:
            - userCreationResponse:
                code: 500
                body:
                  success: false
                  error: "Failed to call user creation workflow"
                  details: ${e}

    - initUserCreationCheck:
        assign:
          - hasSuccess: false
          - userCreationError: null
        next: handleUserCreationResponse

    - handleUserCreationResponse:
        try:
          steps:
            - checkUserResponseFields:
                assign:
                  - hasSuccess: ${"body" in userCreationResponse and "success" in userCreationResponse.body and userCreationResponse.body.success}
        except:
          as: e
          # Don't return error here - let it continue to checkUserCreationSuccess
          # which will return success with eligibility data regardless of user creation failure
          assign:
            - hasSuccess: false
            - userCreationError: ${e}
        next: checkUserCreationSuccess

    - checkUserCreationSuccess:
        # Always return success if we have eligibility data, regardless of user creation success
        # The primary value for the user is getting their eligibility information
        return:
          statusCode: 200
          headers: ${corsHeaders}
          body:
            success: true
            eligibilityData: ${eligibilityData}
            userCreationSuccess: ${hasSuccess and userCreationResponse.code >= 200 and userCreationResponse.code < 300}
            # Include user creation details for debugging/logging purposes, but don't fail the overall request
            userCreationDetails: ${if(hasSuccess and userCreationResponse.code >= 200 and userCreationResponse.code < 300, userCreationResponse.body, null)}
            userCreationError: ${if(not (hasSuccess and userCreationResponse.code >= 200 and userCreationResponse.code < 300), if(userCreationError != null, userCreationError, userCreationResponse.body), null)}
            timestamp: ${timestamp}

# -----------------------------------------------------------------
# Helper sub-workflow: extract fields from payload / responses
# -----------------------------------------------------------------
extract_helper:
  params: [payload, responses]
  steps:
    - map:
        assign:
          - email: ${if(payload != null and "customerEmail" in payload and payload.customerEmail != null, payload.customerEmail, if(responses != null and "q9" in responses, responses.q9, ""))}
          - firstname: ${if(payload != null and "firstName" in payload and payload.firstName != null, payload.firstName, if(responses != null and "q7" in responses, responses.q7, ""))}
          - lastname: ${if(payload != null and "lastName" in payload and payload.lastName != null, payload.lastName, if(responses != null and "q8" in responses, responses.q8, ""))}
          - phone: ${if(payload != null and "phoneNumber" in payload and payload.phoneNumber != null, payload.phoneNumber, if(responses != null and "q10" in responses, responses.q10, ""))}
          - state: ${if(payload != null and "state" in payload and payload.state != null, payload.state, if(responses != null and "q5" in responses, responses.q5, ""))}
          - insurance: ${if(payload != null and "insurance" in payload and payload.insurance != null, payload.insurance, if(responses != null and "q3" in responses, responses.q3, ""))}
          - insuranceMemberId: ${if(payload != null and "insuranceMemberId" in payload and payload.insuranceMemberId != null, payload.insuranceMemberId, if(responses != null and "q4" in responses, responses.q4, ""))}
          - groupNumber: ${if(payload != null and "groupNumber" in payload and payload.groupNumber != null, payload.groupNumber, if(responses != null and "q4_group" in responses, responses.q4_group, ""))}
          - mainReasons: ${if(payload != null and "mainReasons" in payload and payload.mainReasons != null, payload.mainReasons, if(responses != null and "q1" in responses, responses.q1, []))}
          - medicalConditions: ${if(payload != null and "medicalConditions" in payload and payload.medicalConditions != null, payload.medicalConditions, if(responses != null and "q2" in responses, responses.q2, []))}
          - dob: ${if(payload != null and "dateOfBirth" in payload and payload.dateOfBirth != null, payload.dateOfBirth, if(responses != null and "q6" in responses, responses.q6, ""))}
          - consent: ${if(payload != null and "consent" in payload and payload.consent != null, payload.consent, if(responses != null and "consent" in responses, responses.consent, false))}
    - returnResult:
        return:
          email: ${email}
          firstname: ${firstname}
          lastname: ${lastname}
          phone: ${phone}
          state: ${state}
          insurance: ${insurance}
          insuranceMemberId: ${insuranceMemberId}
          groupNumber: ${groupNumber}
          mainReasons: ${mainReasons}
          medicalConditions: ${medicalConditions}
          dob: ${dob}
          consent: ${consent}
