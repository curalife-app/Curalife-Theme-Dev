manualJoin:
  params: [listToJoin, separator]
  steps:
    - init:
        assign:
          - joinedString: ""
          - first: true
    - iterate:
        for:
          value: item
          in: ${listToJoin}
          steps:
            - appendItem:
                switch:
                  - condition: ${first}
                    assign:
                      - joinedString: ${item}
                      - first: false
                  - condition: true
                    assign:
                      - joinedString: ${joinedString + separator + item}
    - returnJoinedString:
        return: ${joinedString}

# ==================================================================
#  User Creation Workflow (Shopify & HubSpot)
# ==================================================================

main:
  params: [request]

  steps:
    # ---------------------------------------------------------------
    # 0. Load configuration & CORS headers
    # ---------------------------------------------------------------
    - setup:
        assign:
          - corsHeaders:
              Access-Control-Allow-Origin: "*"
              Access-Control-Allow-Methods: "POST, GET, OPTIONS"
              Access-Control-Allow-Headers: "Content-Type, Authorization, X-Requested-With"
              Access-Control-Allow-Credentials: "true"
              Access-Control-Max-Age: "3600"
              Content-Type: "application/json"
          - rawData: ${request} # Use the entire request object
          - parsedData: null
          - actualPayload: null
          - hubspotBaseUrl: "https://api.hubapi.com"
          - shopifyStoreName: ${if(sys.get_env("SHOPIFY_STORE_NAME") != null, sys.get_env("SHOPIFY_STORE_NAME"), "curalife-commerce")}
          - shopifyGraphQLUrl: ${"https://" + shopifyStoreName + ".myshopify.com/admin/api/2025-04/graphql.json"}
          - shopifySearchUrl: ${"https://" + shopifyStoreName + ".myshopify.com/admin/api/2025-04/customers/search.json"}
          - hubspotAccessToken: ${if(sys.get_env("HUBSPOT_ACCESS_TOKEN") != null, sys.get_env("HUBSPOT_ACCESS_TOKEN"), "")}
          - shopifyAdminToken: ${if(sys.get_env("SHOPIFY_ADMIN_TOKEN") != null, sys.get_env("SHOPIFY_ADMIN_TOKEN"), "")}
          - timestamp: ${sys.now()}

    # ---------------------------------------------------------------
    # 1.  Validate tokens
    # ---------------------------------------------------------------
    - validateTokens:
        switch:
          - condition: ${hubspotAccessToken == ""}
            return:
              statusCode: 500
              headers: ${corsHeaders}
              body:
                success: false
                error: "Missing HUBSPOT_ACCESS_TOKEN environment variable"
                timestamp: ${timestamp}
          - condition: ${shopifyAdminToken == ""}
            return:
              statusCode: 500
              headers: ${corsHeaders}
              body:
                success: false
                error: "Missing SHOPIFY_ADMIN_TOKEN environment variable"
                timestamp: ${timestamp}
          - condition: true
            next: parseJson

    # ---------------------------------------------------------------
    # 2.  Parse JSON payload
    # ---------------------------------------------------------------
    - parseJson:
        assign:
          # rawData is already parsed by Workflows, no need to decode
          - parsedData: ${rawData}

    # ---------------------------------------------------------------
    # 3.  If payload has nested "data" field â†’ parse again
    # ---------------------------------------------------------------
    - resolveDataField:
        switch:
          - condition: ${parsedData != null and "data" in parsedData}
            try:
              assign:
                - actualPayload: ${json.decode(parsedData.data)}
            except:
              assign:
                - actualPayload: ${parsedData.data}
          - condition: true
            assign:
              - actualPayload: ${parsedData}

    # ---------------------------------------------------------------
    # 4.  Init variables (email etc.)
    # ---------------------------------------------------------------
    - initializeVars:
        assign:
          - customerEmail: ""
          - firstName: ""
          - lastName: ""
          - phoneNumber: ""
          - state: ""
          - insurance: ""
          - insuranceMemberId: ""
          - groupNumber: ""
          - mainReasons: []
          - medicalConditions: []
          - dateOfBirth: ""
          - consent: false
          - quizId: ${if(actualPayload != null and "quizId" in actualPayload, actualPayload.quizId, "unknown")}
          - quizTitle: ${if(actualPayload != null and "quizTitle" in actualPayload, actualPayload.quizTitle, "Unknown Quiz")}
          - timestamp: ${if(actualPayload != null and "completedAt" in actualPayload, actualPayload.completedAt, sys.now())}
          - emptyMap: {}
          - emptyArray: []
          - responses: ${if(actualPayload != null and "allResponses" in actualPayload, actualPayload.allResponses, emptyArray)}
          # Extract eligibility data - check if exists first
          - eligibilityDataRaw: ${if(actualPayload != null and "eligibilityData" in actualPayload, actualPayload.eligibilityData, emptyMap)}

    # Set up eligibility data with defaults
    - setupEligibilityData:
        assign:
          # Safely extract deductible individual value with proper null checking
          - eligibilityDeductibleIndividual: ${if("deductible" in eligibilityDataRaw and eligibilityDataRaw.deductible != null and "individual" in eligibilityDataRaw.deductible, eligibilityDataRaw.deductible.individual, 0)}
          - eligibilityData:
              isEligible: ${if("isEligible" in eligibilityDataRaw, eligibilityDataRaw.isEligible, false)}
              sessionsCovered: ${if("sessionsCovered" in eligibilityDataRaw, eligibilityDataRaw.sessionsCovered, 0)}
              deductible:
                individual: ${eligibilityDeductibleIndividual}
              eligibilityStatus: ${if("eligibilityStatus" in eligibilityDataRaw, eligibilityDataRaw.eligibilityStatus, "UNKNOWN")}
              userMessage: ${if("userMessage" in eligibilityDataRaw, eligibilityDataRaw.userMessage, "Eligibility data not provided")}
              planBegin: ${if("planBegin" in eligibilityDataRaw, eligibilityDataRaw.planBegin, "")}
              planEnd: ${if("planEnd" in eligibilityDataRaw, eligibilityDataRaw.planEnd, "")}

    # ---------------------------------------------------------------
    # 5.  Extract values directly from the payload + backup from responses
    # ---------------------------------------------------------------
    - extractFields:
        assign:
          - customerEmail: ${if(actualPayload != null and "customerEmail" in actualPayload, actualPayload.customerEmail, "")}
          - firstName: ${if(actualPayload != null and "firstName" in actualPayload, actualPayload.firstName, "")}
          - lastName: ${if(actualPayload != null and "lastName" in actualPayload, actualPayload.lastName, "")}
          - phoneNumber: ${if(actualPayload != null and "phoneNumber" in actualPayload, actualPayload.phoneNumber, "")}
          - state: ${if(actualPayload != null and "state" in actualPayload, actualPayload.state, "")}
          - insurance: ${if(actualPayload != null and "insurance" in actualPayload, actualPayload.insurance, "")}
          - insuranceMemberId: ${if(actualPayload != null and "insuranceMemberId" in actualPayload, actualPayload.insuranceMemberId, "")}
          - groupNumber: ${if(actualPayload != null and "groupNumber" in actualPayload, actualPayload.groupNumber, "")}
          - dateOfBirth: ${if(actualPayload != null and "dateOfBirth" in actualPayload, actualPayload.dateOfBirth, "")}
          - consent: ${if(actualPayload != null and "consent" in actualPayload, actualPayload.consent, false)}

    # ---------------------------------------------------------------
    # 5a. Parse mainReasons - handle both arrays and strings
    # ---------------------------------------------------------------
    - parseMainReasons:
        assign:
          - _mr_raw: ${if(actualPayload != null and "mainReasons" in actualPayload, actualPayload.mainReasons, null)}

    - processMainReasons:
        switch:
          - condition: ${_mr_raw == null}
            assign:
              - reasonsText: ""
          - condition: true
            try:
              # Try to use len() - if it works, it's an array
              call: manualJoin
              args:
                listToJoin: ${_mr_raw}
                separator: ", "
              result: reasonsText
            except:
              # If len() fails in manualJoin, it's a string
              assign:
                - reasonsText: ${_mr_raw}

    # ---------------------------------------------------------------
    # 5b. Parse medicalConditions - handle both arrays and strings
    # ---------------------------------------------------------------
    - parseMedicalConditions:
        assign:
          - _mc_raw: ${if(actualPayload != null and "medicalConditions" in actualPayload, actualPayload.medicalConditions, null)}

    - processMedicalConditions:
        switch:
          - condition: ${_mc_raw == null}
            assign:
              - conditionsText: ""
          - condition: true
            try:
              # Try to use len() - if it works, it's an array
              call: manualJoin
              args:
                listToJoin: ${_mc_raw}
                separator: ", "
              result: conditionsText
            except:
              # If len() fails in manualJoin, it's a string
              assign:
                - conditionsText: ${_mc_raw}
        next: validateEmail

    # ---------------------------------------------------------------
    # 6.  Validate email (using insurance payerId directly)
    # ---------------------------------------------------------------
    - validateEmail:
        switch:
          - condition: ${customerEmail != ""}
            next: tryCreateShopifyCustomer
          - condition: true
            return:
              statusCode: 400
              headers: ${corsHeaders}
              body:
                status: "skipped"
                success: false
                reason: "Invalid email address"
                attemptedEmail: ${customerEmail}

    - tryCreateShopifyCustomer:
        try:
          call: http.post
          args:
            url: ${shopifyGraphQLUrl}
            headers:
              X-Shopify-Access-Token: ${shopifyAdminToken}
              Content-Type: "application/json"
              Accept: "application/json"
            body:
              query: "mutation customerCreateMutation($input: CustomerInput!) { customerCreate(input: $input) { customer { id } userErrors { field message } } }"
              variables:
                input:
                  email: ${customerEmail}
                  firstName: ${firstName}
                  lastName: ${lastName}
                  phone: ${phoneNumber}
          result: shopifyCustomerResponse
        except:
          as: e
          steps:
            - assignErrorToResponse:
                assign:
                  - shopifyCustomerResponse: ${e}
        next: logShopifyResponse

    - logShopifyResponse:
        call: sys.log
        args:
          data: ${shopifyCustomerResponse}
          severity: INFO
        next: checkShopifyResponse

    - checkShopifyResponse:
        assign:
          - shopifyResponseCode: ${shopifyCustomerResponse.code}
          - shopifyHasBody: ${"body" in shopifyCustomerResponse}
          - shopifyHasData: ${shopifyHasBody and "data" in shopifyCustomerResponse.body}
          - shopifyHasCustomerCreate: ${shopifyHasData and "customerCreate" in shopifyCustomerResponse.body.data}
          - shopifyHasUserErrors: ${shopifyHasCustomerCreate and "userErrors" in shopifyCustomerResponse.body.data.customerCreate and len(shopifyCustomerResponse.body.data.customerCreate.userErrors) > 0}
          - shopifyHasCustomer: ${shopifyHasCustomerCreate and "customer" in shopifyCustomerResponse.body.data.customerCreate and shopifyCustomerResponse.body.data.customerCreate.customer != null}
          - shopifyEmailTakenError: false
          - shopifyPhoneTakenError: false
        next: checkGraphQLUserErrors

    - checkGraphQLUserErrors:
        switch:
          - condition: ${shopifyHasUserErrors}
            assign:
              - userErrors: ${shopifyCustomerResponse.body.data.customerCreate.userErrors}
              - shopifyEmailTakenError: true
              - shopifyPhoneTakenError: true
            next: handleShopifyCustomerResp
          - condition: true
            next: handleShopifyCustomerResp

    - handleShopifyCustomerResp:
        switch:
          # Case 1: Successful GraphQL customer creation
          - condition: ${shopifyResponseCode >= 200 and shopifyResponseCode < 300 and shopifyHasCustomer}
            assign:
              - shopifyCustomerId: ${shopifyCustomerResponse.body.data.customerCreate.customer.id}
            next: createHubSpotContact

          # Case 2: GraphQL customer already exists (userErrors with "taken" messages)
          - condition: >-
              ${shopifyResponseCode >= 200 and shopifyResponseCode < 300 and shopifyHasUserErrors and (
                shopifyEmailTakenError or
                shopifyPhoneTakenError
              )}
            next: searchExistingShopifyCustomer

          # Case 3: Other GraphQL userErrors (validation errors)
          - condition: ${shopifyResponseCode >= 200 and shopifyResponseCode < 300 and shopifyHasUserErrors}
            assign:
              - shopifyError: "Shopify validation errors occurred. Phone or email may be invalid."
            next: shopifyErrorGeneral

          # Case 4: GraphQL errors in response
          - condition: ${shopifyHasBody and "errors" in shopifyCustomerResponse.body}
            assign:
              - shopifyError: "GraphQL Error: See workflow logs for details"
            next: shopifyErrorGeneral

          # Case 5: Fallback for other errors
          - condition: true
            assign:
              - shopifyError: "Call failed with unknown status"
            next: shopifyErrorGeneral

    - searchExistingShopifyCustomer:
        call: http.post
        args:
          url: ${shopifyGraphQLUrl}
          headers:
            X-Shopify-Access-Token: ${shopifyAdminToken}
            Content-Type: "application/json"
            Accept: "application/json"
          body:
            query: "query customerSearchQuery($query: String!) { customers(first: 1, query: $query) { edges { node { id } } } }"
            variables:
              query: ${"email:" + customerEmail}
        result: shopifySearchResponse

    - handleShopifySearchResponse:
        switch:
          - condition: ${shopifySearchResponse.code >= 200 and shopifySearchResponse.code < 300 and "body" in shopifySearchResponse and "data" in shopifySearchResponse.body and "customers" in shopifySearchResponse.body.data and "edges" in shopifySearchResponse.body.data.customers and len(shopifySearchResponse.body.data.customers.edges) > 0}
            assign:
              - shopifyCustomerId: ${shopifySearchResponse.body.data.customers.edges[0].node.id}
            next: createHubSpotContact
          - condition: true
            assign:
              - shopifyCustomerId: null
              - shopifySearchError: "Shopify customer search failed"
            next: createHubSpotContact

    # ---------------------------------------------------------------
    # ===  HUBSPOT CONTACT CREATION  ===
    # ---------------------------------------------------------------
    - createHubSpotContact:
        try:
          call: http.post
          args:
            url: ${hubspotBaseUrl + "/crm/v3/objects/contacts"}
            headers:
              Authorization: '${"Bearer " + hubspotAccessToken}'
              Content-Type: "application/json"
            body:
              properties:
                # Standard HubSpot fields
                email: ${customerEmail}
                firstname: ${firstName}
                lastname: ${lastName}
                phone: ${phoneNumber}
                # Custom fields that exist in your HubSpot account
                registration_date: ${text.split(timestamp, "T")[0]} # Convert to YYYY-MM-DD format
                date_of_birth: ${dateOfBirth}
                shopify_customer_id: ${shopifyCustomerId}
                email_subscribed: ${string(consent)}
                sms_subscribed: ${string(consent)}
                has_account: "true"
                # Telemedicine categories (confirmed to exist)
                telemedicine_primary_category: ${reasonsText}
                telemedicine_secondary_category: ${if(conditionsText != "", text.split(conditionsText, ",")[0], "")} # Only send first value for dropdown
          result: hubspotContactResponse
        except:
          as: e
          assign:
            # Create a response object that mimics the successful HTTP response format
            # This allows the existing error handling logic to work properly
            - hubspotContactResponse:
                code: ${e.code}
                body: ${e.body}
                headers: ${if("headers" in e, e.headers, null)}
        next: handleContactResp

    - handleContactResp:
        switch:
          - condition: ${hubspotContactResponse.code >= 200 and hubspotContactResponse.code < 300}
            assign:
              - hubspotContactId: ${hubspotContactResponse.body.id}
            next: returnSuccess
          - condition: ${hubspotContactResponse.code == 409}
            next: getExistingContact
          - condition: true
            next: hubspotError

    - getExistingContact:
        call: http.post
        args:
          url: ${hubspotBaseUrl + "/crm/v3/objects/contacts/search"}
          headers: { Authorization: '${"Bearer " + hubspotAccessToken}', Content-Type: "application/json" }
          body:
            filterGroups:
              - filters:
                  - propertyName: "email"
                    operator: "EQ"
                    value: ${customerEmail}
        result: searchResp

    - assignExistingId:
        switch:
          - condition: ${searchResp.code >= 200 and searchResp.code < 300 and "body" in searchResp and "results" in searchResp.body and len(searchResp.body.results) > 0}
            assign:
              - hubspotContactId: ${searchResp.body.results[0].id}
            next: updateExistingContact
          - condition: true
            next: hubspotError

    # Update existing contact with new information
    - updateExistingContact:
        call: http.patch
        args:
          url: ${hubspotBaseUrl + "/crm/v3/objects/contacts/" + hubspotContactId}
          headers:
            Authorization: '${"Bearer " + hubspotAccessToken}'
            Content-Type: "application/json"
          body:
            properties:
              # Standard HubSpot fields
              firstname: ${firstName}
              lastname: ${lastName}
              phone: ${phoneNumber}
              # Custom fields that exist in your HubSpot account
              registration_date: ${text.split(timestamp, "T")[0]} # Convert to YYYY-MM-DD format
              date_of_birth: ${dateOfBirth}
              shopify_customer_id: ${shopifyCustomerId}
              email_subscribed: ${string(consent)}
              sms_subscribed: ${string(consent)}
              has_account: "true"
              # Telemedicine categories (confirmed to exist)
              telemedicine_primary_category: ${reasonsText}
              telemedicine_secondary_category: ${if(conditionsText != "", text.split(conditionsText, ",")[0], "")} # Only send first value for dropdown
        result: updateResp
        next: returnSuccess

    # ---------------------------------------------------------------
    # 8.  Success response
    # ---------------------------------------------------------------
    - returnSuccess:
        return:
          statusCode: 200
          headers: ${corsHeaders}
          body:
            success: true
            quizId: ${quizId}
            customerEmail: ${customerEmail}
            eligibilityStatus: ${eligibilityData.eligibilityStatus}
            shopifyCustomerId: ${shopifyCustomerId}
            hubspotContactId: ${hubspotContactId}
            timestamp: ${timestamp}

    # ---------------------------------------------------------------
    # 9. Error handlers
    # ---------------------------------------------------------------
    - shopifyErrorGeneral:
        return:
          statusCode: 500
          headers: ${corsHeaders}
          body:
            success: false
            error: ${if(shopifyError != null, shopifyError, "Unknown Shopify error")}
            quizId: ${quizId}
            timestamp: ${timestamp}

    - hubspotError:
        return:
          statusCode: 500
          headers: ${corsHeaders}
          body:
            success: false
            error: ${if(hubspotContactResponse.body != null and "message" in hubspotContactResponse.body, hubspotContactResponse.body.message, "Unknown HubSpot error")}
            statusCode: ${if(hubspotContactResponse.code != null, hubspotContactResponse.code, 500)}
            quizId: ${quizId}
            timestamp: ${timestamp}
