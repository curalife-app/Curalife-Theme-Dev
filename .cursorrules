# Curalife Theme Development - Project Rules

## File Structure Patterns

- Source files are stored in `src/` directory with a structured organization
- Build files are generated in `Curalife-Theme-Build/` directory with Shopify's flat structure
- The build process flattens the directory structure according to Shopify's requirements

## Naming Conventions

- Liquid snippets: Use `component.subcomponent.purpose.liquid` format (e.g., `layout.head.meta-tags.liquid`)
- CSS classes: Follow Tailwind conventions with custom utility extensions when needed
- JavaScript files: Use kebab-case for filenames (e.g., `cart-drawer.js`)
- Functions: Use camelCase for function names

## Development Workflow

- Use `npm run shopify` for the simplified Shopify hot reload development workflow
- Use `npm run watch` for file watching without Shopify integration
- Always run `npm run build` before deploying to production
- Shopify environments are configured in order of priority: curalife-commerce.myshopify.com, curalife-commerce-sia.myshopify.com, staging-curalife.myshopify.com

## CSS Guidelines

- Primary styling approach uses Tailwind utility classes
- Custom CSS should be minimal and only used when Tailwind doesn't provide a solution
- Component-specific styles should be placed in dedicated CSS files in `src/styles/css/`
- Follow mobile-first responsive approach with defined breakpoints

## JavaScript Patterns

- Use ES6+ syntax with modular organization
- Prefer vanilla JavaScript over heavy frameworks
- Implement progressive enhancement (core functionality works without JS)
- Load non-critical JavaScript asynchronously
- Use data attributes for JavaScript hooks rather than classes

## Shopify-Specific Patterns

- Use section and block architecture for customizable components
- Implement localization support through translation files
- Use Shopify's recommended metafield structure for custom data
- Follow Liquid best practices for template organization and reuse

## Performance Guidelines

- Optimize images before adding to the theme
- Minimize third-party script usage
- Implement lazy loading for below-the-fold content
- Keep JavaScript bundles small and focused
- Follow Shopify's recommendations for theme optimization

## Deployment Process

- Test all changes in development environment first
- Use the staging environment for client review
- Verify responsive behavior across device sizes before production deployment
- Run final build with production settings before pushing to live theme

## Known Workarounds

- Custom file watchers are needed due to limitations in Shopify's development tools
- Some sections require specific implementation to work properly in the theme editor
- Cart drawer implementation uses custom AJAX to avoid page refreshes