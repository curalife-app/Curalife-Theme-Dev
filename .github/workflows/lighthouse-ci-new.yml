name: Lighthouse CI

on:
  schedule:
    - cron: "15 2 * * *" # Run every day at 2:15 UTC
    - cron: "15 14 * * *" # Run every day at 14:15 UTC
  # Allow manual trigger through GitHub UI
  workflow_dispatch:
  pull_request:
    branches: [main, master]

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  lighthouse-desktop:
    name: Lighthouse CI (Desktop)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate Lighthouse config
        run: |
          # Create shared configuration script
          cat > create-lighthouse-config.sh << 'EOF'
          #!/bin/bash

          # Common settings for all configurations
          COMMON_SETTINGS='"numberOfRuns": 1,
            "settings": {
              "throttlingMethod": "devtools",
              "chromeFlags": "--disable-dev-shm-usage --no-sandbox --disable-gpu",
              "skipAudits": [
                "uses-http2",
                "uses-long-cache-ttl",
                "canonical",
                "redirects",
                "uses-text-compression",
                "third-party-facades"
              ],
              "maxWaitForLoad": 60000,
              "onlyCategories": [
                "performance",
                "accessibility",
                "best-practices",
                "seo"
              ]'

          # Function to generate configuration
          create_config() {
            local config_file=$1
            local form_factor=$2
            local is_mobile=$3
            local width=$4
            local height=$5
            local device_scale=$6
            local user_agent=$7

            # Build device-specific settings
            local device_settings='"formFactor": "'$form_factor'",
              "screenEmulation": {
                "mobile": '$is_mobile',
                "width": '$width',
                "height": '$height',
                "deviceScaleFactor": '$device_scale',
                "disabled": false
              }'

            # Add user agent if provided
            if [ ! -z "$user_agent" ]; then
              device_settings="$device_settings,
              \"emulatedUserAgent\": \"$user_agent\""
            fi

            # Create the config file
            cat > $config_file << EOL
          {
            "ci": {
              "collect": {
                $COMMON_SETTINGS,
                $device_settings
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL
          }

          # Export the function so it can be used in the workflow
          export -f create_config
          EOF

          # Make the script executable
          chmod +x create-lighthouse-config.sh

          # Source the script to use the function
          source ./create-lighthouse-config.sh

          # Create desktop config
          create_config "lighthouserc-desktop.json" \
            "desktop" \
            "false" \
            "1350" \
            "940" \
            "1" \
            ""

      - name: Run Lighthouse CI (Desktop)
        id: lighthouse-desktop
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc-desktop.json"
          urls: ${{ matrix.page.url }}
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-desktop-${{ matrix.page.name }}-${{ github.run_id }}

  lighthouse-mobile:
    name: Lighthouse CI (Mobile)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate Lighthouse config
        run: |
          # Create shared configuration script
          cat > create-lighthouse-config.sh << 'EOF'
          #!/bin/bash

          # Common settings for all configurations
          COMMON_SETTINGS='"numberOfRuns": 1,
            "settings": {
              "throttlingMethod": "devtools",
              "chromeFlags": "--disable-dev-shm-usage --no-sandbox --disable-gpu",
              "skipAudits": [
                "uses-http2",
                "uses-long-cache-ttl",
                "canonical",
                "redirects",
                "uses-text-compression",
                "third-party-facades"
              ],
              "maxWaitForLoad": 60000,
              "onlyCategories": [
                "performance",
                "accessibility",
                "best-practices",
                "seo"
              ]'

          # Function to generate configuration
          create_config() {
            local config_file=$1
            local form_factor=$2
            local is_mobile=$3
            local width=$4
            local height=$5
            local device_scale=$6
            local user_agent=$7

            # Build device-specific settings
            local device_settings='"formFactor": "'$form_factor'",
              "screenEmulation": {
                "mobile": '$is_mobile',
                "width": '$width',
                "height": '$height',
                "deviceScaleFactor": '$device_scale',
                "disabled": false
              }'

            # Add user agent if provided
            if [ ! -z "$user_agent" ]; then
              device_settings="$device_settings,
              \"emulatedUserAgent\": \"$user_agent\""
            fi

            # Create the config file
            cat > $config_file << EOL
          {
            "ci": {
              "collect": {
                $COMMON_SETTINGS,
                $device_settings
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL
          }

          # Export the function so it can be used in the workflow
          export -f create_config
          EOF

          # Make the script executable
          chmod +x create-lighthouse-config.sh

          # Source the script to use the function
          source ./create-lighthouse-config.sh

          # Create mobile config
          create_config "lighthouserc-mobile.json" \
            "mobile" \
            "true" \
            "360" \
            "640" \
            "2.625" \
            "Mozilla/5.0 (Linux; Android 11; moto g power (2022)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36"

      - name: Run Lighthouse CI (Mobile)
        id: lighthouse-mobile
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc-mobile.json"
          urls: ${{ matrix.page.url }}
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-mobile-${{ matrix.page.name }}-${{ github.run_id }}

  # Compare results between main branch and PR
  compare-lighthouse-results:
    name: Compare Lighthouse Results
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Combine configs for comparison
        run: |
          cat > lighthouserc-comparison.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

  create-dashboard:
    name: Create Lighthouse Dashboard
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lighthouse-*
          path: lighthouse-artifacts
          merge-multiple: true

      - name: Generate Dashboard
        run: |
          # Install required packages
          npm install -g @lhci/utils ejs

          # Debug: Show the downloaded artifacts structure
          echo "Listing downloaded artifact files:"
          find lighthouse-artifacts -type f | sort

          # Create dashboard generation script
          cat > generate-dashboard.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const ejs = require('ejs');
          const { execSync } = require('child_process');

          // Create output directory
          const outputDir = 'performance-reports';
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
          }

          // Find all HTML report files
          const findCmd = "find lighthouse-artifacts -name '*.html'";
          const reportFiles = execSync(findCmd).toString().trim().split('\n').filter(Boolean);

          // Log found files
          console.log(`Found ${reportFiles.length} report files`);

          // Save file list for debugging
          fs.writeFileSync(path.join(outputDir, 'report-files.txt'), reportFiles.join('\n'));

          // Process the reports
          const reports = reportFiles.map(reportPath => {
            const filename = path.basename(reportPath);

            // Copy file to output directory
            fs.copyFileSync(reportPath, path.join(outputDir, filename));

            // Determine page and device from filename or path
            let device = "Unknown";
            let page = "Unknown";

            if (reportPath.includes('desktop')) {
              device = "Desktop";
            } else if (reportPath.includes('mobile')) {
              device = "Mobile";
            }

            if (reportPath.includes('homepage')) {
              page = "Homepage";
            } else if (reportPath.includes('product')) {
              page = "Product Page";
            }

            return {
              page,
              device,
              filename,
              originalPath: reportPath
            };
          });

          // Sort reports for better display
          reports.sort((a, b) => {
            if (a.page === b.page) return a.device.localeCompare(b.device);
            return a.page.localeCompare(b.page);
          });

          // EJS template for the dashboard
          const template = `
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Lighthouse Performance Dashboard - Curalife</title>
            <style>
              body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.5; max-width: 1200px; margin: 0 auto; padding: 20px; }
              h1, h2 { color: #333; }
              .report-card { border: 1px solid #eee; padding: 15px; margin-bottom: 15px; border-radius: 5px; }
              .report-card h3 { margin-top: 0; }
              .scores { display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px; }
              .score { padding: 8px 15px; border-radius: 20px; color: white; font-weight: bold; }
              .perf { background: #0c6; }
              .a11y { background: #7c5; }
              .bp { background: #06c; }
              .seo { background: #c06; }
              a.report-link { display: inline-block; margin-top: 10px; text-decoration: none; padding: 8px 15px; background: #333; color: white; border-radius: 4px; }
              a.report-link:hover { background: #555; }
              .timestamp { color: #666; font-size: 0.9em; margin-bottom: 30px; }
              .debug-info { background: #f5f5f5; padding: 10px; border-radius: 5px; margin-top: 30px; font-size: 0.9em; }
              .debug-info ul { max-height: 200px; overflow-y: auto; }
            </style>
          </head>
          <body>
            <h1>Lighthouse Performance Dashboard</h1>
            <p class="timestamp">Generated on <%= new Date().toUTCString() %></p>

            <h2>Latest Reports</h2>
            <div id="reports">
              <% if (reports.length === 0) { %>
                <p>No reports available yet. Check the debug information below.</p>
              <% } else { %>
                <% reports.forEach(report => { %>
                  <div class="report-card">
                    <h3><%= report.page %> (<%= report.device %>)</h3>
                    <a class="report-link" href="./<%= report.filename %>" target="_blank">View Full Report</a>
                    <p class="original-path">Original path: <%= report.originalPath %></p>
                  </div>
                <% }); %>
              <% } %>
            </div>

            <div class="debug-info">
              <h3>Debug Information</h3>
              <p>Files found: <%= reportFiles.length %></p>
              <ul>
                <% reportFiles.forEach(file => { %>
                  <li><%= file %></li>
                <% }); %>
              </ul>
            </div>
          </body>
          </html>
          `;

          // Render and save the dashboard
          const html = ejs.render(template, { reports, reportFiles });
          fs.writeFileSync(path.join(outputDir, 'index.html'), html);

          // List what was generated
          console.log('Files in performance-reports directory:');
          const generatedFiles = execSync(`find ${outputDir} -type f | sort`).toString();
          console.log(generatedFiles);
          EOF

          # Make the script executable and run it
          chmod +x generate-dashboard.js
          node generate-dashboard.js

      - name: Upload Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-dashboard
          path: performance-reports
          retention-days: 30

      # This is required for GitHub Pages deployment
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: performance-reports

  # Deploy to GitHub Pages if on main/master branch
  deploy-pages:
    name: Deploy to GitHub Pages
    needs: create-dashboard
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      # The checkout is not needed anymore, since we use upload-pages-artifact
      # which uploads to the "github-pages" artifact automatically

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
