name: Lighthouse CI

on:
  schedule:
    - cron: "15 2 * * *" # Run every day at 2:15 UTC
    - cron: "15 14 * * *" # Run every day at 14:15 UTC
  # Allow manual trigger through GitHub UI
  workflow_dispatch:
  pull_request:
    branches: [main, master]

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  lighthouse-desktop:
    name: Lighthouse CI (Desktop)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%m%d%Y')" >> $GITHUB_OUTPUT

      - name: Generate Lighthouse config
        run: |
          # Create desktop config file directly
          cat > lighthouserc-desktop.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "throttlingMethod": "devtools",
                  "chromeFlags": "--disable-dev-shm-usage --no-sandbox --disable-gpu",
                  "formFactor": "desktop",
                  "screenEmulation": {
                    "mobile": false,
                    "width": 1350,
                    "height": 940,
                    "deviceScaleFactor": 1,
                    "disabled": false
                  },
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ],
                  "maxWaitForLoad": 60000,
                  "onlyCategories": [
                    "performance",
                    "accessibility",
                    "best-practices",
                    "seo"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI (Desktop)
        id: lighthouse-desktop
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc-desktop.json"
          urls: ${{ matrix.page.url }}
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: ${{ matrix.page.name }}-desktop-${{ steps.date.outputs.date }}

  lighthouse-mobile:
    name: Lighthouse CI (Mobile)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%m%d%Y')" >> $GITHUB_OUTPUT

      - name: Generate Lighthouse config
        run: |
          # Create mobile config file directly
          cat > lighthouserc-mobile.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "throttlingMethod": "devtools",
                  "chromeFlags": "--disable-dev-shm-usage --no-sandbox --disable-gpu",
                  "formFactor": "mobile",
                  "screenEmulation": {
                    "mobile": true,
                    "width": 360,
                    "height": 640,
                    "deviceScaleFactor": 2.625,
                    "disabled": false
                  },
                  "emulatedUserAgent": "Mozilla/5.0 (Linux; Android 11; moto g power (2022)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36",
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ],
                  "maxWaitForLoad": 60000,
                  "onlyCategories": [
                    "performance",
                    "accessibility",
                    "best-practices",
                    "seo"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI (Mobile)
        id: lighthouse-mobile
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc-mobile.json"
          urls: ${{ matrix.page.url }}
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: ${{ matrix.page.name }}-mobile-${{ steps.date.outputs.date }}

  # Compare results between main branch and PR
  compare-lighthouse-results:
    name: Compare Lighthouse Results
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: echo "date=$(date +'%m%d%Y')" >> $GITHUB_OUTPUT

      - name: Combine configs for comparison
        run: |
          cat > lighthouserc-comparison.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Compare against main branch
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://curalife.com/
            https://curalife.com/products/curalin
          serverBaseUrl: ${{ secrets.LHCI_SERVER_BASE_URL || '' }}
          serverToken: ${{ secrets.LHCI_SERVER_TOKEN || '' }}
          uploadArtifacts: true
          artifactName: comparison-results-${{ steps.date.outputs.date }}
          temporaryPublicStorage: true
          configPath: ./lighthouserc-comparison.json
          compareWithBaseBranch: true

  create-dashboard:
    name: Create Lighthouse Dashboard
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get current date
        id: date
        run: echo "date=$(date +'%m%d%Y')" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-desktop-*|*-mobile-*"
          path: lighthouse-artifacts
          merge-multiple: true

      - name: Log Metrics to Google Sheet
        run: |
          # Install required packages
          npm install -y
          npm install googleapis @actions/core google-auth-library

          # Create the Google Sheets integration script
          cat > update-google-sheet.js << 'EOF'
          const { google } = require('googleapis');
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');
          const { OAuth2Client } = require('google-auth-library');

          async function main() {
            try {
              // Setup auth with client ID and secret
              const clientId = process.env.GOOGLE_CLIENT_ID;
              const clientSecret = process.env.GOOGLE_CLIENT_SECRET;
              const refreshToken = process.env.GOOGLE_REFRESH_TOKEN;
              const spreadsheetId = process.env.GOOGLE_SHEET_ID;

              if (!clientId || !clientSecret || !refreshToken) {
                console.error('Missing required Google API credentials');
                return;
              }

              // Create OAuth2 client
              const oauth2Client = new OAuth2Client(
                clientId,
                clientSecret,
                'https://developers.google.com/oauthplayground' // Redirect URI (not used in this context)
              );

              // Set credentials using refresh token
              oauth2Client.setCredentials({
                refresh_token: refreshToken
              });

              // Initialize sheets API with the auth client
              const sheets = google.sheets({ version: 'v4', auth: oauth2Client });

              console.log('Finding Lighthouse reports...');
              const findCmd = "find lighthouse-artifacts -type f -name '*.json'";
              const jsonFiles = execSync(findCmd).toString().trim().split('\n').filter(Boolean);

              if (jsonFiles.length === 0) {
                console.log('No JSON result files found');
                return;
              }

              console.log(`Found ${jsonFiles.length} JSON files for processing`);

              // Collect metrics from each report
              const metrics = [];
              const date = new Date().toISOString().split('T')[0];
              const timestamp = new Date().toISOString();

              for (const jsonFile of jsonFiles) {
                try {
                  console.log(`Processing ${jsonFile}...`);
                  const data = JSON.parse(fs.readFileSync(jsonFile, 'utf8'));

                  // Skip if not a Lighthouse report
                  if (!data.audits) continue;

                  // Extract page info from filename
                  let pageName = "Unknown";
                  let deviceType = "Unknown";

                  if (jsonFile.includes('homepage')) {
                    pageName = "Homepage";
                  } else if (jsonFile.includes('product')) {
                    pageName = "Product Page";
                  }

                  if (jsonFile.includes('desktop')) {
                    deviceType = "Desktop";
                  } else if (jsonFile.includes('mobile')) {
                    deviceType = "Mobile";
                  }

                  // Get performance scores
                  const categories = data.categories || {};
                  const performanceScore = categories.performance ? Math.round(categories.performance.score * 100) : null;
                  const accessibilityScore = categories.accessibility ? Math.round(categories.accessibility.score * 100) : null;
                  const bestPracticesScore = categories['best-practices'] ? Math.round(categories['best-practices'].score * 100) : null;
                  const seoScore = categories.seo ? Math.round(categories.seo.score * 100) : null;

                  // Key metrics
                  const fcp = data.audits?.['first-contentful-paint']?.numericValue;
                  const lcp = data.audits?.['largest-contentful-paint']?.numericValue;
                  const tbt = data.audits?.['total-blocking-time']?.numericValue;
                  const cls = data.audits?.['cumulative-layout-shift']?.numericValue;
                  const tti = data.audits?.['interactive']?.numericValue;

                  metrics.push([
                    timestamp,
                    date,
                    pageName,
                    deviceType,
                    performanceScore,
                    accessibilityScore,
                    bestPracticesScore,
                    seoScore,
                    fcp ? Math.round(fcp) : null,
                    lcp ? Math.round(lcp) : null,
                    tbt ? Math.round(tbt) : null,
                    cls ? cls.toFixed(3) : null,
                    tti ? Math.round(tti) : null,
                    process.env.GITHUB_REF || 'unknown',
                    process.env.GITHUB_SHA || 'unknown'
                  ]);

                  console.log(`Processed metrics for ${pageName} on ${deviceType}`);
                } catch (error) {
                  console.error(`Error processing ${jsonFile}:`, error);
                }
              }

              if (metrics.length === 0) {
                console.log('No valid metrics extracted from reports');
                return;
              }

              // Append data to Google Sheet
              console.log(`Appending ${metrics.length} rows to Google Sheet...`);

              const response = await sheets.spreadsheets.values.append({
                spreadsheetId,
                range: 'Lighthouse!A2:O',  // Assuming headers are in row 1
                valueInputOption: 'USER_ENTERED',
                resource: {
                  values: metrics
                }
              });

              console.log(`${response.data.updates.updatedCells} cells updated in Google Sheet`);

              // Create header row if it doesn't exist
              const headers = [
                'Timestamp', 'Date', 'Page', 'Device',
                'Performance', 'Accessibility', 'Best Practices', 'SEO',
                'FCP (ms)', 'LCP (ms)', 'TBT (ms)', 'CLS', 'TTI (ms)',
                'Git Ref', 'Commit SHA'
              ];

              try {
                const headerCheck = await sheets.spreadsheets.values.get({
                  spreadsheetId,
                  range: 'Lighthouse!A1:O1'
                });

                if (!headerCheck.data.values || headerCheck.data.values[0].length < headers.length) {
                  await sheets.spreadsheets.values.update({
                    spreadsheetId,
                    range: 'Lighthouse!A1:O1',
                    valueInputOption: 'USER_ENTERED',
                    resource: {
                      values: [headers]
                    }
                  });
                  console.log('Added header row to the Google Sheet');
                }
              } catch (error) {
                console.error('Error checking/updating header row:', error);
              }

            } catch (error) {
              console.error('Error updating Google Sheet:', error);
              throw error;
            }
          }

          main().catch(console.error);
          EOF

          # Check if required secrets are available
          if [ -n "${{ secrets.GOOGLE_CLIENT_ID }}" ] && [ -n "${{ secrets.GOOGLE_CLIENT_SECRET }}" ] && [ -n "${{ secrets.GOOGLE_REFRESH_TOKEN }}" ] && [ -n "${{ secrets.GOOGLE_SHEET_ID }}" ]; then
            echo "Google Sheets credentials found, logging metrics..."
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            GOOGLE_REFRESH_TOKEN="${{ secrets.GOOGLE_REFRESH_TOKEN }}" \
            GOOGLE_SHEET_ID="${{ secrets.GOOGLE_SHEET_ID }}" \
            node update-google-sheet.js
          else
            echo "Google Sheets credentials not found, skipping metrics logging"
          fi

      - name: Generate Dashboard
        run: |
          # Install required packages locally
          npm init -y
          npm install @lhci/utils ejs

          # Create artifacts directory if it doesn't exist
          mkdir -p lighthouse-artifacts

          # Debug: Show the downloaded artifacts structure
          echo "Listing downloaded artifacts structure:"
          find . -type d | sort

          echo "Listing all downloaded artifacts files:"
          find . -type f -name "*.html" | sort

          # Create dashboard generation script with CommonJS syntax
          cat > generate-dashboard.js << 'EOF'
          // Use CommonJS syntax instead of ES modules
          const fs = require('fs');
          const path = require('path');
          const ejs = require('ejs');
          const { execSync } = require('child_process');

          try {
            // Create output directory
            const outputDir = 'performance-reports';
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir, { recursive: true });
            }

            // Find all HTML report files
            let reportFiles = [];
            try {
              const findCmd = "find lighthouse-artifacts -type f -name '*.html'";
              const findOutput = execSync(findCmd).toString().trim();
              if (findOutput) {
                reportFiles = findOutput.split('\n').filter(Boolean);
              }
            } catch (error) {
              console.error('Error finding HTML files:', error);
              fs.writeFileSync(path.join(outputDir, 'error.txt'),
                `Error finding HTML files: ${error.message}\n${error.stack}`);
            }

            // Log found files
            console.log(`Found ${reportFiles.length} report files`);

            // Save file list for debugging
            fs.writeFileSync(path.join(outputDir, 'report-files.txt'),
              reportFiles.join('\n') || 'No files found');

            // Create a basic dashboard even if no reports are found
            fs.writeFileSync(path.join(outputDir, 'file-structure.txt'),
              execSync('find . -type f | sort').toString());

            // Process the reports
            const reports = reportFiles.map(reportPath => {
              const filename = path.basename(reportPath);

              try {
                // Copy file to output directory
                fs.copyFileSync(reportPath, path.join(outputDir, filename));
              } catch (error) {
                console.error(`Error copying file ${reportPath}:`, error);
              }

              // Determine page and device from filename or path
              let device = "Unknown";
              let page = "Unknown";

              if (reportPath.includes('desktop')) {
                device = "Desktop";
              } else if (reportPath.includes('mobile')) {
                device = "Mobile";
              }

              if (reportPath.includes('homepage')) {
                page = "Homepage";
              } else if (reportPath.includes('product')) {
                page = "Product Page";
              }

              return {
                page,
                device,
                filename,
                originalPath: reportPath
              };
            });

            // Sort reports for better display
            reports.sort((a, b) => {
              if (a.page === b.page) return a.device.localeCompare(b.device);
              return a.page.localeCompare(b.page);
            });

            // EJS template for the dashboard
            const template = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Lighthouse Performance Dashboard - Curalife</title>
              <style>
                body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.5; max-width: 1200px; margin: 0 auto; padding: 20px; }
                h1, h2 { color: #333; }
                .report-card { border: 1px solid #eee; padding: 15px; margin-bottom: 15px; border-radius: 5px; }
                .report-card h3 { margin-top: 0; }
                .scores { display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px; }
                .score { padding: 8px 15px; border-radius: 20px; color: white; font-weight: bold; }
                .perf { background: #0c6; }
                .a11y { background: #7c5; }
                .bp { background: #06c; }
                .seo { background: #c06; }
                a.report-link { display: inline-block; margin-top: 10px; text-decoration: none; padding: 8px 15px; background: #333; color: white; border-radius: 4px; }
                a.report-link:hover { background: #555; }
                .timestamp { color: #666; font-size: 0.9em; margin-bottom: 30px; }
                .debug-info { background: #f5f5f5; padding: 10px; border-radius: 5px; margin-top: 30px; font-size: 0.9em; }
                .debug-info ul { max-height: 200px; overflow-y: auto; }
              </style>
            </head>
            <body>
              <h1>Lighthouse Performance Dashboard</h1>
              <p class="timestamp">Generated on <%= new Date().toUTCString() %></p>

              <h2>Latest Reports</h2>
              <div id="reports">
                <% if (reports.length === 0) { %>
                  <p>No reports available yet. Check the debug information below.</p>
                <% } else { %>
                  <% reports.forEach(report => { %>
                    <div class="report-card">
                      <h3><%= report.page %> (<%= report.device %>)</h3>
                      <a class="report-link" href="./<%= report.filename %>" target="_blank">View Full Report</a>
                      <p class="original-path">Original path: <%= report.originalPath %></p>
                    </div>
                  <% }); %>
                <% } %>
              </div>

              <div class="debug-info">
                <h3>Debug Information</h3>
                <p>Files found: <%= reportFiles.length %></p>
                <ul>
                  <% reportFiles.forEach(file => { %>
                    <li><%= file %></li>
                  <% }); %>
                </ul>
              </div>
            </body>
            </html>
            `;

            // Render and save the dashboard
            const html = ejs.render(template, { reports, reportFiles });
            fs.writeFileSync(path.join(outputDir, 'index.html'), html);

            // Create a placeholder file to ensure the directory is not empty
            if (reports.length === 0) {
              fs.writeFileSync(path.join(outputDir, 'no-reports.html'),
                '<html><body><h1>No Lighthouse reports found</h1><p>Check the GitHub Actions logs for more information.</p></body></html>');
            }

            // List what was generated
            console.log('Files in performance-reports directory:');
            const generatedFiles = execSync(`find ${outputDir} -type f | sort`).toString();
            console.log(generatedFiles);
          } catch (error) {
            console.error('Error generating dashboard:', error);
            // Create a minimal output in case of errors
            const outputDir = 'performance-reports';
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir, { recursive: true });
            }
            fs.writeFileSync(path.join(outputDir, 'error.html'),
              `<html><body><h1>Error generating dashboard</h1><pre>${error.stack}</pre></body></html>`);
          }
          EOF

          # Make the script executable and run it
          node generate-dashboard.js

      - name: Upload Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-dashboard
          path: performance-reports
          retention-days: 30

      # This is required for GitHub Pages deployment
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: performance-reports

  # Deploy to GitHub Pages if on main/master branch
  deploy-pages:
    name: Deploy to GitHub Pages
    needs: create-dashboard
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      # The checkout is not needed anymore, since we use upload-pages-artifact
      # which uploads to the "github-pages" artifact automatically

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
