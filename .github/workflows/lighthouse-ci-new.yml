name: Lighthouse CI

on:
  schedule:
    - cron: "15 2 * * *" # Run every day at 2:15 UTC
    - cron: "15 14 * * *" # Run every day at 14:15 UTC
  # Allow manual trigger through GitHub UI
  workflow_dispatch:
  pull_request:
    branches: [main, master]

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

jobs:
  lighthouse-desktop:
    name: Lighthouse CI (Desktop)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate Lighthouse config
        run: |
          cat > lighthouserc-desktop.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "throttlingMethod": "devtools",
                  "chromeFlags": "--disable-dev-shm-usage --no-sandbox --disable-gpu",
                  "formFactor": "desktop",
                  "screenEmulation": {
                    "mobile": false,
                    "width": 1350,
                    "height": 940,
                    "deviceScaleFactor": 1,
                    "disabled": false
                  },
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ],
                  "maxWaitForLoad": 60000,
                  "onlyCategories": [
                    "performance",
                    "accessibility",
                    "best-practices",
                    "seo"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI (Desktop)
        id: lighthouse-desktop
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc-desktop.json"
          urls: ${{ matrix.page.url }}
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-desktop-${{ matrix.page.name }}-${{ github.run_id }}

  lighthouse-mobile:
    name: Lighthouse CI (Mobile)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate Lighthouse config
        run: |
          cat > lighthouserc-mobile.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "throttlingMethod": "devtools",
                  "chromeFlags": "--disable-dev-shm-usage --no-sandbox --disable-gpu",
                  "formFactor": "mobile",
                  "screenEmulation": {
                    "mobile": true,
                    "width": 360,
                    "height": 640,
                    "deviceScaleFactor": 2.625,
                    "disabled": false
                  },
                  "emulatedUserAgent": "Mozilla/5.0 (Linux; Android 11; moto g power (2022)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Mobile Safari/537.36",
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ],
                  "maxWaitForLoad": 60000,
                  "onlyCategories": [
                    "performance",
                    "accessibility",
                    "best-practices",
                    "seo"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Run Lighthouse CI (Mobile)
        id: lighthouse-mobile
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc-mobile.json"
          urls: ${{ matrix.page.url }}
          temporaryPublicStorage: true
          uploadArtifacts: true
          artifactName: lighthouse-mobile-${{ matrix.page.name }}-${{ github.run_id }}

  # Compare results between main branch and PR
  compare-lighthouse-results:
    name: Compare Lighthouse Results
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Combine configs for comparison
        run: |
          cat > lighthouserc-comparison.json << EOL
          {
            "ci": {
              "collect": {
                "numberOfRuns": 1,
                "settings": {
                  "skipAudits": [
                    "uses-http2",
                    "uses-long-cache-ttl",
                    "canonical",
                    "redirects",
                    "uses-text-compression",
                    "third-party-facades"
                  ]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOL

      - name: Compare against main branch
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://curalife.com/
            https://curalife.com/products/curalin
          serverBaseUrl: ${{ secrets.LHCI_SERVER_BASE_URL || '' }}
          serverToken: ${{ secrets.LHCI_SERVER_TOKEN || '' }}
          uploadArtifacts: true
          artifactName: lighthouse-comparison-${{ github.run_id }}
          temporaryPublicStorage: true
          configPath: ./lighthouserc-comparison.json
          compareWithBaseBranch: true

  create-dashboard:
    name: Create Lighthouse Dashboard
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lighthouse-*-${{ github.run_id }}
          path: lighthouse-artifacts
          merge-multiple: true

      - name: Generate Dashboard
        run: |
          # Install required packages
          npm install -g @lhci/utils

          # Create a more structured dashboard
          mkdir -p performance-reports

          cat << EOF > performance-reports/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Lighthouse Dashboard - Curalife</title>
            <style>
              body { font-family: system-ui, -apple-system, sans-serif; line-height: 1.5; max-width: 1200px; margin: 0 auto; padding: 20px; }
              h1, h2 { color: #333; }
              .report-card { border: 1px solid #eee; padding: 15px; margin-bottom: 15px; border-radius: 5px; }
              .report-card h3 { margin-top: 0; }
              .scores { display: flex; flex-wrap: wrap; gap: 10px; margin-bottom: 15px; }
              .score { padding: 8px 15px; border-radius: 20px; color: white; font-weight: bold; }
              .perf { background: #0c6; }
              .a11y { background: #7c5; }
              .bp { background: #06c; }
              .seo { background: #c06; }
              a.report-link { display: inline-block; margin-top: 10px; text-decoration: none; padding: 8px 15px; background: #333; color: white; border-radius: 4px; }
              a.report-link:hover { background: #555; }
              .timestamp { color: #666; font-size: 0.9em; margin-bottom: 30px; }
            </style>
          </head>
          <body>
            <h1>Lighthouse Performance Dashboard</h1>
            <p class="timestamp">Generated on $(date)</p>

            <h2>Latest Reports</h2>
            <div id="reports"></div>

            <script>
              // Simple script to organize report links
              const reportsContainer = document.getElementById('reports');

              // We'll populate this with the found reports
              const reports = [];
            </script>
          </body>
          </html>
          EOF

          # Find and process report files
          find lighthouse-artifacts -name "*.report.html" | while read report; do
            cp "$report" performance-reports/
            filename=$(basename "$report")

            # Extract page and device from filename pattern
            if [[ "$filename" == *"mobile"* ]]; then
              device="Mobile"
            elif [[ "$filename" == *"desktop"* ]]; then
              device="Desktop"
            else
              # Try to detect from directory structure
              report_path=$(dirname "$report")
              if [[ "$report_path" == *"mobile"* ]]; then
                device="Mobile"
              else
                device="Desktop"
              fi
            fi

            if [[ "$filename" == *"homepage"* || "$report" == *"homepage"* ]]; then
              page="Homepage"
            elif [[ "$filename" == *"product"* || "$report" == *"product"* ]]; then
              page="Product Page"
            else
              page="Unknown Page"
            fi

            # Add to the reports list in the HTML
            echo "<script>" >> performance-reports/index.html
            echo "reports.push({" >> performance-reports/index.html
            echo "  page: '$page'," >> performance-reports/index.html
            echo "  device: '$device'," >> performance-reports/index.html
            echo "  filename: '$filename'" >> performance-reports/index.html
            echo "});" >> performance-reports/index.html
            echo "</script>" >> performance-reports/index.html
          done

          # Add the rendering script
          cat << EOF >> performance-reports/index.html
          <script>
            // Sort and render the reports
            reports.sort((a, b) => {
              if (a.page === b.page) return a.device.localeCompare(b.device);
              return a.page.localeCompare(b.page);
            });

            reports.forEach(report => {
              const card = document.createElement('div');
              card.className = 'report-card';

              card.innerHTML = \`
                <h3>\${report.page} (\${report.device})</h3>
                <a class="report-link" href="./\${report.filename}" target="_blank">View Full Report</a>
              \`;

              reportsContainer.appendChild(card);
            });

            if (reports.length === 0) {
              reportsContainer.innerHTML = '<p>No reports available yet.</p>';
            }
          </script>
          EOF

      - name: Upload Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-dashboard
          path: performance-reports
          retention-days: 30

      # This is required for GitHub Pages deployment
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: performance-reports

  # Deploy to GitHub Pages if on main/master branch
  deploy-pages:
    name: Deploy to GitHub Pages
    needs: create-dashboard
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      # The checkout is not needed anymore, since we use upload-pages-artifact
      # which uploads to the "github-pages" artifact automatically

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
