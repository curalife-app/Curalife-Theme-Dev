name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli puppeteer

      - name: Run Lighthouse CI against production site
        run: |
          echo "Running Lighthouse CI against production site..."
          npx lhci autorun --collect.url=https://curalife.com/ --collect.numberOfRuns=1
        continue-on-error: true

      - name: Check for Lighthouse results
        id: check-reports
        run: |
          if ls .lighthouseci/lhr-*.json &> /dev/null; then
            echo "reports_exist=true" >> $GITHUB_OUTPUT
          else
            echo "reports_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Lighthouse CI results
        if: steps.check-reports.outputs.reports_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

      - name: Format lighthouse results
        run: |
          echo "## 🚦 Lighthouse Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if any reports were generated
          if ls .lighthouseci/lhr-*.json &> /dev/null; then
            LATEST_REPORT=$(ls -t .lighthouseci/lhr-*.json | head -n 1)

            # Extract scores
            PERFORMANCE=$(jq '.categories.performance.score * 100' $LATEST_REPORT)
            ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' $LATEST_REPORT)
            BEST_PRACTICES=$(jq '.categories["best-practices"].score * 100' $LATEST_REPORT)
            SEO=$(jq '.categories.seo.score * 100' $LATEST_REPORT)

            # Output scores to summary
            echo "| Metric | Score |" >> $GITHUB_STEP_SUMMARY
            echo "| ------ | ----- |" >> $GITHUB_STEP_SUMMARY
            echo "| ⚡ Performance | ${PERFORMANCE%.*}% |" >> $GITHUB_STEP_SUMMARY
            echo "| ♿ Accessibility | ${ACCESSIBILITY%.*}% |" >> $GITHUB_STEP_SUMMARY
            echo "| 👍 Best Practices | ${BEST_PRACTICES%.*}% |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔍 SEO | ${SEO%.*}% |" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "See attached artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No Lighthouse reports were generated. Check previous steps for errors." >> $GITHUB_STEP_SUMMARY
          fi
