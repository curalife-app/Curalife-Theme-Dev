name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Monday at 3:00 AM
    - cron: "0 3 * * 1"

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: collection
            url: https://curalife.com/collections/all
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli puppeteer lighthouse puppeteer-screenshot-cli

      - name: Set Chrome flags
        run: |
          echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless" >> $GITHUB_ENV

      - name: Setup results directory
        id: results-dir
        run: |
          RESULTS_DIR="${{ matrix.page.name }}-lighthouse-results"
          echo "results_dir=$RESULTS_DIR" >> $GITHUB_OUTPUT
          mkdir -p $RESULTS_DIR

      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          echo "Running Lighthouse on ${{ matrix.page.url }}..."
          npx lhci autorun \
            --collect.url=${{ matrix.page.url }} \
            --collect.numberOfRuns=1 \
            --collect.settings.preset=desktop \
            --collect.settings.chromeFlags="$CHROME_FLAGS" \
            --collect.settings.formFactor=desktop \
            --collect.settings.throttling.cpuSlowdownMultiplier=2 \
            --collect.settings.screenEmulation.disabled=false \
            --collect.settings.emulatedUserAgent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" \
            --collect.settings.onlyCategories="performance,accessibility,best-practices,seo,pwa" \
            --collect.settings.skipAudits="" \
            --collect.settings.output="html,json" \
            --collect.settings.disableStorageReset=false \
            --collect.settings.maxWaitForLoad=60000 \
            --upload.target=filesystem \
            --upload.outputDir=./${{ steps.results-dir.outputs.results_dir }}

          # Also run mobile test
          npx lhci autorun \
            --collect.url=${{ matrix.page.url }} \
            --collect.numberOfRuns=1 \
            --collect.settings.preset=mobile \
            --collect.settings.chromeFlags="$CHROME_FLAGS" \
            --collect.settings.formFactor=mobile \
            --collect.settings.screenEmulation.disabled=false \
            --collect.settings.emulatedUserAgent="Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36" \
            --collect.settings.onlyCategories="performance,accessibility,best-practices,seo,pwa" \
            --collect.settings.skipAudits="" \
            --collect.settings.output="html,json" \
            --collect.settings.disableStorageReset=false \
            --collect.settings.maxWaitForLoad=60000 \
            --upload.target=filesystem \
            --upload.outputDir=./${{ steps.results-dir.outputs.results_dir }}/mobile

          # Capture additional data for enhanced insights
          mkdir -p ./${{ steps.results-dir.outputs.results_dir }}/screenshots
          mkdir -p ./${{ steps.results-dir.outputs.results_dir }}/mobile/screenshots

          # Capture page screenshots for desktop
          puppeteer-screenshot-cli --url ${{ matrix.page.url }} --output ./${{ steps.results-dir.outputs.results_dir }}/screenshots/full-page.png --full-page
          puppeteer-screenshot-cli --url ${{ matrix.page.url }} --output ./${{ steps.results-dir.outputs.results_dir }}/screenshots/above-fold.png --width 1200 --height 800

          # Capture page screenshots for mobile
          puppeteer-screenshot-cli --url ${{ matrix.page.url }} --output ./${{ steps.results-dir.outputs.results_dir }}/mobile/screenshots/full-page.png --full-page --device "Pixel 5"
          puppeteer-screenshot-cli --url ${{ matrix.page.url }} --output ./${{ steps.results-dir.outputs.results_dir }}/mobile/screenshots/above-fold.png --device "Pixel 5"
        continue-on-error: true

      - name: Install jq for results processing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Process Lighthouse results
        id: scores
        run: |
          if [ -d "${{ steps.results-dir.outputs.results_dir }}" ]; then
            DESKTOP_REPORT=$(find ${{ steps.results-dir.outputs.results_dir }} -name "lhr-*.json" -not -path "*/mobile/*" | sort | tail -n 1)
            MOBILE_REPORT=$(find ${{ steps.results-dir.outputs.results_dir }}/mobile -name "lhr-*.json" | sort | tail -n 1)

            # Create a detailed metrics file for this run
            DETAILED_DIR="performance-reports/${{ matrix.page.name }}-details"
            mkdir -p $DETAILED_DIR
            DETAILED_FILE="$DETAILED_DIR/metrics-$(date +"%Y-%m-%d").json"

            echo "{" > $DETAILED_FILE
            echo "  \"page\": \"${{ matrix.page.name }}\"," >> $DETAILED_FILE
            echo "  \"url\": \"${{ matrix.page.url }}\"," >> $DETAILED_FILE
            echo "  \"date\": \"$(date +"%Y-%m-%d")\"," >> $DETAILED_FILE
            echo "  \"timestamp\": \"$(date +"%Y-%m-%dT%H:%M:%S%z")\"," >> $DETAILED_FILE
            echo "  \"desktop\": {}," >> $DETAILED_FILE
            echo "  \"mobile\": {}" >> $DETAILED_FILE
            echo "}" >> $DETAILED_FILE

            if [ -f "$DESKTOP_REPORT" ]; then
              DESKTOP_PERF=$(jq '.categories.performance.score * 100' $DESKTOP_REPORT)
              DESKTOP_ACC=$(jq '.categories.accessibility.score * 100' $DESKTOP_REPORT)
              DESKTOP_BP=$(jq '.categories["best-practices"].score * 100' $DESKTOP_REPORT)
              DESKTOP_SEO=$(jq '.categories.seo.score * 100' $DESKTOP_REPORT)
              DESKTOP_PWA=$(jq '.categories.pwa.score * 100' $DESKTOP_REPORT 2>/dev/null || echo "0")
              DESKTOP_LCP=$(jq '.audits["largest-contentful-paint"].numericValue' $DESKTOP_REPORT)
              DESKTOP_FID=$(jq '.audits["max-potential-fid"].numericValue' $DESKTOP_REPORT)
              DESKTOP_TBT=$(jq '.audits["total-blocking-time"].numericValue' $DESKTOP_REPORT)
              DESKTOP_CLS=$(jq '.audits["cumulative-layout-shift"].numericValue' $DESKTOP_REPORT)
              DESKTOP_FCP=$(jq '.audits["first-contentful-paint"].numericValue' $DESKTOP_REPORT)
              DESKTOP_SI=$(jq '.audits["speed-index"].numericValue' $DESKTOP_REPORT)
              DESKTOP_TTI=$(jq '.audits["interactive"].numericValue' $DESKTOP_REPORT)

              # Opportunities for improvement
              DESKTOP_RENDER_BLOCKING=$(jq '.audits["render-blocking-resources"].details.items | length' $DESKTOP_REPORT)
              DESKTOP_UNUSED_CSS=$(jq '.audits["unused-css-rules"].details.overallSavingsBytes // 0' $DESKTOP_REPORT)
              DESKTOP_UNUSED_JS=$(jq '.audits["unused-javascript"].details.overallSavingsBytes // 0' $DESKTOP_REPORT)
              DESKTOP_OFFSCREEN_IMAGES=$(jq '.audits["offscreen-images"].details.overallSavingsBytes // 0' $DESKTOP_REPORT)
              DESKTOP_TOTAL_BYTES=$(jq '.audits["total-byte-weight"].numericValue // 0' $DESKTOP_REPORT)
              DESKTOP_DOM_SIZE=$(jq '.audits["dom-size"].numericValue // 0' $DESKTOP_REPORT)

              # Save to outputs for summary display
              echo "desktop_perf=${DESKTOP_PERF%.*}" >> $GITHUB_OUTPUT
              echo "desktop_a11y=${DESKTOP_ACC%.*}" >> $GITHUB_OUTPUT
              echo "desktop_bp=${DESKTOP_BP%.*}" >> $GITHUB_OUTPUT
              echo "desktop_seo=${DESKTOP_SEO%.*}" >> $GITHUB_OUTPUT
              echo "desktop_pwa=${DESKTOP_PWA%.*}" >> $GITHUB_OUTPUT
              echo "desktop_lcp=${DESKTOP_LCP%.*}" >> $GITHUB_OUTPUT
              echo "desktop_fid=${DESKTOP_FID%.*}" >> $GITHUB_OUTPUT
              echo "desktop_tbt=${DESKTOP_TBT%.*}" >> $GITHUB_OUTPUT
              echo "desktop_cls=${DESKTOP_CLS}" >> $GITHUB_OUTPUT
              echo "desktop_fcp=${DESKTOP_FCP%.*}" >> $GITHUB_OUTPUT
              echo "desktop_si=${DESKTOP_SI%.*}" >> $GITHUB_OUTPUT
              echo "desktop_tti=${DESKTOP_TTI%.*}" >> $GITHUB_OUTPUT
              echo "desktop_render_blocking=${DESKTOP_RENDER_BLOCKING}" >> $GITHUB_OUTPUT
              echo "desktop_unused_css=${DESKTOP_UNUSED_CSS}" >> $GITHUB_OUTPUT
              echo "desktop_unused_js=${DESKTOP_UNUSED_JS}" >> $GITHUB_OUTPUT
              echo "desktop_offscreen_images=${DESKTOP_OFFSCREEN_IMAGES}" >> $GITHUB_OUTPUT
              echo "desktop_total_bytes=${DESKTOP_TOTAL_BYTES}" >> $GITHUB_OUTPUT
              echo "desktop_dom_size=${DESKTOP_DOM_SIZE}" >> $GITHUB_OUTPUT

              # Update the detailed metrics file with desktop data
              TMP_FILE=$(mktemp)
              jq --arg perf "${DESKTOP_PERF%.*}" \
                 --arg a11y "${DESKTOP_ACC%.*}" \
                 --arg bp "${DESKTOP_BP%.*}" \
                 --arg seo "${DESKTOP_SEO%.*}" \
                 --arg pwa "${DESKTOP_PWA%.*}" \
                 --arg lcp "${DESKTOP_LCP%.*}" \
                 --arg fid "${DESKTOP_FID%.*}" \
                 --arg tbt "${DESKTOP_TBT%.*}" \
                 --arg cls "$DESKTOP_CLS" \
                 --arg fcp "${DESKTOP_FCP%.*}" \
                 --arg si "${DESKTOP_SI%.*}" \
                 --arg tti "${DESKTOP_TTI%.*}" \
                 --arg rb "$DESKTOP_RENDER_BLOCKING" \
                 --arg ucss "$DESKTOP_UNUSED_CSS" \
                 --arg ujs "$DESKTOP_UNUSED_JS" \
                 --arg oi "$DESKTOP_OFFSCREEN_IMAGES" \
                 --arg tb "$DESKTOP_TOTAL_BYTES" \
                 --arg dom "$DESKTOP_DOM_SIZE" \
                 '.desktop = {
                    "performance": $perf | tonumber,
                    "accessibility": $a11y | tonumber,
                    "bestPractices": $bp | tonumber,
                    "seo": $seo | tonumber,
                    "pwa": $pwa | tonumber,
                    "metrics": {
                      "LCP": $lcp | tonumber,
                      "FID": $fid | tonumber,
                      "TBT": $tbt | tonumber,
                      "CLS": $cls | tonumber,
                      "FCP": $fcp | tonumber,
                      "SI": $si | tonumber,
                      "TTI": $tti | tonumber
                    },
                    "opportunities": {
                      "renderBlockingResources": $rb | tonumber,
                      "unusedCSSBytes": $ucss | tonumber,
                      "unusedJSBytes": $ujs | tonumber,
                      "offscreenImagesBytes": $oi | tonumber,
                      "totalBytes": $tb | tonumber,
                      "DOMSize": $dom | tonumber
                    }
                  }' $DETAILED_FILE > "$TMP_FILE"
              mv "$TMP_FILE" "$DETAILED_FILE"

              # Extract top slowest requests for insights
              jq -r '.audits["network-requests"].details.items | sort_by(.endTime - .startTime) | reverse | .[0:5] | map({url: .url, transferSize: .transferSize, duration: (.endTime - .startTime)})' $DESKTOP_REPORT > "$DETAILED_DIR/desktop-slowest-requests.json"
            fi

            if [ -f "$MOBILE_REPORT" ]; then
              MOBILE_PERF=$(jq '.categories.performance.score * 100' $MOBILE_REPORT)
              MOBILE_ACC=$(jq '.categories.accessibility.score * 100' $MOBILE_REPORT)
              MOBILE_BP=$(jq '.categories["best-practices"].score * 100' $MOBILE_REPORT)
              MOBILE_SEO=$(jq '.categories.seo.score * 100' $MOBILE_REPORT)
              MOBILE_PWA=$(jq '.categories.pwa.score * 100' $MOBILE_REPORT 2>/dev/null || echo "0")
              MOBILE_LCP=$(jq '.audits["largest-contentful-paint"].numericValue' $MOBILE_REPORT)
              MOBILE_FID=$(jq '.audits["max-potential-fid"].numericValue' $MOBILE_REPORT)
              MOBILE_TBT=$(jq '.audits["total-blocking-time"].numericValue' $MOBILE_REPORT)
              MOBILE_CLS=$(jq '.audits["cumulative-layout-shift"].numericValue' $MOBILE_REPORT)
              MOBILE_FCP=$(jq '.audits["first-contentful-paint"].numericValue' $MOBILE_REPORT)
              MOBILE_SI=$(jq '.audits["speed-index"].numericValue' $MOBILE_REPORT)
              MOBILE_TTI=$(jq '.audits["interactive"].numericValue' $MOBILE_REPORT)

              # Opportunities for improvement - mobile
              MOBILE_RENDER_BLOCKING=$(jq '.audits["render-blocking-resources"].details.items | length' $MOBILE_REPORT)
              MOBILE_UNUSED_CSS=$(jq '.audits["unused-css-rules"].details.overallSavingsBytes // 0' $MOBILE_REPORT)
              MOBILE_UNUSED_JS=$(jq '.audits["unused-javascript"].details.overallSavingsBytes // 0' $MOBILE_REPORT)
              MOBILE_OFFSCREEN_IMAGES=$(jq '.audits["offscreen-images"].details.overallSavingsBytes // 0' $MOBILE_REPORT)
              MOBILE_TOTAL_BYTES=$(jq '.audits["total-byte-weight"].numericValue // 0' $MOBILE_REPORT)
              MOBILE_DOM_SIZE=$(jq '.audits["dom-size"].numericValue // 0' $MOBILE_REPORT)

              echo "mobile_perf=${MOBILE_PERF%.*}" >> $GITHUB_OUTPUT
              echo "mobile_a11y=${MOBILE_ACC%.*}" >> $GITHUB_OUTPUT
              echo "mobile_bp=${MOBILE_BP%.*}" >> $GITHUB_OUTPUT
              echo "mobile_seo=${MOBILE_SEO%.*}" >> $GITHUB_OUTPUT
              echo "mobile_pwa=${MOBILE_PWA%.*}" >> $GITHUB_OUTPUT
              echo "mobile_lcp=${MOBILE_LCP%.*}" >> $GITHUB_OUTPUT
              echo "mobile_fid=${MOBILE_FID%.*}" >> $GITHUB_OUTPUT
              echo "mobile_tbt=${MOBILE_TBT%.*}" >> $GITHUB_OUTPUT
              echo "mobile_cls=${MOBILE_CLS}" >> $GITHUB_OUTPUT
              echo "mobile_fcp=${MOBILE_FCP%.*}" >> $GITHUB_OUTPUT
              echo "mobile_si=${MOBILE_SI%.*}" >> $GITHUB_OUTPUT
              echo "mobile_tti=${MOBILE_TTI%.*}" >> $GITHUB_OUTPUT
              echo "mobile_render_blocking=${MOBILE_RENDER_BLOCKING}" >> $GITHUB_OUTPUT
              echo "mobile_unused_css=${MOBILE_UNUSED_CSS}" >> $GITHUB_OUTPUT
              echo "mobile_unused_js=${MOBILE_UNUSED_JS}" >> $GITHUB_OUTPUT
              echo "mobile_offscreen_images=${MOBILE_OFFSCREEN_IMAGES}" >> $GITHUB_OUTPUT
              echo "mobile_total_bytes=${MOBILE_TOTAL_BYTES}" >> $GITHUB_OUTPUT
              echo "mobile_dom_size=${MOBILE_DOM_SIZE}" >> $GITHUB_OUTPUT

              # Update the detailed metrics file with mobile data
              TMP_FILE=$(mktemp)
              jq --arg perf "${MOBILE_PERF%.*}" \
                 --arg a11y "${MOBILE_ACC%.*}" \
                 --arg bp "${MOBILE_BP%.*}" \
                 --arg seo "${MOBILE_SEO%.*}" \
                 --arg pwa "${MOBILE_PWA%.*}" \
                 --arg lcp "${MOBILE_LCP%.*}" \
                 --arg fid "${MOBILE_FID%.*}" \
                 --arg tbt "${MOBILE_TBT%.*}" \
                 --arg cls "$MOBILE_CLS" \
                 --arg fcp "${MOBILE_FCP%.*}" \
                 --arg si "${MOBILE_SI%.*}" \
                 --arg tti "${MOBILE_TTI%.*}" \
                 --arg rb "$MOBILE_RENDER_BLOCKING" \
                 --arg ucss "$MOBILE_UNUSED_CSS" \
                 --arg ujs "$MOBILE_UNUSED_JS" \
                 --arg oi "$MOBILE_OFFSCREEN_IMAGES" \
                 --arg tb "$MOBILE_TOTAL_BYTES" \
                 --arg dom "$MOBILE_DOM_SIZE" \
                 '.mobile = {
                    "performance": $perf | tonumber,
                    "accessibility": $a11y | tonumber,
                    "bestPractices": $bp | tonumber,
                    "seo": $seo | tonumber,
                    "pwa": $pwa | tonumber,
                    "metrics": {
                      "LCP": $lcp | tonumber,
                      "FID": $fid | tonumber,
                      "TBT": $tbt | tonumber,
                      "CLS": $cls | tonumber,
                      "FCP": $fcp | tonumber,
                      "SI": $si | tonumber,
                      "TTI": $tti | tonumber
                    },
                    "opportunities": {
                      "renderBlockingResources": $rb | tonumber,
                      "unusedCSSBytes": $ucss | tonumber,
                      "unusedJSBytes": $ujs | tonumber,
                      "offscreenImagesBytes": $oi | tonumber,
                      "totalBytes": $tb | tonumber,
                      "DOMSize": $dom | tonumber
                    }
                  }' $DETAILED_FILE > "$TMP_FILE"
              mv "$TMP_FILE" "$DETAILED_FILE"

              # Extract top slowest requests for insights
              jq -r '.audits["network-requests"].details.items | sort_by(.endTime - .startTime) | reverse | .[0:5] | map({url: .url, transferSize: .transferSize, duration: (.endTime - .startTime)})' $MOBILE_REPORT > "$DETAILED_DIR/mobile-slowest-requests.json"
            fi

            echo "has_results=true" >> $GITHUB_OUTPUT
            # Get current date in YYYY-MM-DD format for filenames
            CURRENT_DATE=$(date +"%Y-%m-%d")
            echo "report_date=$CURRENT_DATE" >> $GITHUB_OUTPUT
          else
            echo "has_results=false" >> $GITHUB_OUTPUT
          fi

      - name: Save reports to performance-reports directory
        if: steps.scores.outputs.has_results == 'true' && github.event_name != 'pull_request'
        run: |
          # Create performance-reports directory if it doesn't exist
          mkdir -p performance-reports/${{ steps.scores.outputs.report_date }}
          mkdir -p performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}
          mkdir -p performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/assets
          mkdir -p performance-reports/history/${{ matrix.page.name }}

          # Create a JSON summary file for this page
          SUMMARY_FILE="performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/summary.json"

          # Create report summary JSON with more detailed metrics
          echo "{" > $SUMMARY_FILE
          echo "  \"page\": \"${{ matrix.page.name }}\"," >> $SUMMARY_FILE
          echo "  \"url\": \"${{ matrix.page.url }}\"," >> $SUMMARY_FILE
          echo "  \"date\": \"${{ steps.scores.outputs.report_date }}\"," >> $SUMMARY_FILE
          echo "  \"desktop\": {" >> $SUMMARY_FILE
          echo "    \"performance\": ${{ steps.scores.outputs.desktop_perf || 0 }}," >> $SUMMARY_FILE
          echo "    \"accessibility\": ${{ steps.scores.outputs.desktop_a11y || 0 }}," >> $SUMMARY_FILE
          echo "    \"bestPractices\": ${{ steps.scores.outputs.desktop_bp || 0 }}," >> $SUMMARY_FILE
          echo "    \"seo\": ${{ steps.scores.outputs.desktop_seo || 0 }}," >> $SUMMARY_FILE
          echo "    \"pwa\": ${{ steps.scores.outputs.desktop_pwa || 0 }}," >> $SUMMARY_FILE
          echo "    \"metrics\": {" >> $SUMMARY_FILE
          echo "      \"firstContentfulPaint\": ${{ steps.scores.outputs.desktop_fcp || 0 }}," >> $SUMMARY_FILE
          echo "      \"speedIndex\": ${{ steps.scores.outputs.desktop_si || 0 }}," >> $SUMMARY_FILE
          echo "      \"largestContentfulPaint\": ${{ steps.scores.outputs.desktop_lcp || 0 }}," >> $SUMMARY_FILE
          echo "      \"timeToInteractive\": ${{ steps.scores.outputs.desktop_tti || 0 }}," >> $SUMMARY_FILE
          echo "      \"totalBlockingTime\": ${{ steps.scores.outputs.desktop_tbt || 0 }}," >> $SUMMARY_FILE
          echo "      \"maxPotentialFID\": ${{ steps.scores.outputs.desktop_fid || 0 }}," >> $SUMMARY_FILE
          echo "      \"cumulativeLayoutShift\": ${{ steps.scores.outputs.desktop_cls || 0 }}" >> $SUMMARY_FILE
          echo "    }," >> $SUMMARY_FILE
          echo "    \"opportunities\": {" >> $SUMMARY_FILE
          echo "      \"renderBlockingResources\": ${{ steps.scores.outputs.desktop_render_blocking || 0 }}," >> $SUMMARY_FILE
          echo "      \"unusedCSSBytes\": ${{ steps.scores.outputs.desktop_unused_css || 0 }}," >> $SUMMARY_FILE
          echo "      \"unusedJSBytes\": ${{ steps.scores.outputs.desktop_unused_js || 0 }}," >> $SUMMARY_FILE
          echo "      \"offscreenImagesBytes\": ${{ steps.scores.outputs.desktop_offscreen_images || 0 }}," >> $SUMMARY_FILE
          echo "      \"totalBytes\": ${{ steps.scores.outputs.desktop_total_bytes || 0 }}," >> $SUMMARY_FILE
          echo "      \"domSize\": ${{ steps.scores.outputs.desktop_dom_size || 0 }}" >> $SUMMARY_FILE
          echo "    }" >> $SUMMARY_FILE
          echo "  }," >> $SUMMARY_FILE
          echo "  \"mobile\": {" >> $SUMMARY_FILE
          echo "    \"performance\": ${{ steps.scores.outputs.mobile_perf || 0 }}," >> $SUMMARY_FILE
          echo "    \"accessibility\": ${{ steps.scores.outputs.mobile_a11y || 0 }}," >> $SUMMARY_FILE
          echo "    \"bestPractices\": ${{ steps.scores.outputs.mobile_bp || 0 }}," >> $SUMMARY_FILE
          echo "    \"seo\": ${{ steps.scores.outputs.mobile_seo || 0 }}," >> $SUMMARY_FILE
          echo "    \"pwa\": ${{ steps.scores.outputs.mobile_pwa || 0 }}," >> $SUMMARY_FILE
          echo "    \"metrics\": {" >> $SUMMARY_FILE
          echo "      \"firstContentfulPaint\": ${{ steps.scores.outputs.mobile_fcp || 0 }}," >> $SUMMARY_FILE
          echo "      \"speedIndex\": ${{ steps.scores.outputs.mobile_si || 0 }}," >> $SUMMARY_FILE
          echo "      \"largestContentfulPaint\": ${{ steps.scores.outputs.mobile_lcp || 0 }}," >> $SUMMARY_FILE
          echo "      \"timeToInteractive\": ${{ steps.scores.outputs.mobile_tti || 0 }}," >> $SUMMARY_FILE
          echo "      \"totalBlockingTime\": ${{ steps.scores.outputs.mobile_tbt || 0 }}," >> $SUMMARY_FILE
          echo "      \"maxPotentialFID\": ${{ steps.scores.outputs.mobile_fid || 0 }}," >> $SUMMARY_FILE
          echo "      \"cumulativeLayoutShift\": ${{ steps.scores.outputs.mobile_cls || 0 }}" >> $SUMMARY_FILE
          echo "    }," >> $SUMMARY_FILE
          echo "    \"opportunities\": {" >> $SUMMARY_FILE
          echo "      \"renderBlockingResources\": ${{ steps.scores.outputs.mobile_render_blocking || 0 }}," >> $SUMMARY_FILE
          echo "      \"unusedCSSBytes\": ${{ steps.scores.outputs.mobile_unused_css || 0 }}," >> $SUMMARY_FILE
          echo "      \"unusedJSBytes\": ${{ steps.scores.outputs.mobile_unused_js || 0 }}," >> $SUMMARY_FILE
          echo "      \"offscreenImagesBytes\": ${{ steps.scores.outputs.mobile_offscreen_images || 0 }}," >> $SUMMARY_FILE
          echo "      \"totalBytes\": ${{ steps.scores.outputs.mobile_total_bytes || 0 }}," >> $SUMMARY_FILE
          echo "      \"domSize\": ${{ steps.scores.outputs.mobile_dom_size || 0 }}" >> $SUMMARY_FILE
          echo "    }" >> $SUMMARY_FILE
          echo "  }" >> $SUMMARY_FILE
          echo "}" >> $SUMMARY_FILE

          # Copy the summary to history directory for trends
          cp $SUMMARY_FILE "performance-reports/history/${{ matrix.page.name }}/${{ steps.scores.outputs.report_date }}.json"

          # Copy lighthouse reports to performance-reports directory
          if [ -d "${{ steps.results-dir.outputs.results_dir }}" ]; then
            # Copy desktop HTML report if exists
            DESKTOP_HTML=$(find ${{ steps.results-dir.outputs.results_dir }} -name "*.html" -not -path "*/mobile/*" | sort | tail -n 1)
            if [ -f "$DESKTOP_HTML" ]; then
              cp "$DESKTOP_HTML" "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/desktop.html"
            fi

            # Check if mobile directory exists first
            if [ -d "${{ steps.results-dir.outputs.results_dir }}/mobile" ]; then
              # Copy mobile HTML report if exists
              MOBILE_HTML=$(find ${{ steps.results-dir.outputs.results_dir }}/mobile -name "*.html" | sort | tail -n 1)
              if [ -f "$MOBILE_HTML" ]; then
                cp "$MOBILE_HTML" "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/mobile.html"
              fi
            else
              echo "Mobile directory not found for ${{ matrix.page.name }}, skipping mobile report copy"
            fi

            # Copy screenshots if they exist
            if [ -d "${{ steps.results-dir.outputs.results_dir }}/screenshots" ]; then
              cp -r ${{ steps.results-dir.outputs.results_dir }}/screenshots/* "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/assets/"
            else
              echo "Desktop screenshots directory not found for ${{ matrix.page.name }}, skipping desktop screenshots copy"
            fi

            if [ -d "${{ steps.results-dir.outputs.results_dir }}/mobile/screenshots" ]; then
              # Add 'mobile-' prefix to the filenames when copying
              mkdir -p "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/assets"
              for file in ${{ steps.results-dir.outputs.results_dir }}/mobile/screenshots/*; do
                filename=$(basename "$file")
                cp "$file" "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/assets/mobile-$filename"
              done
            else
              echo "Mobile screenshots directory not found for ${{ matrix.page.name }}, skipping mobile screenshots copy"
            fi

            # Copy any detailed metrics files
            if [ -d "performance-reports/${{ matrix.page.name }}-details" ]; then
              cp -r performance-reports/${{ matrix.page.name }}-details/* "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/"
            fi
          fi

          # Create a comprehensive markdown report
          MARKDOWN_REPORT="performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/report.md"

          echo "# Performance Report: ${{ matrix.page.name }}" > $MARKDOWN_REPORT
          echo "**URL:** ${{ matrix.page.url }}" >> $MARKDOWN_REPORT
          echo "**Date:** ${{ steps.scores.outputs.report_date }}" >> $MARKDOWN_REPORT
          echo "**Test Environment:** GitHub Actions CI" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          echo "## Overview" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Device | Performance | Accessibility | Best Practices | SEO | PWA |" >> $MARKDOWN_REPORT
          echo "|--------|-------------|---------------|----------------|-----|-----|" >> $MARKDOWN_REPORT
          echo "| 💻 Desktop | ${{ steps.scores.outputs.desktop_perf || 0 }}% | ${{ steps.scores.outputs.desktop_a11y || 0 }}% | ${{ steps.scores.outputs.desktop_bp || 0 }}% | ${{ steps.scores.outputs.desktop_seo || 0 }}% | ${{ steps.scores.outputs.desktop_pwa || 0 }}% |" >> $MARKDOWN_REPORT
          echo "| 📱 Mobile | ${{ steps.scores.outputs.mobile_perf || 0 }}% | ${{ steps.scores.outputs.mobile_a11y || 0 }}% | ${{ steps.scores.outputs.mobile_bp || 0 }}% | ${{ steps.scores.outputs.mobile_seo || 0 }}% | ${{ steps.scores.outputs.mobile_pwa || 0 }}% |" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          echo "## Core Web Vitals" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "### Desktop" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Metric | Value | Status | Target |" >> $MARKDOWN_REPORT
          echo "|--------|-------|--------|--------|" >> $MARKDOWN_REPORT

          # LCP Status
          if (( $(echo "${{ steps.scores.outputs.desktop_lcp }} < 2500" | bc -l) )); then
            LCP_STATUS="🟢 Good"
          elif (( $(echo "${{ steps.scores.outputs.desktop_lcp }} < 4000" | bc -l) )); then
            LCP_STATUS="🟠 Needs Improvement"
          else
            LCP_STATUS="🔴 Poor"
          fi

          # CLS Status
          if (( $(echo "${{ steps.scores.outputs.desktop_cls }} < 0.1" | bc -l) )); then
            CLS_STATUS="🟢 Good"
          elif (( $(echo "${{ steps.scores.outputs.desktop_cls }} < 0.25" | bc -l) )); then
            CLS_STATUS="🟠 Needs Improvement"
          else
            CLS_STATUS="🔴 Poor"
          fi

          # TBT/FID Status
          if (( $(echo "${{ steps.scores.outputs.desktop_tbt }} < 200" | bc -l) )); then
            TBT_STATUS="🟢 Good"
          elif (( $(echo "${{ steps.scores.outputs.desktop_tbt }} < 600" | bc -l) )); then
            TBT_STATUS="🟠 Needs Improvement"
          else
            TBT_STATUS="🔴 Poor"
          fi

          echo "| Largest Contentful Paint (LCP) | $(echo "${{ steps.scores.outputs.desktop_lcp }} / 1" | bc)ms | $LCP_STATUS | < 2.5s |" >> $MARKDOWN_REPORT
          echo "| Cumulative Layout Shift (CLS) | ${{ steps.scores.outputs.desktop_cls }} | $CLS_STATUS | < 0.1 |" >> $MARKDOWN_REPORT
          echo "| Total Blocking Time (TBT) | $(echo "${{ steps.scores.outputs.desktop_tbt }} / 1" | bc)ms | $TBT_STATUS | < 200ms |" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          echo "### Mobile" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Metric | Value | Status | Target |" >> $MARKDOWN_REPORT
          echo "|--------|-------|--------|--------|" >> $MARKDOWN_REPORT

          # Mobile LCP Status
          if (( $(echo "${{ steps.scores.outputs.mobile_lcp }} < 2500" | bc -l) )); then
            LCP_STATUS="🟢 Good"
          elif (( $(echo "${{ steps.scores.outputs.mobile_lcp }} < 4000" | bc -l) )); then
            LCP_STATUS="🟠 Needs Improvement"
          else
            LCP_STATUS="🔴 Poor"
          fi

          # Mobile CLS Status
          if (( $(echo "${{ steps.scores.outputs.mobile_cls }} < 0.1" | bc -l) )); then
            CLS_STATUS="🟢 Good"
          elif (( $(echo "${{ steps.scores.outputs.mobile_cls }} < 0.25" | bc -l) )); then
            CLS_STATUS="🟠 Needs Improvement"
          else
            CLS_STATUS="🔴 Poor"
          fi

          # Mobile TBT/FID Status
          if (( $(echo "${{ steps.scores.outputs.mobile_tbt }} < 200" | bc -l) )); then
            TBT_STATUS="🟢 Good"
          elif (( $(echo "${{ steps.scores.outputs.mobile_tbt }} < 600" | bc -l) )); then
            TBT_STATUS="🟠 Needs Improvement"
          else
            TBT_STATUS="🔴 Poor"
          fi

          echo "| Largest Contentful Paint (LCP) | $(echo "${{ steps.scores.outputs.mobile_lcp }} / 1" | bc)ms | $LCP_STATUS | < 2.5s |" >> $MARKDOWN_REPORT
          echo "| Cumulative Layout Shift (CLS) | ${{ steps.scores.outputs.mobile_cls }} | $CLS_STATUS | < 0.1 |" >> $MARKDOWN_REPORT
          echo "| Total Blocking Time (TBT) | $(echo "${{ steps.scores.outputs.mobile_tbt }} / 1" | bc)ms | $TBT_STATUS | < 200ms |" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          echo "## Additional Metrics" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "### Desktop" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Metric | Value |" >> $MARKDOWN_REPORT
          echo "|--------|-------|" >> $MARKDOWN_REPORT
          echo "| First Contentful Paint (FCP) | $(echo "${{ steps.scores.outputs.desktop_fcp }} / 1" | bc)ms |" >> $MARKDOWN_REPORT
          echo "| Speed Index (SI) | $(echo "${{ steps.scores.outputs.desktop_si }} / 1" | bc)ms |" >> $MARKDOWN_REPORT
          echo "| Time to Interactive (TTI) | $(echo "${{ steps.scores.outputs.desktop_tti }} / 1" | bc)ms |" >> $MARKDOWN_REPORT
          echo "| Total Page Size | $(echo "${{ steps.scores.outputs.desktop_total_bytes }} / 1024 / 1024" | bc -l | xargs printf "%.2f")MB |" >> $MARKDOWN_REPORT
          echo "| DOM Size | ${{ steps.scores.outputs.desktop_dom_size }} elements |" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          echo "### Mobile" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Metric | Value |" >> $MARKDOWN_REPORT
          echo "|--------|-------|" >> $MARKDOWN_REPORT
          echo "| First Contentful Paint (FCP) | $(echo "${{ steps.scores.outputs.mobile_fcp }} / 1" | bc)ms |" >> $MARKDOWN_REPORT
          echo "| Speed Index (SI) | $(echo "${{ steps.scores.outputs.mobile_si }} / 1" | bc)ms |" >> $MARKDOWN_REPORT
          echo "| Time to Interactive (TTI) | $(echo "${{ steps.scores.outputs.mobile_tti }} / 1" | bc)ms |" >> $MARKDOWN_REPORT
          echo "| Total Page Size | $(echo "${{ steps.scores.outputs.mobile_total_bytes }} / 1024 / 1024" | bc -l | xargs printf "%.2f")MB |" >> $MARKDOWN_REPORT
          echo "| DOM Size | ${{ steps.scores.outputs.mobile_dom_size }} elements |" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          echo "## Optimization Opportunities" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "### Desktop" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Issue | Impact |" >> $MARKDOWN_REPORT
          echo "|-------|--------|" >> $MARKDOWN_REPORT
          echo "| Render Blocking Resources | ${{ steps.scores.outputs.desktop_render_blocking }} resources |" >> $MARKDOWN_REPORT
          if [ "${{ steps.scores.outputs.desktop_unused_css }}" -gt "0" ]; then
            echo "| Unused CSS | $(echo "${{ steps.scores.outputs.desktop_unused_css }} / 1024" | bc)KB |" >> $MARKDOWN_REPORT
          fi
          if [ "${{ steps.scores.outputs.desktop_unused_js }}" -gt "0" ]; then
            echo "| Unused JavaScript | $(echo "${{ steps.scores.outputs.desktop_unused_js }} / 1024" | bc)KB |" >> $MARKDOWN_REPORT
          fi
          if [ "${{ steps.scores.outputs.desktop_offscreen_images }}" -gt "0" ]; then
            echo "| Offscreen Images | $(echo "${{ steps.scores.outputs.desktop_offscreen_images }} / 1024" | bc)KB |" >> $MARKDOWN_REPORT
          fi
          echo "" >> $MARKDOWN_REPORT

          echo "### Mobile" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT
          echo "| Issue | Impact |" >> $MARKDOWN_REPORT
          echo "|-------|--------|" >> $MARKDOWN_REPORT
          echo "| Render Blocking Resources | ${{ steps.scores.outputs.mobile_render_blocking }} resources |" >> $MARKDOWN_REPORT
          if [ "${{ steps.scores.outputs.mobile_unused_css }}" -gt "0" ]; then
            echo "| Unused CSS | $(echo "${{ steps.scores.outputs.mobile_unused_css }} / 1024" | bc)KB |" >> $MARKDOWN_REPORT
          fi
          if [ "${{ steps.scores.outputs.mobile_unused_js }}" -gt "0" ]; then
            echo "| Unused JavaScript | $(echo "${{ steps.scores.outputs.mobile_unused_js }} / 1024" | bc)KB |" >> $MARKDOWN_REPORT
          fi
          if [ "${{ steps.scores.outputs.mobile_offscreen_images }}" -gt "0" ]; then
            echo "| Offscreen Images | $(echo "${{ steps.scores.outputs.mobile_offscreen_images }} / 1024" | bc)KB |" >> $MARKDOWN_REPORT
          fi
          echo "" >> $MARKDOWN_REPORT

          echo "## Page Screenshots" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          # Check if desktop screenshot exists
          if [ -f "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/assets/above-fold.png" ]; then
            echo "### Desktop" >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
            echo "![Desktop Screenshot](./assets/above-fold.png)" >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
          else
            echo "### Desktop" >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
            echo "Desktop screenshot not available." >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
          fi

          # Check if mobile screenshot exists
          if [ -f "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/assets/mobile-above-fold.png" ]; then
            echo "### Mobile" >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
            echo "![Mobile Screenshot](./assets/mobile-above-fold.png)" >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
          else
            echo "### Mobile" >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
            echo "Mobile screenshot not available." >> $MARKDOWN_REPORT
            echo "" >> $MARKDOWN_REPORT
          fi

          echo "## Detailed Reports" >> $MARKDOWN_REPORT
          echo "" >> $MARKDOWN_REPORT

          # Check if HTML reports exist
          if [ -f "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/desktop.html" ]; then
            echo "- [Desktop Lighthouse Report](./desktop.html)" >> $MARKDOWN_REPORT
          else
            echo "- Desktop Lighthouse Report not available." >> $MARKDOWN_REPORT
          fi

          if [ -f "performance-reports/${{ steps.scores.outputs.report_date }}/${{ matrix.page.name }}/mobile.html" ]; then
            echo "- [Mobile Lighthouse Report](./mobile.html)" >> $MARKDOWN_REPORT
          else
            echo "- Mobile Lighthouse Report not available." >> $MARKDOWN_REPORT
          fi

      - name: Upload Lighthouse results
        if: steps.scores.outputs.has_results == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.page.name }}-lighthouse-results
          path: ${{ steps.results-dir.outputs.results_dir }}
          retention-days: 30

      - name: Format Lighthouse results
        if: steps.scores.outputs.has_results == 'true'
        run: |
          echo "## 🚦 Lighthouse Results for ${{ matrix.page.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          function get_emoji() {
            local score=$1
            if (( $(echo "$score >= 90" | bc -l) )); then
              echo "🟢"
            elif (( $(echo "$score >= 75" | bc -l) )); then
              echo "🟠"
            else
              echo "🔴"
            fi
          }

          # Desktop results
          if [ -n "${{ steps.scores.outputs.desktop_perf }}" ]; then
            echo "### 💻 Desktop" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Score | Core Web Vitals |" >> $GITHUB_STEP_SUMMARY
            echo "| ------ | ----- | --------------- |" >> $GITHUB_STEP_SUMMARY

            PERF_EMOJI=$(get_emoji ${{ steps.scores.outputs.desktop_perf }})
            A11Y_EMOJI=$(get_emoji ${{ steps.scores.outputs.desktop_a11y }})
            BP_EMOJI=$(get_emoji ${{ steps.scores.outputs.desktop_bp }})
            SEO_EMOJI=$(get_emoji ${{ steps.scores.outputs.desktop_seo }})

            LCP_MS=$(echo "${{ steps.scores.outputs.desktop_lcp }} / 1" | bc)
            FID_MS=$(echo "${{ steps.scores.outputs.desktop_fid }} / 1" | bc)
            CLS="${{ steps.scores.outputs.desktop_cls }}"

            # LCP status
            if (( $(echo "$LCP_MS < 2500" | bc -l) )); then
              LCP_STATUS="🟢"
            elif (( $(echo "$LCP_MS < 4000" | bc -l) )); then
              LCP_STATUS="🟠"
            else
              LCP_STATUS="🔴"
            fi

            # FID status
            if (( $(echo "$FID_MS < 100" | bc -l) )); then
              FID_STATUS="🟢"
            elif (( $(echo "$FID_MS < 300" | bc -l) )); then
              FID_STATUS="🟠"
            else
              FID_STATUS="🔴"
            fi

            # CLS status
            if (( $(echo "$CLS < 0.1" | bc -l) )); then
              CLS_STATUS="🟢"
            elif (( $(echo "$CLS < 0.25" | bc -l) )); then
              CLS_STATUS="🟠"
            else
              CLS_STATUS="🔴"
            fi

            echo "| ${PERF_EMOJI} Performance | ${{ steps.scores.outputs.desktop_perf }}% | LCP: ${LCP_MS}ms ${LCP_STATUS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ${A11Y_EMOJI} Accessibility | ${{ steps.scores.outputs.desktop_a11y }}% | FID: ${FID_MS}ms ${FID_STATUS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ${BP_EMOJI} Best Practices | ${{ steps.scores.outputs.desktop_bp }}% | CLS: ${CLS} ${CLS_STATUS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ${SEO_EMOJI} SEO | ${{ steps.scores.outputs.desktop_seo }}% | |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Mobile results
          if [ -n "${{ steps.scores.outputs.mobile_perf }}" ]; then
            echo "### 📱 Mobile" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Score | Core Web Vitals |" >> $GITHUB_STEP_SUMMARY
            echo "| ------ | ----- | --------------- |" >> $GITHUB_STEP_SUMMARY

            PERF_EMOJI=$(get_emoji ${{ steps.scores.outputs.mobile_perf }})
            A11Y_EMOJI=$(get_emoji ${{ steps.scores.outputs.mobile_a11y }})
            BP_EMOJI=$(get_emoji ${{ steps.scores.outputs.mobile_bp }})
            SEO_EMOJI=$(get_emoji ${{ steps.scores.outputs.mobile_seo }})

            LCP_MS=$(echo "${{ steps.scores.outputs.mobile_lcp }} / 1" | bc)
            FID_MS=$(echo "${{ steps.scores.outputs.mobile_fid }} / 1" | bc)
            CLS="${{ steps.scores.outputs.mobile_cls }}"

            # LCP status
            if (( $(echo "$LCP_MS < 2500" | bc -l) )); then
              LCP_STATUS="🟢"
            elif (( $(echo "$LCP_MS < 4000" | bc -l) )); then
              LCP_STATUS="🟠"
            else
              LCP_STATUS="🔴"
            fi

            # FID status
            if (( $(echo "$FID_MS < 100" | bc -l) )); then
              FID_STATUS="🟢"
            elif (( $(echo "$FID_MS < 300" | bc -l) )); then
              FID_STATUS="🟠"
            else
              FID_STATUS="🔴"
            fi

            # CLS status
            if (( $(echo "$CLS < 0.1" | bc -l) )); then
              CLS_STATUS="🟢"
            elif (( $(echo "$CLS < 0.25" | bc -l) )); then
              CLS_STATUS="🟠"
            else
              CLS_STATUS="🔴"
            fi

            echo "| ${PERF_EMOJI} Performance | ${{ steps.scores.outputs.mobile_perf }}% | LCP: ${LCP_MS}ms ${LCP_STATUS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ${A11Y_EMOJI} Accessibility | ${{ steps.scores.outputs.mobile_a11y }}% | FID: ${FID_MS}ms ${FID_STATUS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ${BP_EMOJI} Best Practices | ${{ steps.scores.outputs.mobile_bp }}% | CLS: ${CLS} ${CLS_STATUS} |" >> $GITHUB_STEP_SUMMARY
            echo "| ${SEO_EMOJI} SEO | ${{ steps.scores.outputs.mobile_seo }}% | |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See attached artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY

  # Job to compile and post summary report from all page results
  summary:
    needs: lighthouse-ci
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc gnuplot
          npm install -g chartjs-node-canvas markdown-to-html

      - name: Process all results
        run: |
          echo "# 📊 Lighthouse CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse performance tests completed for all pages." >> $GITHUB_STEP_SUMMARY
          echo "View individual page reports in the workflow artifacts." >> $GITHUB_STEP_SUMMARY

          # Create performance-reports directory if it doesn't exist
          mkdir -p performance-reports/history

          # Get current date for filenames
          CURRENT_DATE=$(date +"%Y-%m-%d")

          # Generate an index file for the latest run
          echo "# Lighthouse Performance Report: $CURRENT_DATE" > performance-reports/latest.md
          echo "" >> performance-reports/latest.md
          echo "## Summary" >> performance-reports/latest.md
          echo "" >> performance-reports/latest.md
          echo "| Page | Device | Performance | Accessibility | Best Practices | SEO |" >> performance-reports/latest.md
          echo "|------|--------|-------------|---------------|----------------|-----|" >> performance-reports/latest.md

          # Process downloaded artifacts
          if [ -d "downloaded-artifacts" ]; then
            for PAGE_DIR in downloaded-artifacts/*-lighthouse-results; do
              if [ -d "$PAGE_DIR" ]; then
                PAGE_NAME=$(basename "$PAGE_DIR" | sed 's/-lighthouse-results//')

                # Create directories for this page
                mkdir -p "performance-reports/history/$PAGE_NAME"
                mkdir -p "performance-reports/$CURRENT_DATE/$PAGE_NAME/trend"

                # Copy HTML files if they exist
                find "$PAGE_DIR" -name "*.html" -not -path "*/mobile/*" -exec cp {} "performance-reports/$CURRENT_DATE/$PAGE_NAME/desktop.html" \; -quit
                # Check if mobile directory exists before trying to find files in it
                if [ -d "$PAGE_DIR/mobile" ]; then
                  find "$PAGE_DIR/mobile" -name "*.html" -exec cp {} "performance-reports/$CURRENT_DATE/$PAGE_NAME/mobile.html" \; -quit
                else
                  echo "Mobile directory not found for $PAGE_NAME, skipping mobile report copy"
                fi

                # Copy screenshots if they exist
                if [ -d "$PAGE_DIR/screenshots" ]; then
                  mkdir -p "performance-reports/$CURRENT_DATE/$PAGE_NAME/assets"
                  find "$PAGE_DIR/screenshots" -type f -exec cp {} "performance-reports/$CURRENT_DATE/$PAGE_NAME/assets/" \;
                else
                  echo "Desktop screenshots directory not found for $PAGE_NAME, skipping desktop screenshots copy"
                fi

                if [ -d "$PAGE_DIR/mobile/screenshots" ]; then
                  mkdir -p "performance-reports/$CURRENT_DATE/$PAGE_NAME/assets"
                  # Add 'mobile-' prefix to the filenames when copying
                  for file in "$PAGE_DIR/mobile/screenshots/"*; do
                    if [ -f "$file" ]; then
                      filename=$(basename "$file")
                      cp "$file" "performance-reports/$CURRENT_DATE/$PAGE_NAME/assets/mobile-$filename"
                    fi
                  done
                else
                  echo "Mobile screenshots directory not found for $PAGE_NAME, skipping mobile screenshots copy"
                fi

                # Get summary data from JSON if it exists
                SUMMARY_FILE="performance-reports/$CURRENT_DATE/$PAGE_NAME/summary.json"
                if [ -f "$SUMMARY_FILE" ]; then
                  # Copy to history for trend tracking
                  cp "$SUMMARY_FILE" "performance-reports/history/$PAGE_NAME/$CURRENT_DATE.json"

                  # Extract metrics for the summary table
                  DESKTOP_PERF=$(jq -r '.desktop.performance' "$SUMMARY_FILE")
                  DESKTOP_A11Y=$(jq -r '.desktop.accessibility' "$SUMMARY_FILE")
                  DESKTOP_BP=$(jq -r '.desktop.bestPractices' "$SUMMARY_FILE")
                  DESKTOP_SEO=$(jq -r '.desktop.seo' "$SUMMARY_FILE")

                  MOBILE_PERF=$(jq -r '.mobile.performance' "$SUMMARY_FILE")
                  MOBILE_A11Y=$(jq -r '.mobile.accessibility' "$SUMMARY_FILE")
                  MOBILE_BP=$(jq -r '.mobile.bestPractices' "$SUMMARY_FILE")
                  MOBILE_SEO=$(jq -r '.mobile.seo' "$SUMMARY_FILE")

                  # Add to the index markdown file
                  echo "| $PAGE_NAME | Desktop | $DESKTOP_PERF% | $DESKTOP_A11Y% | $DESKTOP_BP% | $DESKTOP_SEO% |" >> performance-reports/latest.md
                  echo "| $PAGE_NAME | Mobile | $MOBILE_PERF% | $MOBILE_A11Y% | $MOBILE_BP% | $MOBILE_SEO% |" >> performance-reports/latest.md

                  # Generate trend data if we have enough history
                  TREND_DIR="performance-reports/history/$PAGE_NAME"
                  TREND_FILE="performance-reports/$CURRENT_DATE/$PAGE_NAME/trend/analysis.md"
                  TREND_COUNT=$(ls -1 "$TREND_DIR"/*.json 2>/dev/null | wc -l)

                  if [ "$TREND_COUNT" -gt "1" ]; then
                    mkdir -p "performance-reports/$CURRENT_DATE/$PAGE_NAME/trend"

                    echo "# Performance Trend Analysis: $PAGE_NAME" > "$TREND_FILE"
                    echo "" >> "$TREND_FILE"
                    echo "Analysis date: $CURRENT_DATE" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"

                    echo "## Performance Score Trends" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"

                    # Create trend data files for plotting
                    DESKTOP_DATA="performance-reports/$CURRENT_DATE/$PAGE_NAME/trend/desktop-data.txt"
                    MOBILE_DATA="performance-reports/$CURRENT_DATE/$PAGE_NAME/trend/mobile-data.txt"

                    echo "Date Performance Accessibility BestPractices SEO" > "$DESKTOP_DATA"
                    echo "Date Performance Accessibility BestPractices SEO" > "$MOBILE_DATA"

                    # Process each history file (most recent 5)
                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5 | sort); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)

                      # Extract metrics
                      D_PERF=$(jq -r '.desktop.performance' "$HISTORY_FILE")
                      D_A11Y=$(jq -r '.desktop.accessibility' "$HISTORY_FILE")
                      D_BP=$(jq -r '.desktop.bestPractices' "$HISTORY_FILE")
                      D_SEO=$(jq -r '.desktop.seo' "$HISTORY_FILE")

                      M_PERF=$(jq -r '.mobile.performance' "$HISTORY_FILE")
                      M_A11Y=$(jq -r '.mobile.accessibility' "$HISTORY_FILE")
                      M_BP=$(jq -r '.mobile.bestPractices' "$HISTORY_FILE")
                      M_SEO=$(jq -r '.mobile.seo' "$HISTORY_FILE")

                      # Add to data files
                      echo "$HISTORY_DATE $D_PERF $D_A11Y $D_BP $D_SEO" >> "$DESKTOP_DATA"
                      echo "$HISTORY_DATE $M_PERF $M_A11Y $M_BP $M_SEO" >> "$MOBILE_DATA"
                    done

                    # Create history tables
                    echo "### Desktop Performance History" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"
                    echo "| Date | Performance | Accessibility | Best Practices | SEO |" >> "$TREND_FILE"
                    echo "|------|-------------|---------------|----------------|-----|" >> "$TREND_FILE"

                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)
                      D_PERF=$(jq -r '.desktop.performance' "$HISTORY_FILE")
                      D_A11Y=$(jq -r '.desktop.accessibility' "$HISTORY_FILE")
                      D_BP=$(jq -r '.desktop.bestPractices' "$HISTORY_FILE")
                      D_SEO=$(jq -r '.desktop.seo' "$HISTORY_FILE")

                      echo "| $HISTORY_DATE | $D_PERF% | $D_A11Y% | $D_BP% | $D_SEO% |" >> "$TREND_FILE"
                    done

                    echo "" >> "$TREND_FILE"
                    echo "### Mobile Performance History" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"
                    echo "| Date | Performance | Accessibility | Best Practices | SEO |" >> "$TREND_FILE"
                    echo "|------|-------------|---------------|----------------|-----|" >> "$TREND_FILE"

                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)
                      M_PERF=$(jq -r '.mobile.performance' "$HISTORY_FILE")
                      M_A11Y=$(jq -r '.mobile.accessibility' "$HISTORY_FILE")
                      M_BP=$(jq -r '.mobile.bestPractices' "$HISTORY_FILE")
                      M_SEO=$(jq -r '.mobile.seo' "$HISTORY_FILE")

                      echo "| $HISTORY_DATE | $M_PERF% | $M_A11Y% | $M_BP% | $M_SEO% |" >> "$TREND_FILE"
                    done

                    echo "" >> "$TREND_FILE"
                    echo "## Core Web Vitals Trends" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"

                    # Create data files for Core Web Vitals
                    CWV_DATA="performance-reports/$CURRENT_DATE/$PAGE_NAME/trend/cwv-data.txt"
                    echo "Date DLCP DCLS DTBT MLCP MCLS MTBT" > "$CWV_DATA"

                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5 | sort); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)

                      # Extract Core Web Vitals
                      D_LCP=$(jq -r '.desktop.metrics.largestContentfulPaint // 0' "$HISTORY_FILE")
                      D_CLS=$(jq -r '.desktop.metrics.cumulativeLayoutShift // 0' "$HISTORY_FILE")
                      D_TBT=$(jq -r '.desktop.metrics.totalBlockingTime // 0' "$HISTORY_FILE")

                      M_LCP=$(jq -r '.mobile.metrics.largestContentfulPaint // 0' "$HISTORY_FILE")
                      M_CLS=$(jq -r '.mobile.metrics.cumulativeLayoutShift // 0' "$HISTORY_FILE")
                      M_TBT=$(jq -r '.mobile.metrics.totalBlockingTime // 0' "$HISTORY_FILE")

                      # Add to data file
                      echo "$HISTORY_DATE $D_LCP $D_CLS $D_TBT $M_LCP $M_CLS $M_TBT" >> "$CWV_DATA"
                    done

                    # Create Core Web Vitals tables
                    echo "### LCP Trends (lower is better)" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"
                    echo "| Date | Desktop LCP | Mobile LCP |" >> "$TREND_FILE"
                    echo "|------|------------|------------|" >> "$TREND_FILE"

                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)
                      D_LCP=$(jq -r '.desktop.metrics.largestContentfulPaint // 0' "$HISTORY_FILE")
                      M_LCP=$(jq -r '.mobile.metrics.largestContentfulPaint // 0' "$HISTORY_FILE")

                      # Convert to milliseconds and format
                      D_LCP_MS=$(echo "$D_LCP / 1" | bc)
                      M_LCP_MS=$(echo "$M_LCP / 1" | bc)

                      echo "| $HISTORY_DATE | ${D_LCP_MS}ms | ${M_LCP_MS}ms |" >> "$TREND_FILE"
                    done

                    echo "" >> "$TREND_FILE"
                    echo "### CLS Trends (lower is better)" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"
                    echo "| Date | Desktop CLS | Mobile CLS |" >> "$TREND_FILE"
                    echo "|------|------------|------------|" >> "$TREND_FILE"

                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)
                      D_CLS=$(jq -r '.desktop.metrics.cumulativeLayoutShift // 0' "$HISTORY_FILE")
                      M_CLS=$(jq -r '.mobile.metrics.cumulativeLayoutShift // 0' "$HISTORY_FILE")

                      echo "| $HISTORY_DATE | $D_CLS | $M_CLS |" >> "$TREND_FILE"
                    done

                    echo "" >> "$TREND_FILE"
                    echo "### TBT Trends (lower is better)" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"
                    echo "| Date | Desktop TBT | Mobile TBT |" >> "$TREND_FILE"
                    echo "|------|------------|------------|" >> "$TREND_FILE"

                    for HISTORY_FILE in $(ls -1t "$TREND_DIR"/*.json | head -5); do
                      HISTORY_DATE=$(basename "$HISTORY_FILE" .json)
                      D_TBT=$(jq -r '.desktop.metrics.totalBlockingTime // 0' "$HISTORY_FILE")
                      M_TBT=$(jq -r '.mobile.metrics.totalBlockingTime // 0' "$HISTORY_FILE")

                      # Convert to milliseconds
                      D_TBT_MS=$(echo "$D_TBT / 1" | bc)
                      M_TBT_MS=$(echo "$M_TBT / 1" | bc)

                      echo "| $HISTORY_DATE | ${D_TBT_MS}ms | ${M_TBT_MS}ms |" >> "$TREND_FILE"
                    done

                    # Compare with previous report for analysis
                    echo "" >> "$TREND_FILE"
                    echo "## Performance Change Analysis" >> "$TREND_FILE"
                    echo "" >> "$TREND_FILE"

                    LATEST_FILE=$(ls -1t "$TREND_DIR"/*.json | head -1)
                    PREVIOUS_FILE=$(ls -1t "$TREND_DIR"/*.json | head -2 | tail -1)

                    if [ -f "$PREVIOUS_FILE" ]; then
                      PREV_DATE=$(basename "$PREVIOUS_FILE" .json)

                      echo "### Changes Since $PREV_DATE" >> "$TREND_FILE"
                      echo "" >> "$TREND_FILE"

                      # Get metrics for comparison
                      LATEST_D_PERF=$(jq -r '.desktop.performance' "$LATEST_FILE")
                      PREV_D_PERF=$(jq -r '.desktop.performance' "$PREVIOUS_FILE")
                      PERF_CHANGE=$(echo "$LATEST_D_PERF - $PREV_D_PERF" | bc)

                      LATEST_D_LCP=$(jq -r '.desktop.metrics.largestContentfulPaint // 0' "$LATEST_FILE")
                      PREV_D_LCP=$(jq -r '.desktop.metrics.largestContentfulPaint // 0' "$PREVIOUS_FILE")
                      LCP_CHANGE=$(echo "($LATEST_D_LCP - $PREV_D_LCP) / 1" | bc)

                      # Format with positive/negative indicators
                      if (( $(echo "$PERF_CHANGE > 0" | bc -l) )); then
                        PERF_INDICATOR="✅ Improved"
                      elif (( $(echo "$PERF_CHANGE < 0" | bc -l) )); then
                        PERF_INDICATOR="❌ Regressed"
                      else
                        PERF_INDICATOR="➖ No change"
                      fi

                      if (( $(echo "$LCP_CHANGE < 0" | bc -l) )); then
                        LCP_INDICATOR="✅ Improved"
                      elif (( $(echo "$LCP_CHANGE > 0" | bc -l) )); then
                        LCP_INDICATOR="❌ Regressed"
                      else
                        LCP_INDICATOR="➖ No change"
                      fi

                      echo "#### Desktop Performance Changes" >> "$TREND_FILE"
                      echo "" >> "$TREND_FILE"
                      echo "| Metric | Previous | Current | Change | Status |" >> "$TREND_FILE"
                      echo "|--------|----------|---------|--------|--------|" >> "$TREND_FILE"
                      echo "| Performance Score | ${PREV_D_PERF}% | ${LATEST_D_PERF}% | ${PERF_CHANGE}% | ${PERF_INDICATOR} |" >> "$TREND_FILE"
                      echo "| LCP | $(echo "$PREV_D_LCP / 1" | bc)ms | $(echo "$LATEST_D_LCP / 1" | bc)ms | ${LCP_CHANGE}ms | ${LCP_INDICATOR} |" >> "$TREND_FILE"

                      # Add mobile comparison
                      echo "" >> "$TREND_FILE"
                      echo "#### Mobile Performance Changes" >> "$TREND_FILE"
                      echo "" >> "$TREND_FILE"

                      LATEST_M_PERF=$(jq -r '.mobile.performance' "$LATEST_FILE")
                      PREV_M_PERF=$(jq -r '.mobile.performance' "$PREVIOUS_FILE")
                      M_PERF_CHANGE=$(echo "$LATEST_M_PERF - $PREV_M_PERF" | bc)

                      LATEST_M_LCP=$(jq -r '.mobile.metrics.largestContentfulPaint // 0' "$LATEST_FILE")
                      PREV_M_LCP=$(jq -r '.mobile.metrics.largestContentfulPaint // 0' "$PREVIOUS_FILE")
                      M_LCP_CHANGE=$(echo "($LATEST_M_LCP - $PREV_M_LCP) / 1" | bc)

                      # Format with positive/negative indicators
                      if (( $(echo "$M_PERF_CHANGE > 0" | bc -l) )); then
                        M_PERF_INDICATOR="✅ Improved"
                      elif (( $(echo "$M_PERF_CHANGE < 0" | bc -l) )); then
                        M_PERF_INDICATOR="❌ Regressed"
                      else
                        M_PERF_INDICATOR="➖ No change"
                      fi

                      if (( $(echo "$M_LCP_CHANGE < 0" | bc -l) )); then
                        M_LCP_INDICATOR="✅ Improved"
                      elif (( $(echo "$M_LCP_CHANGE > 0" | bc -l) )); then
                        M_LCP_INDICATOR="❌ Regressed"
                      else
                        M_LCP_INDICATOR="➖ No change"
                      fi

                      echo "| Metric | Previous | Current | Change | Status |" >> "$TREND_FILE"
                      echo "|--------|----------|---------|--------|--------|" >> "$TREND_FILE"
                      echo "| Performance Score | ${PREV_M_PERF}% | ${LATEST_M_PERF}% | ${M_PERF_CHANGE}% | ${M_PERF_INDICATOR} |" >> "$TREND_FILE"
                      echo "| LCP | $(echo "$PREV_M_LCP / 1" | bc)ms | $(echo "$LATEST_M_LCP / 1" | bc)ms | ${M_LCP_CHANGE}ms | ${M_LCP_INDICATOR} |" >> "$TREND_FILE"
                    fi

                    # Add link to trend analysis in the page report
                    echo "" >> "performance-reports/$CURRENT_DATE/$PAGE_NAME/report.md"
                    echo "## Performance Trends" >> "performance-reports/$CURRENT_DATE/$PAGE_NAME/report.md"
                    echo "" >> "performance-reports/$CURRENT_DATE/$PAGE_NAME/report.md"
                    echo "See the [detailed trend analysis](./trend/analysis.md) for historical performance data." >> "performance-reports/$CURRENT_DATE/$PAGE_NAME/report.md"
                  fi
                fi
              fi
            done
          fi

          # Create an index HTML file
          INDEX_HTML="performance-reports/index.html"

          cat > "$INDEX_HTML" << EOL
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Lighthouse Performance Reports</title>
            <style>
              body {
                font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                line-height: 1.5;
                color: #333;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
              }
              h1, h2, h3 { color: #2c3e50; }
              table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                box-shadow: 0 1px 3px rgba(0,0,0,0.1);
              }
              th, td {
                padding: 12px 15px;
                text-align: left;
                border-bottom: 1px solid #ddd;
              }
              th {
                background-color: #f8f9fa;
                font-weight: 600;
              }
              tbody tr:hover { background-color: #f5f5f5; }
              .card {
                background: white;
                border-radius: 8px;
                padding: 20px;
                margin-bottom: 20px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
              }
              .score {
                font-weight: bold;
                padding: 5px 10px;
                border-radius: 15px;
                display: inline-block;
              }
              .good { background-color: #e6f7ed; color: #0c6b45; }
              .average { background-color: #fff2df; color: #b25000; }
              .poor { background-color: #fce8e6; color: #c53929; }
              .date { color: #666; font-size: 0.9em; }
              .button {
                display: inline-block;
                padding: 8px 16px;
                background-color: #4285f4;
                color: white;
                text-decoration: none;
                border-radius: 4px;
                margin-top: 10px;
                font-weight: 500;
              }
              .button:hover { background-color: #2b579a; }
              .grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                gap: 20px;
                margin: 20px 0;
              }
            </style>
          </head>
          <body>
            <h1>🚀 Lighthouse Performance Reports</h1>
            <p>Track website performance metrics over time with automated Lighthouse tests.</p>

            <h2>Latest Results (${CURRENT_DATE})</h2>
            <div class="grid">
          EOL

          # Add cards for latest results
          for PAGE_NAME in homepage collection product; do
            SUMMARY_FILE="performance-reports/$CURRENT_DATE/$PAGE_NAME/summary.json"

            if [ -f "$SUMMARY_FILE" ]; then
              PAGE_URL=$(jq -r '.url' "$SUMMARY_FILE")
              DESKTOP_PERF=$(jq -r '.desktop.performance' "$SUMMARY_FILE")
              MOBILE_PERF=$(jq -r '.mobile.performance' "$SUMMARY_FILE")

              # Determine score class
              DESKTOP_CLASS="average"
              if (( $(echo "$DESKTOP_PERF >= 90" | bc -l) )); then
                DESKTOP_CLASS="good"
              elif (( $(echo "$DESKTOP_PERF < 50" | bc -l) )); then
                DESKTOP_CLASS="poor"
              fi

              MOBILE_CLASS="average"
              if (( $(echo "$MOBILE_PERF >= 90" | bc -l) )); then
                MOBILE_CLASS="good"
              elif (( $(echo "$MOBILE_PERF < 50" | bc -l) )); then
                MOBILE_CLASS="poor"
              fi

              cat >> "$INDEX_HTML" << EOL
              <div class="card">
                <h3>${PAGE_NAME}</h3>
                <p>
                  Desktop: <span class="score ${DESKTOP_CLASS}">${DESKTOP_PERF}%</span>
                  Mobile: <span class="score ${MOBILE_CLASS}">${MOBILE_PERF}%</span>
                </p>
                <p class="date">Tested: ${CURRENT_DATE}</p>
                <a href="${CURRENT_DATE}/${PAGE_NAME}/report.md" class="button">View Report</a>
              </div>
          EOL
            fi
          done

          cat >> "$INDEX_HTML" << EOL
            </div>

            <h2>Historical Reports</h2>
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Homepage</th>
                  <th>Collection</th>
                  <th>Product</th>
                </tr>
              </thead>
              <tbody>
          EOL

          # Add rows for historical reports
          for DATE_DIR in $(find performance-reports -maxdepth 1 -type d -name "20*" | sort -r); do
            DATE=$(basename "$DATE_DIR")

            # Skip if not a valid date format (YYYY-MM-DD)
            if [[ ! $DATE =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
              continue
            fi

            cat >> "$INDEX_HTML" << EOL
                <tr>
                  <td>${DATE}</td>
          EOL

            for PAGE_NAME in homepage collection product; do
              REPORT_PATH="${DATE}/${PAGE_NAME}/report.md"
              if [ -f "performance-reports/$REPORT_PATH" ]; then
                cat >> "$INDEX_HTML" << EOL
                  <td><a href="${REPORT_PATH}">View Report</a></td>
          EOL
              else
                cat >> "$INDEX_HTML" << EOL
                  <td>N/A</td>
          EOL
              fi
            done

            cat >> "$INDEX_HTML" << EOL
                </tr>
          EOL
          done

          cat >> "$INDEX_HTML" << EOL
              </tbody>
            </table>
          </body>
          </html>
          EOL

      - name: Commit changes
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Save generated reports to a temporary location
          mkdir -p /tmp/performance-reports-backup
          cp -R performance-reports/* /tmp/performance-reports-backup/ 2>/dev/null || true

          # Create a new branch for reports or use existing one
          REPORTS_BRANCH="performance-reports-data"
          git fetch origin $REPORTS_BRANCH || true

          if git show-ref --verify --quiet refs/remotes/origin/$REPORTS_BRANCH; then
            # Clean the working directory to avoid conflicts
            git clean -fd performance-reports/ || true
            rm -rf performance-reports/* || true

            # Branch exists, check it out
            git checkout $REPORTS_BRANCH
          else
            # Create a new orphan branch (no history)
            git checkout --orphan $REPORTS_BRANCH
            git rm -rf .
            # Create a basic README
            echo "# Lighthouse Performance Reports" > README.md
            echo "This branch contains automated Lighthouse performance reports for the Curalife website." >> README.md
            git add README.md
            git commit -m "Initial commit for performance reports branch"
          fi

          # Restore the reports from temp location
          mkdir -p performance-reports
          cp -R /tmp/performance-reports-backup/* performance-reports/ 2>/dev/null || true

          # Add the performance reports
          git add performance-reports/
          # Commit only if there are changes
          git diff --staged --quiet || git commit -m "Add Lighthouse performance reports for $(date +"%Y-%m-%d")"

          # Push to the reports branch
          git push origin $REPORTS_BRANCH

      - name: Create Pull Request to main
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Add Lighthouse performance reports
          committer: GitHub Action <action@github.com>
          author: GitHub Action <action@github.com>
          branch: performance-reports-data
          base: main
          title: "Update performance reports"
          body: |
            # 📊 Lighthouse Performance Reports Update

            This automated PR updates the performance reports with the latest Lighthouse test results.

            ## Changes included:
            - New performance reports for homepage, collection, and product pages
            - Updated trend analysis and historical data
            - Generated performance insights and recommendations

            *This PR was automatically created by the Lighthouse CI workflow.*
          labels: |
            automated-pr
            performance
            reports
          draft: false
