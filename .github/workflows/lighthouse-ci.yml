name: Lighthouse CI

on:
  schedule:
    - cron: "15 02 * * *" # Runs at 2:15 UTC daily
    - cron: "15 14 * * *" # Runs at 14:15 UTC daily
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: "lighthouse-${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions:
  contents: write

env:
  REPORT_DATE: $(date +'%Y-%m-%d')
  RESULTS_DIR: ${{ github.workspace }}/lighthouse-results
  BASE_URL: https://curalife.com

jobs:
  lighthouse-desktop:
    name: Desktop Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: /
          - name: product
            url: /products/curalin
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          chmod +x .github/workflows/scripts/*.sh
          mkdir -p ${{ env.RESULTS_DIR }}/desktop/${{ matrix.page.name }}

          # Check if package.json exists
          if [ -f "package.json" ]; then
            # If package-lock.json exists, use npm ci, otherwise use npm install
            if [ -f "package-lock.json" ]; then
              echo "Installing dependencies with npm ci..."
              npm ci
            else
              echo "No package-lock.json found. Using npm install instead..."
              npm install
            fi
          else
            echo "No package.json found. Creating minimal package.json for Lighthouse dependencies..."
            echo '{
              "name": "lighthouse-ci-runner",
              "version": "1.0.0",
              "private": true,
              "dependencies": {
                "puppeteer-core": "^21.0.0"
              }
            }' > package.json
            npm install
          fi

          npm install -g @lhci/cli puppeteer-core
      - name: Run Lighthouse for desktop
        run: .github/workflows/scripts/run-lighthouse.sh "${{ env.BASE_URL }}${{ matrix.page.url }}" "${{ matrix.page.name }}" "${{ env.RESULTS_DIR }}/desktop/${{ matrix.page.name }}"
      - name: Upload desktop results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-desktop-results-${{ matrix.page.name }}
          path: ${{ env.RESULTS_DIR }}/desktop/${{ matrix.page.name }}
          retention-days: 30

  lighthouse-mobile:
    name: Mobile Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        page:
          - name: homepage
            url: /
          - name: product
            url: /products/curalin
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          chmod +x .github/workflows/scripts/*.sh
          mkdir -p ${{ env.RESULTS_DIR }}/mobile/${{ matrix.page.name }}

          # Check if package.json exists
          if [ -f "package.json" ]; then
            # If package-lock.json exists, use npm ci, otherwise use npm install
            if [ -f "package-lock.json" ]; then
              echo "Installing dependencies with npm ci..."
              npm ci
            else
              echo "No package-lock.json found. Using npm install instead..."
              npm install
            fi
          else
            echo "No package.json found. Creating minimal package.json for Lighthouse dependencies..."
            echo '{
              "name": "lighthouse-ci-runner",
              "version": "1.0.0",
              "private": true,
              "dependencies": {
                "puppeteer-core": "^21.0.0"
              }
            }' > package.json
            npm install
          fi

          npm install -g @lhci/cli puppeteer-core
      - name: Run Lighthouse for mobile
        run: .github/workflows/scripts/run-lighthouse.sh "${{ env.BASE_URL }}${{ matrix.page.url }}" "${{ matrix.page.name }}" "${{ env.RESULTS_DIR }}/mobile/${{ matrix.page.name }}"
      - name: Upload mobile results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-mobile-results-${{ matrix.page.name }}
          path: ${{ env.RESULTS_DIR }}/mobile/${{ matrix.page.name }}
          retention-days: 30

  process-and-generate:
    name: Process Results & Generate Dashboard
    needs: [lighthouse-desktop, lighthouse-mobile]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        run: |
          chmod +x .github/workflows/scripts/*.sh
          mkdir -p ${{ env.RESULTS_DIR }}
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          pattern: lighthouse-*-results-*
          path: ${{ env.RESULTS_DIR }}
          merge-multiple: true
      - name: Process results
        run: |
          # Get the current date in YYYY-MM-DD format
          CURRENT_DATE=$(date +'%Y-%m-%d')
          echo "Processing results for date: $CURRENT_DATE"

          # Organize the directory structure
          mkdir -p ${{ env.RESULTS_DIR }}/processed

          # Process each page's results
          for page in homepage product; do
            echo "Processing results for page: $page"

            # Create result directories
            PAGE_RESULT_DIR="${{ env.RESULTS_DIR }}/$page"
            mkdir -p "$PAGE_RESULT_DIR"

            # Make sure desktop and mobile directories exist
            mkdir -p "${{ env.RESULTS_DIR }}/desktop/$page"
            mkdir -p "${{ env.RESULTS_DIR }}/mobile/$page"

            # Call the process-results script for this page
            .github/workflows/scripts/process-results.sh "$page" "${{ env.RESULTS_DIR }}" "$CURRENT_DATE"
          done
      - name: Store historical data
        run: .github/workflows/scripts/store-historical-data.sh
      - name: Generate dashboards
        run: |
          .github/workflows/scripts/generate-dashboard.sh ${{ env.REPORT_DATE }}
          .github/workflows/scripts/generate-trend-dashboard.sh
      - name: Generate report pages
        run: |
          # For each page in the processed results
          for page_dir in ${{ env.RESULTS_DIR }}/processed/*; do
            if [ -d "$page_dir" ]; then
              page_name=$(basename "$page_dir")
              output_dir="${page_dir}/reports"

              # Create reports directory if it doesn't exist
              mkdir -p "$output_dir"

              # Source metrics file if it exists
              metrics_file="${page_dir}/metrics-values.env"
              if [ -f "$metrics_file" ]; then
                source "$metrics_file"
              else
                # Default values if metrics file doesn't exist
                DESKTOP_PERF=0
                DESKTOP_A11Y=0
                DESKTOP_BP=0
                DESKTOP_SEO=0
                DESKTOP_LCP=0
                DESKTOP_FID=0
                DESKTOP_CLS=0
                DESKTOP_TBT=0

                MOBILE_PERF=0
                MOBILE_A11Y=0
                MOBILE_BP=0
                MOBILE_SEO=0
                MOBILE_LCP=0
                MOBILE_FID=0
                MOBILE_CLS=0
                MOBILE_TBT=0
              fi

              # Generate HTML report templates
              .github/workflows/scripts/generate-report-templates.sh "$page_name" "$output_dir" "$CURRENT_DATE"
            fi
          done
      - name: Upload processed results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-final-dashboards
          path: |
            ${{ env.RESULTS_DIR }}/dashboards
            ${{ env.RESULTS_DIR }}/processed
          retention-days: 30

  publish:
    name: Publish to GitHub Pages
    needs: [process-and-generate]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0
      - name: Download dashboards
        uses: actions/download-artifact@v4
        with:
          name: lighthouse-final-dashboards
          path: ./lighthouse-results
      - name: Publish results
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Update Lighthouse reports - ${{ env.REPORT_DATE }}" || echo "No changes to commit"
          git push origin gh-pages
