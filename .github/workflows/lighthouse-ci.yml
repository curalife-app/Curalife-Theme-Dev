name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: "0 0 * * 0" # Run every Sunday at midnight

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli puppeteer lighthouse puppeteer-screenshot-cli

      - name: Set Chrome flags
        run: |
          echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless" >> $GITHUB_ENV

      - name: Setup results directory
        id: results-dir
        run: |
          RESULTS_DIR="${{ matrix.page.name }}-lighthouse-results"
          echo "results_dir=$RESULTS_DIR" >> $GITHUB_OUTPUT
          mkdir -p $RESULTS_DIR

      - name: Make scripts executable
        run: |
          chmod +x .github/workflows/scripts/make-scripts-executable.sh
          .github/workflows/scripts/make-scripts-executable.sh

      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          echo "Running Lighthouse on ${{ matrix.page.url }}..."
          .github/workflows/scripts/run-lighthouse.sh "${{ matrix.page.url }}" "${{ matrix.page.name }}" "${{ steps.results-dir.outputs.results_dir }}"
        continue-on-error: true

      - name: Install jq for results processing
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Process Lighthouse results
        id: scores
        run: |
          # Set current date for outputs
          CURRENT_DATE=$(date +"%Y-%m-%d")
          echo "report_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          .github/workflows/scripts/process-results.sh "${{ matrix.page.name }}" "${{ steps.results-dir.outputs.results_dir }}" "$CURRENT_DATE"

      - name: Save reports to performance-reports directory
        if: steps.scores.outputs.has_results == 'true'
        run: |
          .github/workflows/scripts/save-reports.sh "${{ matrix.page.name }}" "${{ steps.results-dir.outputs.results_dir }}" "${{ steps.scores.outputs.report_date }}"

      - name: Format Lighthouse results
        if: steps.scores.outputs.has_results == 'true'
        run: |
          .github/workflows/scripts/format-summary.sh "${{ matrix.page.name }}"

      - name: Commit changes
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Ensure we're working on a clean state
          echo "Creating backup of performance reports..."
          mkdir -p /tmp/performance-reports-backup
          cp -R performance-reports/* /tmp/performance-reports-backup/ 2>/dev/null || true

          # Initialize reports branch - use a simpler, more deterministic approach
          REPORTS_BRANCH="performance-reports-data"
          echo "Checking for $REPORTS_BRANCH branch..."

          # Fetch the reports branch if it exists
          git fetch origin $REPORTS_BRANCH || echo "Branch not found, will create new"

          # Always create a fresh local branch from main
          echo "Creating fresh local reports branch..."
          # First make sure we're on main
          git checkout main

          # Create a fresh branch from current main
          git branch -D $REPORTS_BRANCH 2>/dev/null || true
          git checkout -b $REPORTS_BRANCH

          # Clean out any old reports to start fresh
          echo "Cleaning old reports..."
          rm -rf performance-reports/* || true
          mkdir -p performance-reports

          # Restore the generated reports
          echo "Restoring generated reports..."
          cp -R /tmp/performance-reports-backup/* performance-reports/ 2>/dev/null || true

          # Stage only the performance-reports directory
          echo "Adding performance reports to git..."
          git add performance-reports/

          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            echo "Committing changes..."
            git commit -m "Update Lighthouse performance reports ($(date +%Y-%m-%d))"
            echo "Pushing to remote branch..."
            git push -f origin $REPORTS_BRANCH
            echo "Push completed successfully"
          else
            echo "No changes to commit"
          fi

          # Return to main branch
          git checkout main

      - name: Create Pull Request to main
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
        id: create-pr
        continue-on-error: true
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ github.token }}
          commit-message: Add Lighthouse performance reports
          committer: GitHub Action <action@github.com>
          author: GitHub Action <action@github.com>
          branch: performance-reports-data
          base: main
          title: "Update Lighthouse performance reports - ${{ github.run_id }}"
          body: |
            # ðŸ“Š Lighthouse Performance Reports Update

            This automated PR updates the performance reports with the latest Lighthouse test results.

            ## Changes included:
            - New performance reports for homepage, collection, and product pages
            - Updated trend analysis and historical data
            - Generated performance insights and recommendations

            *This PR was automatically created by the Lighthouse CI workflow (Run #${{ github.run_id }}).*
          labels: |
            automated-pr
            performance
            reports
          draft: false

      - name: Check PR Creation Status
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
        run: |
          # If PR creation failed, log the error and provide guidance
          if [ "${{ steps.create-pr.outcome }}" != "success" ]; then
            echo "::warning::Failed to create PR automatically. This is likely because a PR already exists."
            echo "PR creation status: ${{ steps.create-pr.outcome }}"
            echo "You can manually view existing PRs at: ${{ github.server_url }}/${{ github.repository }}/pulls"
          else
            echo "PR created successfully: ${{ steps.create-pr.outputs.pull-request-url }}"
          fi

      - name: List created files
        run: |
          echo "Files created in performance-reports directory:"
          mkdir -p performance-reports
          find performance-reports -type f | sort || echo "No files found in performance-reports"

      # Create a simple index HTML file
      - name: Generate dashboard
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d")

          # Create performance-reports directory if it doesn't exist
          mkdir -p performance-reports

          .github/workflows/scripts/generate-dashboard.sh "$CURRENT_DATE"

          echo "Dashboard file generated at performance-reports/index.html"

      # Upload the generated HTML and performance reports as artifacts
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: performance-reports/
          retention-days: 30
