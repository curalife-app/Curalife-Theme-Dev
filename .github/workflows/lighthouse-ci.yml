name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: "0 0 * * 0" # Run every Sunday at midnight

# Allow cancellation of previous runs in the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        page:
          - name: homepage
            url: https://curalife.com/
          - name: product
            url: https://curalife.com/products/curalin
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install -g @lhci/cli puppeteer lighthouse puppeteer-screenshot-cli

      - name: Set Chrome flags
        run: |
          echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless" >> $GITHUB_ENV

      - name: Setup results directory
        id: results-dir
        run: |
          RESULTS_DIR="${{ matrix.page.name }}-lighthouse-results"
          echo "results_dir=$RESULTS_DIR" >> $GITHUB_OUTPUT
          mkdir -p $RESULTS_DIR

      - name: Make scripts executable
        run: |
          chmod +x .github/workflows/scripts/make-scripts-executable.sh
          .github/workflows/scripts/make-scripts-executable.sh

      - name: Run Lighthouse CI
        id: lighthouse
        run: |
          echo "Running Lighthouse on ${{ matrix.page.url }}..."
          .github/workflows/scripts/run-lighthouse.sh "${{ matrix.page.url }}" "${{ matrix.page.name }}" "${{ steps.results-dir.outputs.results_dir }}"
        continue-on-error: true

      - name: Install jq for results processing
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Process Lighthouse results
        id: scores
        run: |
          # Set current date for outputs
          CURRENT_DATE=$(date +"%Y-%m-%d")
          echo "report_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

          .github/workflows/scripts/process-results.sh "${{ matrix.page.name }}" "${{ steps.results-dir.outputs.results_dir }}" "$CURRENT_DATE"

      - name: Save reports to performance-reports directory
        if: steps.scores.outputs.has_results == 'true'
        run: |
          .github/workflows/scripts/save-reports.sh "${{ matrix.page.name }}" "${{ steps.results-dir.outputs.results_dir }}" "${{ steps.scores.outputs.report_date }}"

      - name: Format Lighthouse results
        if: steps.scores.outputs.has_results == 'true'
        run: |
          .github/workflows/scripts/format-summary.sh "${{ matrix.page.name }}"

      # Upload results for this page as an artifact
      - name: Upload individual page report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.page.name }}-lighthouse-report
          path: performance-reports/
          retention-days: 30

    outputs:
      report_date: ${{ steps.scores.outputs.report_date }}

  create-dashboard:
    needs: lighthouse-ci
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Make scripts executable
        run: |
          chmod +x .github/workflows/scripts/make-scripts-executable.sh
          .github/workflows/scripts/make-scripts-executable.sh

      - name: Create performance-reports directory
        run: mkdir -p performance-reports

      # Download all page reports to combine them
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: performance-reports-downloads
          pattern: "*-lighthouse-report"
          merge-multiple: true

      # Copy all downloaded artifacts to the performance-reports directory
      - name: Organize reports
        run: |
          ls -la performance-reports-downloads
          cp -R performance-reports-downloads/* performance-reports/ || true

      - name: Generate dashboard
        run: |
          CURRENT_DATE="${{ needs.lighthouse-ci.outputs.report_date }}"
          if [ -z "$CURRENT_DATE" ]; then
            CURRENT_DATE=$(date +"%Y-%m-%d")
          fi

          echo "Generating dashboard for date: $CURRENT_DATE"
          .github/workflows/scripts/generate-dashboard.sh "$CURRENT_DATE"

          # Generate GitHub-friendly summary markdown
          echo "## üö¶ Lighthouse Performance Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Summary Results ($(date))" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add a table for desktop results
          echo "#### üíª Desktop Results" >> $GITHUB_STEP_SUMMARY
          echo "| Page | Performance | Accessibility | Best Practices | SEO | LCP | TBT | CLS |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------|---------------|----------------|-----|-----|-----|-----|" >> $GITHUB_STEP_SUMMARY

          # Find all summary.json files for desktop
          find performance-reports -name "summary.json" | sort | while read -r file; do
            PAGE_NAME=$(grep -o '"page": *"[^"]*"' "$file" | cut -d'"' -f4)
            PERF=$(grep -o '"performance": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            A11Y=$(grep -o '"accessibility": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            BP=$(grep -o '"bestPractices": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            SEO=$(grep -o '"seo": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            LCP=$(grep -o '"largestContentfulPaint": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            TBT=$(grep -o '"totalBlockingTime": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            CLS=$(grep -o '"cumulativeLayoutShift": *[0-9.]*' "$file" | grep -o '[0-9.]*')

            # Format values for display
            LCP_MS=$(echo "$LCP / 1000" | bc -l | xargs printf "%.2fs")
            TBT_MS=$(echo "$TBT" | xargs printf "%.0fms")

            echo "| $PAGE_NAME | $PERF | $A11Y | $BP | $SEO | $LCP_MS | $TBT_MS | $CLS |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### üì± Mobile Results" >> $GITHUB_STEP_SUMMARY
          echo "| Page | Performance | Accessibility | Best Practices | SEO | LCP | TBT | CLS |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------|---------------|----------------|-----|-----|-----|-----|" >> $GITHUB_STEP_SUMMARY

          # Find all summary.json files for mobile
          find performance-reports -name "summary.json" | sort | while read -r file; do
            PAGE_NAME=$(grep -o '"page": *"[^"]*"' "$file" | cut -d'"' -f4)
            PERF=$(grep -o '"performance": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            A11Y=$(grep -o '"accessibility": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            BP=$(grep -o '"bestPractices": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            SEO=$(grep -o '"seo": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            LCP=$(grep -o '"largestContentfulPaint": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            TBT=$(grep -o '"totalBlockingTime": *[0-9.]*' "$file" | grep -o '[0-9.]*')
            CLS=$(grep -o '"cumulativeLayoutShift": *[0-9.]*' "$file" | grep -o '[0-9.]*')

            # Format values for display
            LCP_MS=$(echo "$LCP / 1000" | bc -l | xargs printf "%.2fs")
            TBT_MS=$(echo "$TBT" | xargs printf "%.0fms")

            echo "| $PAGE_NAME | $PERF | $A11Y | $BP | $SEO | $LCP_MS | $TBT_MS | $CLS |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìà Core Web Vitals Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Good**: LCP < 2.5s, CLS < 0.1, TBT < 200ms" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö†Ô∏è **Needs Improvement**: LCP < 4s, CLS < 0.25, TBT < 600ms" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå **Poor**: LCP > 4s, CLS > 0.25, TBT > 600ms" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç View Full Reports" >> $GITHUB_STEP_SUMMARY
          echo "Download the full HTML reports from the workflow artifacts section." >> $GITHUB_STEP_SUMMARY

      - name: List created files
        run: |
          echo "Files created in performance-reports directory:"
          mkdir -p performance-reports
          find performance-reports -type f | sort || echo "No files found in performance-reports"

      # Upload the complete combined report
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-complete-report
          path: performance-reports/
          retention-days: 30

      # Generate visual annotations for PRs
      - name: Add PR annotations
        if: github.event_name == 'pull_request'
        run: |
          # Find all summary.json files
          find performance-reports -name "summary.json" | sort | while read -r file; do
            PAGE_NAME=$(grep -o '"page": *"[^"]*"' "$file" | cut -d'"' -f4)
            PERF=$(grep -o '"performance": *[0-9.]*' "$file" | grep -o '[0-9.]*')

            # Add annotations based on performance score
            if (( $(echo "$PERF < 75" | bc -l) )); then
              echo "::warning file=${PAGE_NAME}::Performance score is poor: ${PERF}%. Consider optimizing this page."
            elif (( $(echo "$PERF < 90" | bc -l) )); then
              echo "::notice file=${PAGE_NAME}::Performance score needs improvement: ${PERF}%."
            else
              echo "::notice file=${PAGE_NAME}::Performance score is good: ${PERF}%."
            fi
          done
