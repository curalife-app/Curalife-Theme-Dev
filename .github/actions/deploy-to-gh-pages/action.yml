name: "Deploy to GitHub Pages"
description: "Deploys content to GitHub Pages branch with flexible options"

inputs:
  source-dir:
    description: "Source directory containing the content to deploy"
    required: true
  custom-domain:
    description: "Custom domain for GitHub Pages"
    required: false
    default: ""
  target-branch:
    description: "Branch to deploy to"
    required: false
    default: "gh-pages"
  commit-message:
    description: "Commit message for the deployment"
    required: false
    default: "Update GitHub Pages content"
  skip-if-empty:
    description: "Skip deployment if source directory is empty or missing critical files"
    required: false
    default: "true"

outputs:
  deployed:
    description: "Whether files were successfully deployed"
    value: ${{ steps.deploy.outputs.files_deployed }}

runs:
  using: "composite"
  steps:
    - name: Verify source directory
      id: verify-source
      shell: bash
      run: |
        echo "Verifying source directory: ${{ inputs.source-dir }}"
        HAS_FILES="false"

        # Check if source directory exists
        if [ ! -d "${{ inputs.source-dir }}" ]; then
          echo "::warning::Source directory does not exist: ${{ inputs.source-dir }}"

          if [ "${{ inputs.skip-if-empty }}" = "true" ]; then
            echo "skip_deployment=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "::error::Source directory does not exist and skip-if-empty is false"
            exit 1
          fi
        fi

        # Check for required files
        if [ -f "${{ inputs.source-dir }}/index.html" ] || [ -d "${{ inputs.source-dir }}/dashboards" ]; then
          echo "Found critical files in source directory"
          HAS_FILES="true"
        else
          echo "::warning::No critical files found in source directory"

          if [ "${{ inputs.skip-if-empty }}" = "true" ]; then
            echo "skip_deployment=true" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        # If we got here, proceed with deployment
        echo "skip_deployment=false" >> $GITHUB_OUTPUT

    - name: Configure Git
      if: steps.verify-source.outputs.skip_deployment != 'true'
      shell: bash
      run: |
        echo "Configuring Git for deployment..."
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Checkout target branch
      if: steps.verify-source.outputs.skip_deployment != 'true'
      shell: bash
      run: |
        echo "Checking out target branch: ${{ inputs.target-branch }}"

        # Check if branch exists
        if git ls-remote --heads origin ${{ inputs.target-branch }} | grep -q ${{ inputs.target-branch }}; then
          echo "Target branch exists, checking out..."
          git fetch origin ${{ inputs.target-branch }}
          git checkout ${{ inputs.target-branch }}
        else
          echo "Target branch doesn't exist, creating orphan branch..."
          git checkout --orphan ${{ inputs.target-branch }}
          git rm -rf .
        fi

    - name: Setup deploy directory
      if: steps.verify-source.outputs.skip_deployment != 'true'
      shell: bash
      run: |
        echo "Setting up deploy directory..."

        # Create .nojekyll file
        touch .nojekyll

        # Create CNAME file if custom domain is specified
        if [ -n "${{ inputs.custom-domain }}" ]; then
          echo "${{ inputs.custom-domain }}" > CNAME
          echo "Created CNAME file for ${{ inputs.custom-domain }}"
        fi

        # Clean existing files but preserve .git directory and any existing CNAME/nojekyll
        find . -mindepth 1 -maxdepth 1 -not -path "./.git" -not -name "CNAME" -not -name ".nojekyll" -exec rm -rf {} \;

    - name: Copy files to deploy directory
      if: steps.verify-source.outputs.skip_deployment != 'true'
      id: copy-files
      shell: bash
      run: |
        echo "Copying files from ${{ inputs.source-dir }} to deploy directory..."

        # Check if source directory has content
        FILE_COUNT=$(find "${{ inputs.source-dir }}" -type f | wc -l)

        if [ "$FILE_COUNT" -eq 0 ]; then
          echo "::warning::Source directory is empty"
          if [ "${{ inputs.skip-if-empty }}" = "true" ]; then
            echo "files_copied=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        # Copy all files from source directory
        cp -r "${{ inputs.source-dir }}"/* . 2>/dev/null || true

        # Check if any files were copied
        FILES_COPIED=0
        if [ -f "index.html" ] || [ -d "dashboards" ]; then
          FILES_COPIED=1
        else
          FILES_COPIED=$(find . -mindepth 1 -maxdepth 1 -not -path "./.git" -not -name "CNAME" -not -name ".nojekyll" | wc -l)
        fi

        if [ "$FILES_COPIED" -eq 0 ]; then
          echo "::warning::No files were copied from source directory"
          echo "files_copied=false" >> $GITHUB_OUTPUT

          if [ "${{ inputs.skip-if-empty }}" = "true" ]; then
            exit 0
          fi
        else
          echo "Copied $FILES_COPIED files/directories"
          echo "files_copied=true" >> $GITHUB_OUTPUT
        fi

        # Create redirect if we have a dashboard but no index.html
        if [ ! -f "index.html" ] && [ -d "dashboards" ]; then
          echo '<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0;url=./dashboards/index.html"></head><body><p>Redirecting to dashboard...</p></body></html>' > index.html
          echo "Created redirect to dashboard"
        fi

    - name: Verify files before committing
      if: steps.verify-source.outputs.skip_deployment != 'true' && steps.copy-files.outputs.files_copied == 'true'
      shell: bash
      run: |
        echo "Verifying files before commit..."

        # List files to be committed
        echo "Files to be committed:"
        find . -mindepth 1 -maxdepth 1 -not -path "./.git" | sort

    - name: Commit and push changes
      if: steps.verify-source.outputs.skip_deployment != 'true' && steps.copy-files.outputs.files_copied == 'true'
      id: deploy
      shell: bash
      run: |
        echo "Committing and pushing changes..."

        # Check if there are changes to commit
        if git diff --quiet && git diff --staged --quiet; then
          echo "No changes to commit"
          echo "files_deployed=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Add all files
        git add -A

        # Commit changes
        git commit -m "${{ inputs.commit-message }}"

        # Push changes
        git push -f origin ${{ inputs.target-branch }}

        echo "Changes pushed to ${{ inputs.target-branch }}"
        echo "files_deployed=true" >> $GITHUB_OUTPUT

    - name: Skip deployment notification
      if: steps.verify-source.outputs.skip_deployment == 'true'
      shell: bash
      run: |
        echo "::notice::Deployment skipped - no valid content found in ${{ inputs.source-dir }}"
        echo "files_deployed=false" >> $GITHUB_OUTPUT
