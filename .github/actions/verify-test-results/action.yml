name: "Verify Test Results"
description: "Verifies Lighthouse test results and ensures data quality without fallbacks"

inputs:
  results-dir:
    description: "Directory containing Lighthouse results"
    required: true
  fail-on-error:
    description: "Whether to fail the action if verification fails"
    required: false
    default: "true"
  performance-threshold:
    description: "Minimum performance score (0-100) to pass verification"
    required: false
    default: "0"

outputs:
  verification-passed:
    description: "Whether all verification checks passed"
    value: ${{ steps.check.outputs.passed }}
  error-count:
    description: "Number of errors found during verification"
    value: ${{ steps.check.outputs.error_count }}
  warning-count:
    description: "Number of warnings found during verification"
    value: ${{ steps.check.outputs.warning_count }}
  has-data:
    description: "Whether any valid data was found during verification"
    value: ${{ steps.check.outputs.has_data }}

runs:
  using: "composite"
  steps:
    - name: Run verification checks
      id: check
      shell: bash
      run: |
        echo "Verifying Lighthouse test results..."

        RESULTS_DIR="${{ inputs.results-dir }}"
        ERRORS=0
        WARNINGS=0
        HAS_DATA="false"

        # Check if results directory exists
        if [ ! -d "$RESULTS_DIR" ]; then
          echo "::error::Results directory not found: $RESULTS_DIR"
          ERRORS=$((ERRORS + 1))
        else
          # Check if device directories exist
          for device in "desktop" "mobile"; do
            if [ ! -d "$RESULTS_DIR/$device" ]; then
              echo "::warning::$device directory not found in $RESULTS_DIR"
              WARNINGS=$((WARNINGS + 1))
            else
              # Count how many valid results exist
              VALID_REPORTS=0

              # Check each page result
              for page_dir in "$RESULTS_DIR/$device"/*; do
                if [ -d "$page_dir" ]; then
                  PAGE_NAME=$(basename "$page_dir")

                  # Check for JSON report
                  REPORT_FILE=""
                  for file in "$page_dir"/*.report.json "$page_dir"/*/*.report.json; do
                    if [ -f "$file" ]; then
                      REPORT_FILE="$file"
                      break
                    fi
                  done

                  if [ -n "$REPORT_FILE" ]; then
                    # Verify the report contains actual data (not placeholder/error result)
                    PERF_SCORE=$(jq -r '.categories.performance.score' "$REPORT_FILE" 2>/dev/null || echo "null")

                    if [ "$PERF_SCORE" = "null" ] || [ "$PERF_SCORE" = "0" ]; then
                      echo "::warning::Invalid performance score in $REPORT_FILE"
                      WARNINGS=$((WARNINGS + 1))
                    else
                      # A valid report was found
                      VALID_REPORTS=$((VALID_REPORTS + 1))
                      HAS_DATA="true"

                      # Check performance threshold if specified
                      if [ "${{ inputs.performance-threshold }}" != "0" ]; then
                        PERF_SCALED=$(echo "$PERF_SCORE * 100" | bc -l | xargs printf "%.0f")

                        if [ "$PERF_SCALED" -lt "${{ inputs.performance-threshold }}" ]; then
                          echo "::error::Performance score for $PAGE_NAME on $device is below threshold: $PERF_SCALED < ${{ inputs.performance-threshold }}"
                          ERRORS=$((ERRORS + 1))
                        fi
                      fi
                    fi
                  else
                    echo "::warning::No JSON report found for $PAGE_NAME on $device"
                    WARNINGS=$((WARNINGS + 1))
                  fi
                fi
              done

              echo "$device tests: found $VALID_REPORTS valid reports"
            fi
          done
        fi

        # Output verification results
        echo "error_count=$ERRORS" >> $GITHUB_OUTPUT
        echo "warning_count=$WARNINGS" >> $GITHUB_OUTPUT
        echo "has_data=$HAS_DATA" >> $GITHUB_OUTPUT

        # Determine if verification passed
        if [ "$ERRORS" -eq 0 ]; then
          echo "✅ Verification passed with $WARNINGS warnings"
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Verification failed with $ERRORS errors and $WARNINGS warnings"
          echo "passed=false" >> $GITHUB_OUTPUT

          if [ "${{ inputs.fail-on-error }}" = "true" ]; then
            exit 1
          fi
        fi
