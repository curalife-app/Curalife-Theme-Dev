# This action has been simplified to avoid YAML syntax errors
# Original complex templates with heredocs and multi-line strings have been replaced with simpler inline approaches
# Last updated: 2023-06-01

name: "Generate Performance Dashboard"
description: "Processes Lighthouse results and generates HTML dashboards"

inputs:
  results-dir:
    description: "Directory containing Lighthouse results"
    required: true
  output-dir:
    description: "Directory where dashboards should be saved"
    required: true
  current-date:
    description: "Current date in YYYY-MM-DD format"
    required: false
    default: "$(date +'%Y-%m-%d')"
  base-url:
    description: "Base URL for relative links in dashboard"
    required: false
    default: ""
  templates-dir:
    description: "Directory containing HTML templates"
    required: false
    default: ".github/workflows/templates"
  include-history:
    description: "Whether to include historical data"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Setup directories
      shell: bash
      run: |
        echo "Setting up dashboard directories..."
        mkdir -p "${{ inputs.output-dir }}/dashboards"
        mkdir -p "${{ inputs.output-dir }}/processed"
        mkdir -p "${{ inputs.output-dir }}/historical"
        mkdir -p "performance-reports"
        mkdir -p "performance-reports/history"

        # Ensure template directory exists
        if [ ! -d "${{ inputs.templates-dir }}" ]; then
          echo "::error::Templates directory not found: ${{ inputs.templates-dir }}"
          exit 1
        fi

        # Get current date if not provided
        if [ "${{ inputs.current-date }}" == "$(date +'%Y-%m-%d')" ]; then
          CURRENT_DATE=$(date +'%Y-%m-%d')
        else
          CURRENT_DATE="${{ inputs.current-date }}"
        fi
        echo "CURRENT_DATE=$CURRENT_DATE" >> $GITHUB_ENV

    - name: Process results
      shell: bash
      run: |
        echo "Processing Lighthouse results..."
        RESULTS_DIR="${{ inputs.results-dir }}"
        OUTPUT_DIR="${{ inputs.output-dir }}"

        # Check if there are any results to process
        if [ ! -d "$RESULTS_DIR/desktop" ] || [ ! -d "$RESULTS_DIR/mobile" ]; then
          echo "::error::Missing desktop or mobile result directories"
          exit 1
        fi

        # Process each page's results
        for device_dir in "$RESULTS_DIR"/*; do
          if [ -d "$device_dir" ] && [[ "$(basename "$device_dir")" == "desktop" || "$(basename "$device_dir")" == "mobile" ]]; then
            device=$(basename "$device_dir")
            echo "Processing $device results..."

            for page_dir in "$device_dir"/*; do
              if [ -d "$page_dir" ]; then
                page_name=$(basename "$page_dir")
                echo "Processing $page_name on $device..."

                # Create output directories
                mkdir -p "$OUTPUT_DIR/processed/$page_name/$device"

                # Find the JSON report
                json_report=$(find "$page_dir" -name "*.report.json" | head -n 1)

                if [ -f "$json_report" ]; then
                  # Copy report files
                  cp "$page_dir"/*.* "$OUTPUT_DIR/processed/$page_name/$device/"

                  # Extract metrics if not already done
                  if [ ! -f "$OUTPUT_DIR/processed/$page_name/$device/metrics.json" ]; then
                    device_upper=$(echo "$device" | tr '[:lower:]' '[:upper:]')
                    jq -r '{
                      performance: .categories.performance.score,
                      accessibility: .categories.accessibility.score,
                      "best-practices": .categories["best-practices"].score,
                      seo: .categories.seo.score,
                      lcp: .audits["largest-contentful-paint"].numericValue,
                      fid: .audits["max-potential-fid"].numericValue,
                      cls: .audits["cumulative-layout-shift"].numericValue,
                      tbt: .audits["total-blocking-time"].numericValue,
                      device: "'$device'",
                      page: "'$page_name'",
                      date: env.CURRENT_DATE,
                      timestamp: now | todate
                    }' "$json_report" > "$OUTPUT_DIR/processed/$page_name/$device/metrics.json"

                    # Create metrics.env file
                    jq -r '"'$device_upper'_PERF=\(.performance * 100 | round)",
                      "'$device_upper'_A11Y=\(.accessibility * 100 | round)",
                      "'$device_upper'_BP=\(.["best-practices"] * 100 | round)",
                      "'$device_upper'_SEO=\(.seo * 100 | round)",
                      "'$device_upper'_LCP=\(.lcp)",
                      "'$device_upper'_FID=\(.fid)",
                      "'$device_upper'_CLS=\(.cls)",
                      "'$device_upper'_TBT=\(.tbt)"' "$OUTPUT_DIR/processed/$page_name/$device/metrics.json" > "$OUTPUT_DIR/processed/$page_name/metrics-values.env"
                  fi
                else
                  echo "::warning::No JSON report found for $page_name on $device"
                fi
              fi
            done
          fi
        done

        echo "Results processed successfully"

    - name: Store historical data
      if: inputs.include-history == 'true'
      shell: bash
      run: |
        echo "Storing historical data..."
        CURRENT_DATE="${{ env.CURRENT_DATE }}"
        PROCESSED_DIR="${{ inputs.output-dir }}/processed"
        HISTORY_DIR="${{ inputs.output-dir }}/historical"
        PERF_HISTORY_DIR="performance-reports/history"

        mkdir -p "$HISTORY_DIR"
        mkdir -p "$PERF_HISTORY_DIR"

        # Create history directories for each page
        for page_dir in "$PROCESSED_DIR"/*; do
          if [ -d "$page_dir" ]; then
            page_name=$(basename "$page_dir")
            echo "Storing historical data for $page_name..."

            # Create history directory for this page
            mkdir -p "$HISTORY_DIR/$page_name"
            mkdir -p "$PERF_HISTORY_DIR/$page_name"

            # Create history file if it doesn't exist
            HISTORY_FILE="$HISTORY_DIR/$page_name/history.json"
            if [ ! -f "$HISTORY_FILE" ]; then
              echo "[]" > "$HISTORY_FILE"
            fi

            # Get metrics from processed results
            for device in "desktop" "mobile"; do
              METRICS_FILE="$PROCESSED_DIR/$page_name/$device/metrics.json"

              if [ -f "$METRICS_FILE" ]; then
                # Add date to metrics
                jq --arg date "$CURRENT_DATE" '. + {date: $date}' "$METRICS_FILE" > "$METRICS_FILE.temp"
                mv "$METRICS_FILE.temp" "$METRICS_FILE"

                # Add to history
                jq --argjson new "$(cat "$METRICS_FILE")" '. + [$new]' "$HISTORY_FILE" > "$HISTORY_FILE.temp"
                mv "$HISTORY_FILE.temp" "$HISTORY_FILE"

                # Copy to performance-reports history
                cp "$METRICS_FILE" "$PERF_HISTORY_DIR/$page_name/${CURRENT_DATE}-${device}.json"
              fi
            done

            # Sort history by date (newest first) and limit to last 30 entries
            jq 'sort_by(.date) | reverse | .[0:30]' "$HISTORY_FILE" > "$HISTORY_FILE.temp"
            mv "$HISTORY_FILE.temp" "$HISTORY_FILE"
          fi
        done

        echo "Historical data stored successfully"

    - name: Generate main dashboard
      shell: bash
      run: |
        echo "Generating main dashboard..."
        CURRENT_DATE="${{ env.CURRENT_DATE }}"
        TEMPLATE_DIR="${{ inputs.templates-dir }}"
        DASHBOARD_DIR="${{ inputs.output-dir }}/dashboards"
        PROCESSED_DIR="${{ inputs.output-dir }}/processed"

        # Find dashboard template
        TEMPLATE_FILE="$TEMPLATE_DIR/dashboard.template.html"
        if [ ! -f "$TEMPLATE_FILE" ]; then
          echo "::warning::Dashboard template not found, using fallback template"
          TEMPLATE_FILE="$TEMPLATE_DIR/simple-dashboard.template.html"

          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "::warning::Fallback template not found, using minimal template"
            TEMPLATE_FILE="$TEMPLATE_DIR/minimal-dashboard.template.html"

            if [ ! -f "$TEMPLATE_FILE" ]; then
              echo "::error::No dashboard template found"
              exit 1
            fi
          fi
        fi

        # Create dashboard content
        echo "Using template: $TEMPLATE_FILE"

        # Build page sections from processed results
        PAGES_HTML=""
        PAGES_COUNT=0

        for page_dir in "$PROCESSED_DIR"/*; do
          if [ -d "$page_dir" ]; then
            page_name=$(basename "$page_dir")
            PAGES_COUNT=$((PAGES_COUNT + 1))

            # Only show first 2 pages in detail, the rest go into summary
            if [ $PAGES_COUNT -le 2 ]; then
              echo "Adding detailed section for $page_name"

              # Source metrics data
              if [ -f "$page_dir/metrics-values.env" ]; then
                source "$page_dir/metrics-values.env"
              fi

              # Add page section
              PAGE_TITLE=$(echo "$page_name" | tr '-' ' ' | sed 's/\b\(.\)/\u\1/g')

              # Build HTML for this page
              PAGES_HTML="${PAGES_HTML}
              <section class=\"page-section\" id=\"$page_name\">
                <h2>$PAGE_TITLE</h2>
                <div class=\"metrics-container\">
                  <div class=\"device-metrics\">
                    <h3>Desktop</h3>
                    <div class=\"score-card\">
                      <div class=\"score performance\"><span>${DESKTOP_PERF:-0}</span>Performance</div>
                      <div class=\"score accessibility\"><span>${DESKTOP_A11Y:-0}</span>Accessibility</div>
                      <div class=\"score best-practices\"><span>${DESKTOP_BP:-0}</span>Best Practices</div>
                      <div class=\"score seo\"><span>${DESKTOP_SEO:-0}</span>SEO</div>
                    </div>
                    <div class=\"vitals-container\">
                      <div class=\"vital\">LCP: <span>${DESKTOP_LCP:-0}</span>ms</div>
                      <div class=\"vital\">CLS: <span>${DESKTOP_CLS:-0}</span></div>
                      <div class=\"vital\">TBT: <span>${DESKTOP_TBT:-0}</span>ms</div>
                    </div>
                    <a href=\"./processed/$page_name/reports/desktop.html\" class=\"report-link\">View Full Report</a>
                  </div>
                  <div class=\"device-metrics\">
                    <h3>Mobile</h3>
                    <div class=\"score-card\">
                      <div class=\"score performance\"><span>${MOBILE_PERF:-0}</span>Performance</div>
                      <div class=\"score accessibility\"><span>${MOBILE_A11Y:-0}</span>Accessibility</div>
                      <div class=\"score best-practices\"><span>${MOBILE_BP:-0}</span>Best Practices</div>
                      <div class=\"score seo\"><span>${MOBILE_SEO:-0}</span>SEO</div>
                    </div>
                    <div class=\"vitals-container\">
                      <div class=\"vital\">LCP: <span>${MOBILE_LCP:-0}</span>ms</div>
                      <div class=\"vital\">CLS: <span>${MOBILE_CLS:-0}</span></div>
                      <div class=\"vital\">TBT: <span>${MOBILE_TBT:-0}</span>ms</div>
                    </div>
                    <a href=\"./processed/$page_name/reports/mobile.html\" class=\"report-link\">View Full Report</a>
                  </div>
                </div>
                <div class=\"history-link-container\">
                  <a href=\"./trends.html#$page_name\" class=\"history-link\">View Historical Trends</a>
                </div>
              </section>"
            fi
          fi
        done

        # Generate summary table for all pages
        SUMMARY_HTML="<table class=\"summary-table\">
          <thead>
            <tr>
              <th>Page</th>
              <th colspan=\"2\">Performance</th>
              <th colspan=\"2\">Accessibility</th>
              <th colspan=\"2\">Best Practices</th>
              <th colspan=\"2\">SEO</th>
            </tr>
            <tr>
              <th></th>
              <th>Desktop</th>
              <th>Mobile</th>
              <th>Desktop</th>
              <th>Mobile</th>
              <th>Desktop</th>
              <th>Mobile</th>
              <th>Desktop</th>
              <th>Mobile</th>
            </tr>
          </thead>
          <tbody>"

        for page_dir in "$PROCESSED_DIR"/*; do
          if [ -d "$page_dir" ]; then
            page_name=$(basename "$page_dir")
            PAGE_TITLE=$(echo "$page_name" | tr '-' ' ' | sed 's/\b\(.\)/\u\1/g')

            # Source metrics data
            if [ -f "$page_dir/metrics-values.env" ]; then
              source "$page_dir/metrics-values.env"
            else
              # Default values if metrics file doesn't exist
              DESKTOP_PERF=0
              DESKTOP_A11Y=0
              DESKTOP_BP=0
              DESKTOP_SEO=0
              MOBILE_PERF=0
              MOBILE_A11Y=0
              MOBILE_BP=0
              MOBILE_SEO=0
            fi

            # Add row to summary table
            SUMMARY_HTML="${SUMMARY_HTML}
            <tr>
              <td><a href=\"#$page_name\">$PAGE_TITLE</a></td>
              <td class=\"score-cell score-${DESKTOP_PERF:-0}\">${DESKTOP_PERF:-0}</td>
              <td class=\"score-cell score-${MOBILE_PERF:-0}\">${MOBILE_PERF:-0}</td>
              <td class=\"score-cell score-${DESKTOP_A11Y:-0}\">${DESKTOP_A11Y:-0}</td>
              <td class=\"score-cell score-${MOBILE_A11Y:-0}\">${MOBILE_A11Y:-0}</td>
              <td class=\"score-cell score-${DESKTOP_BP:-0}\">${DESKTOP_BP:-0}</td>
              <td class=\"score-cell score-${MOBILE_BP:-0}\">${MOBILE_BP:-0}</td>
              <td class=\"score-cell score-${DESKTOP_SEO:-0}\">${DESKTOP_SEO:-0}</td>
              <td class=\"score-cell score-${MOBILE_SEO:-0}\">${MOBILE_SEO:-0}</td>
            </tr>"
          fi
        done

        SUMMARY_HTML="${SUMMARY_HTML}
          </tbody>
        </table>"

        # Generate final dashboard HTML
        sed -e "s|{{DATE}}|$CURRENT_DATE|g" \
            -e "s|{{SUMMARY_TABLE}}|$SUMMARY_HTML|g" \
            -e "s|{{PAGE_SECTIONS}}|$PAGES_HTML|g" \
            "$TEMPLATE_FILE" > "$DASHBOARD_DIR/index.html"

        # Copy to performance-reports and root directory
        cp "$DASHBOARD_DIR/index.html" "performance-reports/index.html"
        cp "$DASHBOARD_DIR/index.html" "${{ inputs.output-dir }}/index.html"

        echo "Main dashboard generated successfully"

    - name: Generate trends dashboard
      if: inputs.include-history == 'true'
      shell: bash
      run: |
        echo "Generating trends dashboard..."
        TEMPLATE_DIR="${{ inputs.templates-dir }}"
        HISTORY_DIR="${{ inputs.output-dir }}/historical"
        DASHBOARD_DIR="${{ inputs.output-dir }}/dashboards"

        # Find trends template
        TEMPLATE_FILE="$TEMPLATE_DIR/trends.template.html"
        if [ ! -f "$TEMPLATE_FILE" ]; then
          echo "::warning::Trends template not found, using empty trends template"
          TEMPLATE_FILE="$TEMPLATE_DIR/empty-trends.template.html"

          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "::error::No trends template found"
            exit 1
          fi
        fi

        # Generate charts data
        CHARTS_DATA=""

        for history_dir in "$HISTORY_DIR"/*; do
          if [ -d "$history_dir" ]; then
            page_name=$(basename "$history_dir")
            HISTORY_FILE="$history_dir/history.json"

            if [ -f "$HISTORY_FILE" ]; then
              # Generate JSON data for charts
              echo "Generating chart data for $page_name"

              # Create desktop data
              DESKTOP_DATA=$(jq '[.[] | select(.device == "desktop") | {date: .date, performance: (.performance * 100 | round), accessibility: (.accessibility * 100 | round), "best-practices": (.["best-practices"] * 100 | round), seo: (.seo * 100 | round), lcp: .lcp, cls: .cls, tbt: .tbt}] | sort_by(.date)' "$HISTORY_FILE")

              # Create mobile data
              MOBILE_DATA=$(jq '[.[] | select(.device == "mobile") | {date: .date, performance: (.performance * 100 | round), accessibility: (.accessibility * 100 | round), "best-practices": (.["best-practices"] * 100 | round), seo: (.seo * 100 | round), lcp: .lcp, cls: .cls, tbt: .tbt}] | sort_by(.date)' "$HISTORY_FILE")

              # Add chart data
              PAGE_TITLE=$(echo "$page_name" | tr '-' ' ' | sed 's/\b\(.\)/\u\1/g')

              CHARTS_DATA="${CHARTS_DATA}
              <section id=\"$page_name\" class=\"page-trends\">
                <h2>$PAGE_TITLE - Performance Trends</h2>
                <div class=\"chart-container\">
                  <div class=\"chart-tabs\">
                    <button class=\"tab-button active\" onclick=\"switchTab(this, '$page_name-desktop')\">Desktop</button>
                    <button class=\"tab-button\" onclick=\"switchTab(this, '$page_name-mobile')\">Mobile</button>
                  </div>
                  <div id=\"$page_name-desktop\" class=\"tab-content active\">
                    <div class=\"chart-wrapper\">
                      <canvas id=\"$page_name-desktop-scores\"></canvas>
                    </div>
                    <div class=\"chart-wrapper\">
                      <canvas id=\"$page_name-desktop-vitals\"></canvas>
                    </div>
                    <script>
                      // Desktop scores chart
                      new Chart(document.getElementById('$page_name-desktop-scores').getContext('2d'), {
                        type: 'line',
                        data: {
                          datasets: [
                            {
                              label: 'Performance',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: item.performance})),
                              borderColor: '#0cce6b',
                              backgroundColor: 'rgba(12, 206, 107, 0.1)',
                              tension: 0.4
                            },
                            {
                              label: 'Accessibility',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: item.accessibility})),
                              borderColor: '#0ea5e9',
                              backgroundColor: 'rgba(14, 165, 233, 0.1)',
                              tension: 0.4
                            },
                            {
                              label: 'Best Practices',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: item['best-practices']})),
                              borderColor: '#7c3aed',
                              backgroundColor: 'rgba(124, 58, 237, 0.1)',
                              tension: 0.4
                            },
                            {
                              label: 'SEO',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: item.seo})),
                              borderColor: '#f59e0b',
                              backgroundColor: 'rgba(245, 158, 11, 0.1)',
                              tension: 0.4
                            }
                          ]
                        },
                        options: {
                          scales: {
                            y: {
                              min: 0,
                              max: 100,
                              title: {
                                display: true,
                                text: 'Score'
                              }
                            }
                          },
                          plugins: {
                            title: {
                              display: true,
                              text: 'Lighthouse Scores - Desktop'
                            }
                          }
                        }
                      });

                      // Desktop vitals chart
                      new Chart(document.getElementById('$page_name-desktop-vitals').getContext('2d'), {
                        type: 'line',
                        data: {
                          datasets: [
                            {
                              label: 'LCP (ms)',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: Math.round(item.lcp)})),
                              borderColor: '#ef4444',
                              backgroundColor: 'rgba(239, 68, 68, 0.1)',
                              tension: 0.4,
                              yAxisID: 'y'
                            },
                            {
                              label: 'TBT (ms)',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: Math.round(item.tbt)})),
                              borderColor: '#f59e0b',
                              backgroundColor: 'rgba(245, 158, 11, 0.1)',
                              tension: 0.4,
                              yAxisID: 'y'
                            },
                            {
                              label: 'CLS',
                              data: $DESKTOP_DATA.map(item => ({x: item.date, y: item.cls})),
                              borderColor: '#0ea5e9',
                              backgroundColor: 'rgba(14, 165, 233, 0.1)',
                              tension: 0.4,
                              yAxisID: 'y1'
                            }
                          ]
                        },
                        options: {
                          scales: {
                            y: {
                              title: {
                                display: true,
                                text: 'Time (ms)'
                              },
                              position: 'left'
                            },
                            y1: {
                              position: 'right',
                              title: {
                                display: true,
                                text: 'CLS Score'
                              },
                              grid: {
                                drawOnChartArea: false
                              }
                            }
                          },
                          plugins: {
                            title: {
                              display: true,
                              text: 'Core Web Vitals - Desktop'
                            }
                          }
                        }
                      });
                    </script>
                  </div>
                  <div id=\"$page_name-mobile\" class=\"tab-content\">
                    <div class=\"chart-wrapper\">
                      <canvas id=\"$page_name-mobile-scores\"></canvas>
                    </div>
                    <div class=\"chart-wrapper\">
                      <canvas id=\"$page_name-mobile-vitals\"></canvas>
                    </div>
                    <script>
                      // Mobile scores chart
                      new Chart(document.getElementById('$page_name-mobile-scores').getContext('2d'), {
                        type: 'line',
                        data: {
                          datasets: [
                            {
                              label: 'Performance',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: item.performance})),
                              borderColor: '#0cce6b',
                              backgroundColor: 'rgba(12, 206, 107, 0.1)',
                              tension: 0.4
                            },
                            {
                              label: 'Accessibility',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: item.accessibility})),
                              borderColor: '#0ea5e9',
                              backgroundColor: 'rgba(14, 165, 233, 0.1)',
                              tension: 0.4
                            },
                            {
                              label: 'Best Practices',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: item['best-practices']})),
                              borderColor: '#7c3aed',
                              backgroundColor: 'rgba(124, 58, 237, 0.1)',
                              tension: 0.4
                            },
                            {
                              label: 'SEO',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: item.seo})),
                              borderColor: '#f59e0b',
                              backgroundColor: 'rgba(245, 158, 11, 0.1)',
                              tension: 0.4
                            }
                          ]
                        },
                        options: {
                          scales: {
                            y: {
                              min: 0,
                              max: 100,
                              title: {
                                display: true,
                                text: 'Score'
                              }
                            }
                          },
                          plugins: {
                            title: {
                              display: true,
                              text: 'Lighthouse Scores - Mobile'
                            }
                          }
                        }
                      });

                      // Mobile vitals chart
                      new Chart(document.getElementById('$page_name-mobile-vitals').getContext('2d'), {
                        type: 'line',
                        data: {
                          datasets: [
                            {
                              label: 'LCP (ms)',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: Math.round(item.lcp)})),
                              borderColor: '#ef4444',
                              backgroundColor: 'rgba(239, 68, 68, 0.1)',
                              tension: 0.4,
                              yAxisID: 'y'
                            },
                            {
                              label: 'TBT (ms)',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: Math.round(item.tbt)})),
                              borderColor: '#f59e0b',
                              backgroundColor: 'rgba(245, 158, 11, 0.1)',
                              tension: 0.4,
                              yAxisID: 'y'
                            },
                            {
                              label: 'CLS',
                              data: $MOBILE_DATA.map(item => ({x: item.date, y: item.cls})),
                              borderColor: '#0ea5e9',
                              backgroundColor: 'rgba(14, 165, 233, 0.1)',
                              tension: 0.4,
                              yAxisID: 'y1'
                            }
                          ]
                        },
                        options: {
                          scales: {
                            y: {
                              title: {
                                display: true,
                                text: 'Time (ms)'
                              },
                              position: 'left'
                            },
                            y1: {
                              position: 'right',
                              title: {
                                display: true,
                                text: 'CLS Score'
                              },
                              grid: {
                                drawOnChartArea: false
                              }
                            }
                          },
                          plugins: {
                            title: {
                              display: true,
                              text: 'Core Web Vitals - Mobile'
                            }
                          }
                        }
                      });
                    </script>
                  </div>
                </div>
              </section>"
            fi
          fi
        done

        # Generate trends HTML
        sed "s|{{CHARTS_DATA}}|$CHARTS_DATA|g" "$TEMPLATE_FILE" > "$DASHBOARD_DIR/trends.html"

        # Copy to performance-reports and root directory
        cp "$DASHBOARD_DIR/trends.html" "performance-reports/trends.html"
        cp "$DASHBOARD_DIR/trends.html" "${{ inputs.output-dir }}/trends.html"

        echo "Trends dashboard generated successfully"
