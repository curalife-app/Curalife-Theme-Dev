# This action has been simplified to avoid YAML syntax errors
# Original complex templates with heredocs and multi-line strings have been replaced with simpler inline approaches
# Last updated: 2023-06-01

name: "Generate Dashboard"
description: "Processes Lighthouse results and generates dashboard"

inputs:
  report-date:
    description: "Date for the report"
    required: true
  history-branch:
    description: "Branch name where history is stored"
    required: true

runs:
  using: "composite"
  steps:
    - name: Create performance-reports directory
      shell: bash
      run: mkdir -p performance-reports

    # Download all page reports to combine them
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: performance-reports-downloads
        pattern: "*-lighthouse-report"
        merge-multiple: true
      continue-on-error: true

    # Copy all downloaded artifacts to the performance-reports directory
    - name: Organize reports
      shell: bash
      run: |
        echo "Listing downloaded artifacts:"
        ls -la performance-reports-downloads || echo "No downloads directory found"

        # Create the performance reports directory if it doesn't exist
        mkdir -p performance-reports

        # Only try to copy if the downloads directory exists and has files
        if [ -d "performance-reports-downloads" ] && [ "$(ls -A performance-reports-downloads 2>/dev/null)" ]; then
          echo "Copying artifacts to performance-reports directory"
          cp -R performance-reports-downloads/* performance-reports/ || echo "No files to copy"
        else
          echo "No artifacts found to copy"
          # Create sample data with a simple approach
          mkdir -p performance-reports/$(date +"%Y-%m-%d")/sample
          CURRENT_DATE=$(date +"%Y-%m-%d")

          echo "Creating sample data file at performance-reports/$CURRENT_DATE/sample/summary.json"
          echo '{
            "page": "sample",
            "url": "https://example.com",
            "date": "'$CURRENT_DATE'",
            "desktop": {
              "performance": 90,
              "accessibility": 90,
              "bestPractices": 90,
              "seo": 90
            },
            "mobile": {
              "performance": 85,
              "accessibility": 90,
              "bestPractices": 90,
              "seo": 90
            }
          }' > performance-reports/$CURRENT_DATE/sample/summary.json
        fi

        # Check if there are any files in the performance-reports directory
        echo "Contents of performance-reports directory:"
        find performance-reports -type f | sort || echo "No files found in performance-reports"

    # Fetch historical data from the dedicated branch
    - name: Fetch historical data
      id: fetch-history
      shell: bash
      run: |
        CURRENT_DATE="${{ inputs.report-date }}"
        if [ -z "$CURRENT_DATE" ]; then
          CURRENT_DATE=$(date +"%Y-%m-%d")
        fi
        echo "report_date=$CURRENT_DATE" >> $GITHUB_OUTPUT

        # Check if history branch exists
        if git fetch --all && git ls-remote --heads origin ${{ inputs.history-branch }} | grep ${{ inputs.history-branch }}; then
          echo "History branch exists, fetching data..."
          git checkout ${{ inputs.history-branch }} || git checkout -b ${{ inputs.history-branch }}
          # Create history directory if it doesn't exist
          mkdir -p performance-reports/history

          # Move back to the original branch to continue workflow
          git checkout -
          # Copy history data to the current workspace
          if [ -d ".git/refs/remotes/origin/${{ inputs.history-branch }}" ]; then
            git checkout ${{ inputs.history-branch }} -- performance-reports/history || echo "No history data found"
            git checkout - || echo "Failed to checkout previous branch"
          fi
        else
          echo "History branch does not exist, creating it..."
          git checkout -b ${{ inputs.history-branch }} || echo "Failed to create history branch"
          mkdir -p performance-reports/history
          git checkout - || echo "Failed to checkout previous branch"
        fi

        # Make sure the history directory exists
        mkdir -p performance-reports/history

    # Process historical data
    - name: Process historical data
      shell: bash
      run: |
        # Make the script executable
        chmod +x .github/workflows/scripts/store-historical-data.sh

        # Run the script to process data
        .github/workflows/scripts/store-historical-data.sh "${{ steps.fetch-history.outputs.report_date }}"
      continue-on-error: true

    # Generate the trend dashboard
    - name: Generate trend dashboard
      shell: bash
      run: |
        # Make the script executable
        chmod +x .github/workflows/scripts/generate-trend-dashboard.sh

        # Run the script to generate the dashboard
        .github/workflows/scripts/generate-trend-dashboard.sh "${{ steps.fetch-history.outputs.report_date }}"
      continue-on-error: true

    # Generate the HTML dashboard
    - name: Generate HTML dashboard
      shell: bash
      run: |
        CURRENT_DATE="${{ steps.fetch-history.outputs.report_date }}"
        if [ -z "$CURRENT_DATE" ]; then
          CURRENT_DATE=$(date +"%Y-%m-%d")
        fi

        echo "Generating dashboard for date: $CURRENT_DATE"

        # Ensure the directory exists
        mkdir -p performance-reports

        # Run with bash -e to exit immediately on error
        bash -e .github/workflows/scripts/generate-dashboard.sh "$CURRENT_DATE" || {
          echo "Error generating dashboard, creating fallback..."

          # Create a simple fallback dashboard
          echo '<!DOCTYPE html><html><head><title>Lighthouse Dashboard</title><style>body{font-family:system-ui,sans-serif;max-width:1200px;margin:0 auto;padding:20px;line-height:1.6;color:#333}h1{color:#4285f4;margin-bottom:20px}.alert{background:#f8d7da;border-left:4px solid #dc3545;padding:15px;margin-bottom:20px}.card{border:1px solid #dee2e6;border-radius:8px;margin-bottom:20px}.card-header{background:#f8f9fa;padding:10px 15px;border-bottom:1px solid #dee2e6}.card-body{padding:15px}.text-center{text-align:center}</style></head><body><h1>Lighthouse Performance Dashboard</h1><div class="alert"><h2>Dashboard Generation Issue</h2><p>The performance dashboard could not be generated properly. This may be due to:</p><ul><li>No test results found</li><li>Error during test execution</li><li>Temporary network issues</li></ul><p>Please check workflow logs for details or try running the workflow again.</p></div><div class="card"><div class="card-header">About Lighthouse CI</div><div class="card-body"><p>Lighthouse CI helps monitor website performance metrics over time, including Core Web Vitals and other important metrics.</p></div></div><div class="text-center"><p>Generated by Lighthouse CI GitHub Action</p></div></body></html>' > performance-reports/index.html

          echo "Created fallback dashboard"
        }

        echo "Dashboard file generation complete"

        # Create index.html if no dashboard exists
        if [ ! -f "performance-reports/index.html" ]; then
          echo "index.html not found! Creating a standard one..."
          echo '<!DOCTYPE html><html><head><title>Lighthouse Dashboard</title><style>body{font-family:system-ui,sans-serif;max-width:800px;margin:0 auto;padding:20px}h1{color:#2c3e50;border-bottom:2px solid #eee;padding-bottom:10px}.status{background:#f8f9fa;border-left:4px solid #4caf50;padding:15px;margin:20px 0}.error{border-left-color:#f44336}</style></head><body><h1>Lighthouse Performance Dashboard</h1><div class="status"><h2>Dashboard Content</h2><p>No performance data is available at this time.</p></div></body></html>' > performance-reports/index.html
        else
          echo "index.html exists at $(pwd)/performance-reports/index.html"
          ls -la performance-reports/index.html
        fi

        # Add link to trends dashboard on main dashboard page if both files exist
        if [ -f "performance-reports/index.html" ] && [ -f "performance-reports/trends.html" ]; then
          echo "Adding trends dashboard link..."
          sed -i 's/<\/body>/<div style="text-align: center; margin-top: 30px;"><a href="trends.html" style="display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 4px; font-weight: bold;">View Performance Trends<\/a><\/div><\/body>/' performance-reports/index.html
        fi

        # Final verification
        echo "Final directory contents:"
        ls -la performance-reports/

    # Generate the GitHub Step Summary
    - name: Generate GitHub Step Summary
      shell: bash
      run: |
        # Create a basic step summary header
        echo "## Lighthouse Performance Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Summary Results ($(date))" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check if there are any summary files to process
        SUMMARY_FILES=$(find performance-reports -name "summary.json" | wc -l)

        if [ "$SUMMARY_FILES" -eq "0" ]; then
          echo "No summary files found to process" >> $GITHUB_STEP_SUMMARY
        else
          echo "Found $SUMMARY_FILES summary files to process"
          echo "#### Desktop Results" >> $GITHUB_STEP_SUMMARY
          echo "| Page | Performance | Accessibility | Best Practices | SEO |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------------|---------------|----------------|-----|" >> $GITHUB_STEP_SUMMARY

          # Process summary files for desktop results
          find performance-reports -name "summary.json" | sort | while read -r file; do
            PAGE_NAME=$(grep -o '"page": *"[^"]*"' "$file" | cut -d'"' -f4 || echo "unknown")
            PERF=$(grep -o '"performance": *[0-9.]*' "$file" | grep -o '[0-9.]*' || echo "0")
            A11Y=$(grep -o '"accessibility": *[0-9.]*' "$file" | grep -o '[0-9.]*' || echo "0")
            BP=$(grep -o '"bestPractices": *[0-9.]*' "$file" | grep -o '[0-9.]*' || echo "0")
            SEO=$(grep -o '"seo": *[0-9.]*' "$file" | grep -o '[0-9.]*' || echo "0")
            echo "| $PAGE_NAME | $PERF | $A11Y | $BP | $SEO |" >> $GITHUB_STEP_SUMMARY
          done
        fi

    # Add PR annotations if running in a PR context
    - name: Add PR annotations
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        # Find all summary.json files
        find performance-reports -name "summary.json" | sort | while read -r file; do
          PAGE_NAME=$(grep -o '"page": *"[^"]*"' "$file" | cut -d'"' -f4 || echo "unknown")
          PERF=$(grep -o '"performance": *[0-9.]*' "$file" | grep -o '[0-9.]*' || echo "0")

          # Add annotations based on performance score
          if (( $(echo "$PERF < 75" | bc -l) )); then
            echo "::warning file=${PAGE_NAME}::Performance score is poor: ${PERF}%"
          elif (( $(echo "$PERF < 90" | bc -l) )); then
            echo "::notice file=${PAGE_NAME}::Performance score needs improvement: ${PERF}%"
          fi
        done
      continue-on-error: true

    # Save historical data
    - name: Save historical data
      shell: bash
      run: |
        # Check if there are any files to save
        if [ -d "performance-reports/history" ]; then
          # Configure Git for history branch
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

          # Create or checkout history branch
          git checkout ${{ inputs.history-branch }} 2>/dev/null || git checkout -b ${{ inputs.history-branch }}

          # Copy historical data
          mkdir -p performance-reports/history
          cp -R performance-reports/history/* performance-reports/history/ 2>/dev/null || echo "No previous history to copy"

          # Add and commit changes
          git add performance-reports/history
          git commit -m "Update historical data [skip ci]" || echo "No changes to commit"
          git push origin ${{ inputs.history-branch }} || echo "Failed to push history branch"

          # Return to previous branch
          git checkout -
        else
          echo "No history directory found, skipping historical data save"
        fi
      continue-on-error: true
