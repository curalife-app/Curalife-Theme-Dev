name: "Setup Environment"
description: "Sets up Node.js and installs system dependencies"

inputs:
  cache-key-prefix:
    description: "Prefix for the system dependencies cache key"
    required: true
  npm-cache-key:
    description: "Cache key for npm global packages"
    required: true
  puppeteer-cache-key:
    description: "Cache key for Puppeteer"
    required: false
  tools-cache-key:
    description: "Cache key for tools"
    required: false

runs:
  using: "composite"
  steps:
    # Setup Node.js first
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: "npm"
        cache-dependency-path: "package-lock.json"

    # Consolidated cache for all tools and dependencies
    - name: Cache all dependencies
      uses: actions/cache@v4
      id: cache-all-deps
      with:
        path: |
          ~/.cache/apt
          ~/.apt-cache
          ~/.cache/tools
          ~/.cache/puppeteer
          ~/.npm
        key: ${{ inputs.cache-key-prefix }}
        restore-keys: |
          ${{ inputs.cache-key-prefix }}-
          ${{ runner.os }}-deps-

    - name: Cache log and report
      shell: bash
      run: |
        echo "Cache hit status: ${{ steps.cache-all-deps.outputs.cache-hit }}"
        mkdir -p ~/.cache/logs
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" == "true" ]; then
          echo "Using cached dependencies from key: ${{ inputs.cache-key-prefix }}" > ~/.cache/logs/cache-status.log
          echo "Cache hit timestamp: $(date)" >> ~/.cache/logs/cache-status.log
        else
          echo "Cache miss for key: ${{ inputs.cache-key-prefix }}" > ~/.cache/logs/cache-status.log
          echo "Building new cache at: $(date)" >> ~/.cache/logs/cache-status.log
        fi

    - name: Install tools and dependencies
      shell: bash
      run: |
        echo "Installing system dependencies and tools..."

        # Create necessary directories
        mkdir -p ~/.cache/apt ~/.apt-cache ~/.cache/tools ~/.cache/puppeteer

        # Install apt packages conditionally
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss - installing apt packages from scratch"
          sudo apt-get update && sudo apt-get install -y jq bc
        else
          echo "Cache hit - using cached apt packages when possible"
          sudo apt-get install -y jq bc --no-update
        fi

        echo "Installing global npm packages..."
        # Only install if not already installed or cache miss
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" != "true" ] || ! command -v lighthouse &> /dev/null; then
          npm install -g @lhci/cli puppeteer lighthouse puppeteer-screenshot-cli
        else
          echo "Using cached npm global packages"
        fi

        # Set up Chrome if needed
        if [ ! -f ~/.cache/puppeteer/installed ]; then
          echo "Setting up Puppeteer/Chrome..."
          npx puppeteer install chrome
          touch ~/.cache/puppeteer/installed
        else
          echo "Using cached Puppeteer/Chrome installation"
        fi

    - name: Set Chrome flags
      shell: bash
      run: |
        echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless --disable-extensions" >> $GITHUB_ENV
