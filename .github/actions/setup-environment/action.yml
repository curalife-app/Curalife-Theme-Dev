name: "Setup Environment"
description: "Sets up Node.js and installs system dependencies"

inputs:
  cache-key-prefix:
    description: "Prefix for the system dependencies cache key"
    required: true
  npm-cache-key:
    description: "Cache key for npm global packages"
    required: true
  puppeteer-cache-key:
    description: "Cache key for Puppeteer"
    required: false
  tools-cache-key:
    description: "Cache key for tools"
    required: false

runs:
  using: "composite"
  steps:
    # Setup Node.js first
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    # Ensure cache directories exist
    - name: Create cache directories
      shell: bash
      run: |
        mkdir -p /home/runner/.cache/apt
        mkdir -p /home/runner/.apt-cache
        mkdir -p /home/runner/.cache/tools
        mkdir -p /home/runner/.cache/puppeteer
        mkdir -p /home/runner/.cache/logs
        mkdir -p /home/runner/.npm

    # Consolidated cache for all tools and dependencies
    - name: Cache all dependencies
      uses: actions/cache@v4
      id: cache-all-deps
      with:
        path: |
          /home/runner/.cache/apt
          /home/runner/.apt-cache
          /home/runner/.cache/tools
          /home/runner/.cache/puppeteer
          /home/runner/.npm
        key: ${{ inputs.cache-key-prefix }}
        restore-keys: |
          ${{ inputs.cache-key-prefix }}

    - name: Cache log and report
      shell: bash
      run: |
        echo "Cache hit status: ${{ steps.cache-all-deps.outputs.cache-hit }}"
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" == "true" ]; then
          echo "Using cached dependencies from key: ${{ inputs.cache-key-prefix }}" > /home/runner/.cache/logs/cache-status.log
          echo "Cache hit timestamp: $(date)" >> /home/runner/.cache/logs/cache-status.log
        else
          echo "Cache miss for key: ${{ inputs.cache-key-prefix }}" > /home/runner/.cache/logs/cache-status.log
          echo "Building new cache at: $(date)" >> /home/runner/.cache/logs/cache-status.log
        fi

    - name: Install tools and dependencies
      shell: bash
      run: |
        echo "Installing system dependencies and tools..."

        # Install apt packages conditionally
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss - installing apt packages from scratch"
          sudo apt-get update && sudo apt-get install -y jq bc
        else
          echo "Cache hit - using cached apt packages when possible"
          sudo apt-get install -y jq bc --no-update
        fi

        echo "Installing global npm packages..."
        # Only install if not already installed or cache miss
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" != "true" ] || ! command -v lighthouse &> /dev/null; then
          npm config set cache /home/runner/.npm --global
          npm install -g @lhci/cli lighthouse puppeteer-screenshot-cli
        else
          echo "Using cached npm global packages"
        fi

    # Install Puppeteer in a dedicated step with a local approach
    - name: Setup Puppeteer
      shell: bash
      run: |
        echo "Setting up Puppeteer with reliable local installation..."
        # Create a temporary directory for Puppeteer setup
        PUPPETEER_DIR=$(mktemp -d)
        cd $PUPPETEER_DIR

        # Create a package.json
        echo '{
          "name": "puppeteer-setup",
          "version": "1.0.0",
          "description": "Puppeteer setup",
          "main": "index.js",
          "dependencies": {
            "puppeteer": "19.11.1"
          }
        }' > package.json

        # Install Puppeteer locally in this directory
        echo "Installing Puppeteer locally..."
        export PUPPETEER_CACHE_DIR=/home/runner/.cache/puppeteer
        export PUPPETEER_DOWNLOAD_PATH=/home/runner/.cache/puppeteer
        npm install --no-fund --no-audit

        # Verify installation works
        echo "Verifying Puppeteer installation..."
        node -e "
        const puppeteer = require('puppeteer');
        async function testPuppeteer() {
          console.log('Testing Puppeteer installation...');
          const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-dev-shm-usage']
          });
          console.log('Successfully launched browser');
          await browser.close();
          console.log('Puppeteer verification successful');
        }
        testPuppeteer().catch(err => {
          console.error('Puppeteer test failed:', err);
          process.exit(1);
        });"

        # If we get here, Puppeteer works - install it globally for the main workflow
        echo "Puppeteer local installation verified. Installing globally..."
        cd -
        npm install -g puppeteer@19.11.1

        # Mark as installed
        mkdir -p /home/runner/.cache/puppeteer/
        touch /home/runner/.cache/puppeteer/installed

        # Clean up
        rm -rf $PUPPETEER_DIR

    - name: Set Chrome flags
      shell: bash
      run: |
        echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless --disable-extensions" >> $GITHUB_ENV
