name: "Setup Environment"
description: "Sets up Node.js and installs all dependencies needed for Lighthouse CI"

inputs:
  node-version:
    description: "Node.js version to use"
    required: false
    default: "18"
  cache-dependencies:
    description: "Whether to cache dependencies"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    # Check for dependency lock files first
    - name: Check for dependency files
      id: check-deps
      shell: bash
      run: |
        echo "Checking for dependency lock files..."
        if [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ] || [ -f "yarn.lock" ]; then
          echo "Lock file found, will enable caching"
          echo "has_lockfile=true" >> $GITHUB_OUTPUT
        else
          echo "No lock file found, will skip dependency caching"
          echo "has_lockfile=false" >> $GITHUB_OUTPUT
        fi

    # Setup Node with caching only if lock file exists
    - name: Setup Node.js with cache
      if: inputs.cache-dependencies == 'true' && steps.check-deps.outputs.has_lockfile == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: "npm"

    # Setup Node without caching if no lock file exists
    - name: Setup Node.js without cache
      if: inputs.cache-dependencies != 'true' || steps.check-deps.outputs.has_lockfile != 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    # Install system dependencies with caching
    - name: Cache system dependencies
      id: cache-sys-deps
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/apt
          ~/.apt-cache
        key: ${{ runner.os }}-apt-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    # Install jq and bc (for data processing)
    - name: Install system tools
      shell: bash
      run: |
        echo "Installing system tools..."
        # Create cache directories if needed
        mkdir -p ~/.cache/apt ~/.apt-cache

        # Install required tools
        sudo apt-get update && sudo apt-get install -y jq bc

    # Install Puppeteer with Chrome
    - name: Cache Puppeteer & Chrome
      id: cache-puppeteer
      if: inputs.cache-dependencies == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.cache/puppeteer
        key: ${{ runner.os }}-puppeteer-${{ hashFiles('**/package.json') }}

    # Create Puppeteer cache directory
    - name: Setup Puppeteer
      shell: bash
      run: |
        echo "Setting up Puppeteer..."
        mkdir -p ~/.cache/puppeteer
        echo "PUPPETEER_CACHE_DIR=~/.cache/puppeteer" >> $GITHUB_ENV
        echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless" >> $GITHUB_ENV

    # Install global dependencies
    - name: Install global dependencies
      shell: bash
      run: |
        echo "Installing global dependencies..."
        npm install -g @lhci/cli lighthouse puppeteer-core

    # Check for package.json and install local dependencies if available
    - name: Install local dependencies
      shell: bash
      run: |
        if [ -f "package.json" ]; then
          if [ -f "package-lock.json" ]; then
            echo "Installing dependencies with npm ci..."
            npm ci
          else
            echo "Installing dependencies with npm install..."
            npm install
          fi
        else
          echo "No package.json found. Skipping local dependency installation."
          echo "Using global Lighthouse installation for testing."
        fi

    # Verify installation
    - name: Verify installation
      shell: bash
      run: |
        echo "Verifying installation..."
        node --version
        npm --version
        npx lighthouse --version || lighthouse --version || echo "Lighthouse not installed correctly"
        npx lhci --version || lhci --version || echo "LHCI not installed correctly"
