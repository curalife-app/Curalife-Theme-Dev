name: "Setup Environment"
description: "Sets up Node.js and installs system dependencies"

inputs:
  cache-key-prefix:
    description: "Prefix for the system dependencies cache key"
    required: true
  npm-cache-key:
    description: "Cache key for npm global packages"
    required: true
  puppeteer-cache-key:
    description: "Cache key for Puppeteer"
    required: false
  tools-cache-key:
    description: "Cache key for tools"
    required: false

runs:
  using: "composite"
  steps:
    # Setup Node.js first
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    # Ensure cache directories exist
    - name: Create cache directories
      shell: bash
      run: |
        mkdir -p /home/runner/.cache/apt
        mkdir -p /home/runner/.apt-cache
        mkdir -p /home/runner/.cache/tools
        mkdir -p /home/runner/.cache/puppeteer
        mkdir -p /home/runner/.cache/logs
        mkdir -p /home/runner/.npm

    # Consolidated cache for all tools and dependencies
    - name: Cache all dependencies
      uses: actions/cache@v4
      id: cache-all-deps
      with:
        path: |
          /home/runner/.cache/apt
          /home/runner/.apt-cache
          /home/runner/.cache/tools
          /home/runner/.cache/puppeteer
          /home/runner/.npm
        key: ${{ inputs.cache-key-prefix }}
        restore-keys: |
          ${{ inputs.cache-key-prefix }}

    - name: Cache log and report
      shell: bash
      run: |
        echo "Cache hit status: ${{ steps.cache-all-deps.outputs.cache-hit }}"
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" == "true" ]; then
          echo "Using cached dependencies from key: ${{ inputs.cache-key-prefix }}" > /home/runner/.cache/logs/cache-status.log
          echo "Cache hit timestamp: $(date)" >> /home/runner/.cache/logs/cache-status.log
        else
          echo "Cache miss for key: ${{ inputs.cache-key-prefix }}" > /home/runner/.cache/logs/cache-status.log
          echo "Building new cache at: $(date)" >> /home/runner/.cache/logs/cache-status.log
        fi

    - name: Install tools and dependencies
      shell: bash
      run: |
        echo "Installing system dependencies and tools..."

        # Install apt packages conditionally
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" != "true" ]; then
          echo "Cache miss - installing apt packages from scratch"
          sudo apt-get update && sudo apt-get install -y jq bc
        else
          echo "Cache hit - using cached apt packages when possible"
          sudo apt-get install -y jq bc --no-update
        fi

        echo "Installing global npm packages..."
        # Only install if not already installed or cache miss
        if [ "${{ steps.cache-all-deps.outputs.cache-hit }}" != "true" ] || ! command -v lighthouse &> /dev/null; then
          npm config set cache /home/runner/.npm --global
          npm install -g @lhci/cli lighthouse puppeteer-screenshot-cli
        else
          echo "Using cached npm global packages"
        fi

    # Complete Puppeteer setup with local installation approach
    - name: Install Puppeteer with Chromium
      shell: bash
      run: |
        echo "Setting up Puppeteer with comprehensive installation approach..."

        # Create a workspace directory for local Puppeteer installation
        WORKSPACE_DIR="/home/runner/work/puppeteer-setup"
        mkdir -p $WORKSPACE_DIR
        cd $WORKSPACE_DIR

        # Create package.json for local installation
        echo '{
          "name": "puppeteer-setup",
          "version": "1.0.0",
          "description": "Puppeteer setup for workflow",
          "main": "index.js",
          "dependencies": {
            "puppeteer": "19.11.1"
          }
        }' > package.json

        # Install Puppeteer locally with explicit cache locations
        echo "Installing Puppeteer locally..."
        export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false
        export PUPPETEER_DOWNLOAD_PATH="/home/runner/.cache/puppeteer"
        npm install

        # Install Chromium browser
        echo "Installing Chrome browser..."
        npx puppeteer browsers install chrome

        # Create a script to verify installation
        echo "const puppeteer = require('puppeteer');
        async function verify() {
          try {
            console.log('Puppeteer executable path:', puppeteer.executablePath());

            console.log('Launching browser...');
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            console.log('Creating page...');
            const page = await browser.newPage();

            console.log('Closing browser...');
            await browser.close();

            console.log('Verification successful');
            return true;
          } catch (err) {
            console.error('Verification failed:', err);
            return false;
          }
        }

        verify().then(success => {
          process.exit(success ? 0 : 1);
        });" > verify.js

        # Run verification
        echo "Verifying Puppeteer installation..."
        node verify.js

        # Create a symlink to ensure it's available in PATH
        echo "Linking Puppeteer to ensure availability..."
        sudo npm link puppeteer

        # Install globally as well to ensure it's available in all contexts
        npm install -g puppeteer@19.11.1

        # Create a simple script that exports the Chrome path
        echo "Creating chrome-path helper..."
        echo "#!/usr/bin/env node
        const puppeteer = require('puppeteer');
        console.log(puppeteer.executablePath());" > /home/runner/.cache/puppeteer/chrome-path.js
        chmod +x /home/runner/.cache/puppeteer/chrome-path.js

        # Mark as installed
        touch /home/runner/.cache/puppeteer/installed

        # Save Chrome path for future steps
        CHROME_PATH=$(node /home/runner/.cache/puppeteer/chrome-path.js || node -e "console.log(require('puppeteer').executablePath())")
        echo "CHROME_PATH=$CHROME_PATH" > /home/runner/.cache/puppeteer/chrome-path.env
        echo "Chrome executable path: $CHROME_PATH"

        # Going back to original directory
        cd -

    - name: Set environment variables
      shell: bash
      run: |
        echo "CHROME_FLAGS=--no-sandbox --disable-dev-shm-usage --disable-gpu --headless --disable-extensions" >> $GITHUB_ENV
        echo "PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false" >> $GITHUB_ENV
        echo "PUPPETEER_DOWNLOAD_PATH=/home/runner/.cache/puppeteer" >> $GITHUB_ENV

        # Load Chrome path from the saved file
        if [ -f "/home/runner/.cache/puppeteer/chrome-path.env" ]; then
          source /home/runner/.cache/puppeteer/chrome-path.env
          echo "CHROME_PATH=$CHROME_PATH" >> $GITHUB_ENV
        fi
