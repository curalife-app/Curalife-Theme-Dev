name: "Run Lighthouse Tests"
description: "Runs Lighthouse performance tests against specified URLs"

inputs:
  base-url:
    description: "Base URL to test"
    required: true
    default: "https://curalife.com"
  custom-pages:
    description: "Comma-separated list of pages to test (no leading slashes)"
    required: false
    default: ""
  lighthouse-dir:
    description: "Directory to store Lighthouse results"
    required: true
  retry-count:
    description: "Number of times to retry a failed test"
    required: false
    default: "2"
  budget-path:
    description: "Path to budget.json file for Lighthouse"
    required: false
    default: ""

outputs:
  all-passed:
    description: "Whether all tests passed successfully"
    value: ${{ steps.check-results.outputs.all_passed }}

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: Install Lighthouse CI
      shell: bash
      run: |
        echo "Installing Lighthouse CI..."
        npm install -g @lhci/cli puppeteer lighthouse

    - name: Prepare test directories
      id: prepare-dirs
      shell: bash
      run: |
        echo "Setting up test directories..."
        LIGHTHOUSE_DIR="${{ inputs.lighthouse-dir }}"
        mkdir -p "$LIGHTHOUSE_DIR/desktop"
        mkdir -p "$LIGHTHOUSE_DIR/mobile"

        # Define default pages if custom pages are not provided
        if [ -z "${{ inputs.custom-pages }}" ]; then
          echo "Using default pages"
          DEFAULT_PAGES="home,products/curalin"
          echo "pages=$DEFAULT_PAGES" >> $GITHUB_OUTPUT
        else
          echo "Using custom pages"
          echo "pages=${{ inputs.custom-pages }}" >> $GITHUB_OUTPUT
        fi

    - name: Parse pages for testing
      id: parse-pages
      shell: bash
      run: |
        # Create page directories
        LIGHTHOUSE_DIR="${{ inputs.lighthouse-dir }}"
        PAGES="${{ steps.prepare-dirs.outputs.pages }}"

        # Remove spaces if present and replace commas with newlines
        PAGES_LIST=$(echo "$PAGES" | tr -d ' ' | tr ',' '\n')

        # Create directories and store formatted page names
        FORMATTED_PAGES=""
        while IFS= read -r page; do
          if [ -n "$page" ]; then
            # Convert page path to safe directory name (replace slashes with hyphens)
            DIR_NAME=$(echo "$page" | tr '/' '-')
            PAGE_PATH="$page"

            mkdir -p "$LIGHTHOUSE_DIR/desktop/$DIR_NAME"
            mkdir -p "$LIGHTHOUSE_DIR/mobile/$DIR_NAME"
            echo "Prepared directories for page: $page (as $DIR_NAME)"

            # Build formatted pages list
            if [ -z "$FORMATTED_PAGES" ]; then
              FORMATTED_PAGES="$PAGE_PATH:$DIR_NAME"
            else
              FORMATTED_PAGES="$FORMATTED_PAGES,$PAGE_PATH:$DIR_NAME"
            fi
          fi
        done <<< "$PAGES_LIST"

        # Store parsed pages for future steps
        echo "formatted_pages=$FORMATTED_PAGES" >> $GITHUB_OUTPUT

    - name: Run Desktop Tests
      shell: bash
      run: |
        LIGHTHOUSE_DIR="${{ inputs.lighthouse-dir }}"
        BASE_URL="${{ inputs.base-url }}"
        FORMATTED_PAGES="${{ steps.parse-pages.outputs.formatted_pages }}"
        RETRY_COUNT="${{ inputs.retry-count }}"

        # Process budget input if provided
        BUDGET_PARAM=""
        if [ -n "${{ inputs.budget-path }}" ] && [ -f "${{ inputs.budget-path }}" ]; then
          BUDGET_PARAM="--budget-path=${{ inputs.budget-path }}"
        fi

        echo "Running desktop tests..."

        # Parse formatted pages (PATH:DIR_NAME format)
        IFS=',' read -ra PAGE_ARRAY <<< "$FORMATTED_PAGES"
        for page_entry in "${PAGE_ARRAY[@]}"; do
          # Split into path and directory name
          IFS=':' read -ra PARTS <<< "$page_entry"
          PAGE_PATH="${PARTS[0]}"
          DIR_NAME="${PARTS[1]}"

          if [ -n "$PAGE_PATH" ] && [ -n "$DIR_NAME" ]; then
            PAGE_URL="$BASE_URL/$PAGE_PATH"
            OUTPUT_DIR="$LIGHTHOUSE_DIR/desktop/$DIR_NAME"

            echo "Testing desktop: $PAGE_URL (dir: $DIR_NAME)"
            for i in $(seq 0 $RETRY_COUNT); do
              if [ $i -gt 0 ]; then
                echo "Retry attempt $i for $PAGE_URL"
              fi

              # Run Lighthouse test
              lighthouse "$PAGE_URL" \
                --preset=desktop \
                --chrome-flags="--headless --no-sandbox --disable-gpu" \
                --output=html,json \
                --output-path="$OUTPUT_DIR/desktop" \
                $BUDGET_PARAM \
                --quiet

              # Check if the test produced valid results
              if [ -f "$OUTPUT_DIR/desktop.report.json" ]; then
                # Verify performance score exists and is not zero/null
                PERF_SCORE=$(jq -r '.categories.performance.score' "$OUTPUT_DIR/desktop.report.json" 2>/dev/null || echo "-1")
                if [ "$PERF_SCORE" != "0" ] && [ "$PERF_SCORE" != "null" ] && [ "$PERF_SCORE" != "-1" ]; then
                  echo "✅ Desktop test for $PAGE_PATH completed successfully"
                  break
                else
                  echo "⚠️ Test completed but produced invalid results, retrying..."
                  sleep 2
                fi
              else
                echo "⚠️ Test failed to produce a report, retrying..."
                sleep 2
              fi

              # If this was the last retry and it failed
              if [ $i -eq $RETRY_COUNT ] && [ ! -f "$OUTPUT_DIR/desktop.report.json" ]; then
                echo "::warning::All retries failed for desktop test of $PAGE_PATH"
              fi
            done
          fi
        done

    - name: Run Mobile Tests
      shell: bash
      run: |
        LIGHTHOUSE_DIR="${{ inputs.lighthouse-dir }}"
        BASE_URL="${{ inputs.base-url }}"
        FORMATTED_PAGES="${{ steps.parse-pages.outputs.formatted_pages }}"
        RETRY_COUNT="${{ inputs.retry-count }}"

        # Process budget input if provided
        BUDGET_PARAM=""
        if [ -n "${{ inputs.budget-path }}" ] && [ -f "${{ inputs.budget-path }}" ]; then
          BUDGET_PARAM="--budget-path=${{ inputs.budget-path }}"
        fi

        echo "Running mobile tests..."

        # Parse formatted pages (PATH:DIR_NAME format)
        IFS=',' read -ra PAGE_ARRAY <<< "$FORMATTED_PAGES"
        for page_entry in "${PAGE_ARRAY[@]}"; do
          # Split into path and directory name
          IFS=':' read -ra PARTS <<< "$page_entry"
          PAGE_PATH="${PARTS[0]}"
          DIR_NAME="${PARTS[1]}"

          if [ -n "$PAGE_PATH" ] && [ -n "$DIR_NAME" ]; then
            PAGE_URL="$BASE_URL/$PAGE_PATH"
            OUTPUT_DIR="$LIGHTHOUSE_DIR/mobile/$DIR_NAME"

            echo "Testing mobile: $PAGE_URL (dir: $DIR_NAME)"
            for i in $(seq 0 $RETRY_COUNT); do
              if [ $i -gt 0 ]; then
                echo "Retry attempt $i for $PAGE_URL"
              fi

              # Run Lighthouse test
              lighthouse "$PAGE_URL" \
                --preset=mobile \
                --chrome-flags="--headless --no-sandbox --disable-gpu" \
                --output=html,json \
                --output-path="$OUTPUT_DIR/mobile" \
                $BUDGET_PARAM \
                --quiet

              # Check if the test produced valid results
              if [ -f "$OUTPUT_DIR/mobile.report.json" ]; then
                # Verify performance score exists and is not zero/null
                PERF_SCORE=$(jq -r '.categories.performance.score' "$OUTPUT_DIR/mobile.report.json" 2>/dev/null || echo "-1")
                if [ "$PERF_SCORE" != "0" ] && [ "$PERF_SCORE" != "null" ] && [ "$PERF_SCORE" != "-1" ]; then
                  echo "✅ Mobile test for $PAGE_PATH completed successfully"
                  break
                else
                  echo "⚠️ Test completed but produced invalid results, retrying..."
                  sleep 2
                fi
              else
                echo "⚠️ Test failed to produce a report, retrying..."
                sleep 2
              fi

              # If this was the last retry and it failed
              if [ $i -eq $RETRY_COUNT ] && [ ! -f "$OUTPUT_DIR/mobile.report.json" ]; then
                echo "::warning::All retries failed for mobile test of $PAGE_PATH"
              fi
            done
          fi
        done

    - name: Check results
      id: check-results
      shell: bash
      run: |
        LIGHTHOUSE_DIR="${{ inputs.lighthouse-dir }}"
        FORMATTED_PAGES="${{ steps.parse-pages.outputs.formatted_pages }}"
        ALL_PASSED="true"

        # Count total tests and successful tests
        TOTAL_TESTS=0
        SUCCESSFUL_TESTS=0

        echo "Checking test results..."

        # Parse formatted pages (PATH:DIR_NAME format)
        IFS=',' read -ra PAGE_ARRAY <<< "$FORMATTED_PAGES"
        for page_entry in "${PAGE_ARRAY[@]}"; do
          # Split into path and directory name
          IFS=':' read -ra PARTS <<< "$page_entry"
          PAGE_PATH="${PARTS[0]}"
          DIR_NAME="${PARTS[1]}"

          if [ -n "$DIR_NAME" ]; then
            DESKTOP_REPORT="$LIGHTHOUSE_DIR/desktop/$DIR_NAME/desktop.report.json"
            MOBILE_REPORT="$LIGHTHOUSE_DIR/mobile/$DIR_NAME/mobile.report.json"

            TOTAL_TESTS=$((TOTAL_TESTS + 2))  # One for desktop, one for mobile

            # Check if desktop report exists and is valid
            if [ -f "$DESKTOP_REPORT" ]; then
              PERF_SCORE=$(jq -r '.categories.performance.score' "$DESKTOP_REPORT" 2>/dev/null || echo "-1")
              if [ "$PERF_SCORE" != "0" ] && [ "$PERF_SCORE" != "null" ] && [ "$PERF_SCORE" != "-1" ]; then
                SUCCESSFUL_TESTS=$((SUCCESSFUL_TESTS + 1))
              else
                ALL_PASSED="false"
              fi
            else
              ALL_PASSED="false"
            fi

            # Check if mobile report exists and is valid
            if [ -f "$MOBILE_REPORT" ]; then
              PERF_SCORE=$(jq -r '.categories.performance.score' "$MOBILE_REPORT" 2>/dev/null || echo "-1")
              if [ "$PERF_SCORE" != "0" ] && [ "$PERF_SCORE" != "null" ] && [ "$PERF_SCORE" != "-1" ]; then
                SUCCESSFUL_TESTS=$((SUCCESSFUL_TESTS + 1))
              else
                ALL_PASSED="false"
              fi
            else
              ALL_PASSED="false"
            fi
          fi
        done

        # Report results
        echo "Total tests: $TOTAL_TESTS"
        echo "Successful tests: $SUCCESSFUL_TESTS"

        if [ "$SUCCESSFUL_TESTS" -eq 0 ]; then
          echo "::error::All Lighthouse tests failed!"
          echo "all_passed=false" >> $GITHUB_OUTPUT
          exit 1
        elif [ "$ALL_PASSED" = "false" ]; then
          echo "::warning::Some Lighthouse tests failed ($SUCCESSFUL_TESTS out of $TOTAL_TESTS successful)"
          echo "all_passed=false" >> $GITHUB_OUTPUT
        else
          echo "✅ All Lighthouse tests completed successfully"
          echo "all_passed=true" >> $GITHUB_OUTPUT
        fi
