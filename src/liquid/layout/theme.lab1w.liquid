<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Support Healthy Blood Sugar</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
    <meta name="format-detection" content="telephone=no">
    <meta name="format-detection" content="address=no">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;700&family=Rufina&family=Roboto+Slab:wght@400;700&family=Roboto:wght@400;500;700&family=Ovo&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=ABeeZee&family=Open+Sans+Condensed:ital,wght@0,300;0,700;1,300&display=swap"
      rel="stylesheet"
    >

    <link
      rel="preload"
      as="font"
      href="{{ 'lp-lab1w-Samantha-Regular.woff' | asset_url }}"
      type="font/woff"
      crossorigin="anonymous"
    >
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <link rel="stylesheet" href="{{ 'lp-bundle.css' | asset_url }}" type="text/css">
    <link
      rel="stylesheet"
      href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"
      integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm"
      crossorigin="anonymous"
    >

    <link rel="shortcut icon" href="{{ settings.favicon | img_url: '32x32' }}" type="image/png">
    <meta name="application-name" content="&nbsp;">
    <meta name="msapplication-TileColor" content="#FFFFFF">
    <meta name="msapplication-TileImage" content="mstile-144x144.png">
    <meta name="msapplication-square70x70logo" content="mstile-70x70.png">
    <meta name="msapplication-square150x150logo" content="mstile-150x150.png">
    <meta name="msapplication-wide310x150logo" content="mstile-310x150.png">
    <meta name="msapplication-square310x310logo" content="mstile-310x310.png">

    <!-- open graph -->
    <meta property="og:site_name" content="CuraLife">
    <meta property="og:url" content="http://template/">
    <meta property="og:type" content="website">
    <meta property="og:title" content="Support Healthy BS">
    <meta property="og:description" content="Natural Ways to Maintain Healthy Glucose Levels">
    <meta property="og:image" content="intro-bg.png">
    <meta property="og:locale" content="us_EN">
    <!-- open graph -->

    <style>
      @font-face {
        font-family: 'icoFont';
        src: url("{{ 'fonts-icoFont.eot' | asset_url }}");
        src: url("{{ 'fonts-icoFont.eot' | asset_url }}?uayl2p#iefix") format("embedded-opentype"), url("{{ 'fonts-icoFont.ttf' | asset_url }}?uayl2p") format("truetype"), url("{{ 'font-icoFont.woff' | asset_url }}?uayl2p") format("woff"), url("{{ 'font-icoFont.svg' | asset_url }}?uayl2p#icoFont") format("svg");
        font-weight: normal;
        font-style: normal;
        font-display: block; }

        .fas {
          padding: 10px;
          font-size: 40px;
        }

        .seen-on:before {
          background: url("{{ 'lp-lab1w-ellipse-21.png' | asset_url }}") center no-repeat;
          background-size: cover;
        }

        .lumen-intro .intro-content .bottom-wrap:before {
          background: url("{{ 'lp-lab1w-ellipse-21.png' | asset_url }}") center no-repeat;
          background-size: cover;
        }

        .lumen-page.dark-theme .seen-on:before {
        background: url("{{ 'lp-lab1w-ellipse-21-b.png' | asset_url }}") center no-repeat;
        background-size: contain;
        }

        .lumen-page.dark-theme .lumen-intro .intro-content .bottom-wrap:before {
          background: url("{{ 'lp-lab1w-ellipse-21-b-2.png' | asset_url }}") center no-repeat;
          background-size: contain;
        }

        .doctors-list:before {
          background: url("{{ 'lp-lab1w-vector-28.png' | asset_url }}") center left no-repeat;
          background-size: contain;
        }

        .missing-piece:before {
          background: url("{{ 'lp-lab1w-vector-1-28.png' | asset_url }}") center right no-repeat;
          background-size: contain;
        }

        .lumen-page.dark-theme .missing-piece:before {
          background: url("{{ 'lp-lab1w-vector-1-28-b-m.png' | asset_url }}") center left no-repeat;
          background-size: contain;
        }

      .lumen-page.dark-theme .missing-piece:before {
        background: url("{{ 'lp-lab1w-vector-1-28-b.png' | asset_url }}") center right no-repeat;
        background-size: contain;
        }

        .missing-piece:after {
          background: url("{{ 'lp-lab1w-vector-33.png' | asset_url }}") center right no-repeat;
          background-size: contain;
        }

      .lumen-page.dark-theme .missing-piece:after {
        background: url("{{ 'lp-lab1w-vector-33-b.png' | asset_url }}") center right no-repeat;
        background-size: contain;
        }

        .safety-info .data-wrap .img:before {
          background: url("{{ 'lp-lab1w-safety-bg.png' | asset_url }}") no-repeat;
          background-size: contain;
        }

        .goods-list-face .list-wrap-face .mobile-tit p.black:before {
          background: url("{{ 'lp-lab1w-black-bg.png' | asset_url }}") center no-repeat;
          background-size: contain;
        }

        .goods-list-face .list-wrap-face .mobile-tit p.white:before {
          background: url("{{ 'lp-lab1w-white-bg.png' | asset_url }}") center no-repeat;
          background-size: cover;
        }

        .locale-selectors__container {
          display: none;
        }
    </style>

    {% render 'layout.head.google-tag-manager' %}

    <!-- anti-flicker snippet (recommended) -->
    <style>
      .async-hide {
        opacity: 0 !important;
      }
    </style>
    <script>
      (function (a, s, y, n, c, h, i, d, e) {
        s.className += ' ' + y;
        h.start = 1 * new Date();
        h.end = i = function () {
          s.className = s.className.replace(RegExp(' ?' + y), '');
        };
        (a[n] = a[n] || []).hide = h;
        setTimeout(function () {
          i();
          h.end = null;
        }, c);
        h.timeout = c;
      })(window, document.documentElement, 'async-hide', 'dataLayer', 4000, { 'GTM-TR9676S': true });
    </script>

    {{ content_for_header }}
    <script src="https://cdn-widgetsrepository.yotpo.com/v1/loader/5AyB8SFKOjnnor-g4qIeMg" async></script>
    <script src="https://cdn-widgetsrepository.yotpo.com/v1/loader/oMYBvmnASlHzmouicgkepg" async></script>
  </head>
  <body>
    <main role="main">
      {{ content_for_layout }}
    </main>

    <script>
      $(document).on('click', '.cta-btn-90-caps', function () {
        console.log('add to cart event');
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
          event: 'eec.addToCart', // name of an event. In this case, always stays as eec.addToCart
          ecommerce: {
            // ecommerce object. This is the essential part of tracking. New EE data must always be pushed to this object
            currencyCode: '{{shop.currency}}', // the currency which is currently used by a visitor
            add: {
              // name of an action. In this case, always stays as add
              actionField: {
                list: 'main', // optional. name of a list from which the product was added to a cart
              },
              products: [
                {
                  // list of products added to a cart. Can contain multiple products at the same time
                  name: 'CuraLin 90 Cap Bottle', // name of a product that was added to a cart
                  id: '7323795652759', // id of a product
                  price: '39.00', // price of a product
                  category: 'Simple',
                  variant: '', // category of a product
                  quantity: 1,
                },
              ],
            },
          },
          userId: '{{ customer.id }}',
          email: '{{ customer.email }}',
          country: '{{customer.customer_address.country_code }}',
          city: '{{customer.customer_address.city }}',
          name: '{{ customer.first_name }}',
          surname: '{{ customer.last_name }}',
          phone_number: '{{customer.phone }}',
          state: '{{customer.customer_address.province }}', //state or province
          zip: '{{customer.customer_address.zip }}', //ZIP or Postal code
        });
      });

      $(document).on('click', '.cta-btn-180-caps', function () {
        console.log('add to cart event');
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
          event: 'eec.addToCart', // name of an event. In this case, always stays as eec.addToCart
          ecommerce: {
            // ecommerce object. This is the essential part of tracking. New EE data must always be pushed to this object
            currencyCode: '{{shop.currency}}', // the currency which is currently used by a visitor
            add: {
              // name of an action. In this case, always stays as add
              actionField: {
                list: 'main', // optional. name of a list from which the product was added to a cart
              },
              products: [
                {
                  // list of products added to a cart. Can contain multiple products at the same time
                  name: 'CuraLin 180 Cap Bottle', // name of a product that was added to a cart
                  id: '7323929772183', // id of a product
                  price: '69.00', // price of a product
                  category: 'Simple',
                  variant: '', // category of a product
                  quantity: 1,
                },
              ],
            },
          },
          userId: '{{ customer.id }}',
          email: '{{ customer.email }}',
          country: '{{customer.customer_address.country_code }}',
          city: '{{customer.customer_address.city }}',
          name: '{{ customer.first_name }}',
          surname: '{{ customer.last_name }}',
          phone_number: '{{customer.phone }}',
          state: '{{customer.customer_address.province }}', //state or province
          zip: '{{customer.customer_address.zip }}', //ZIP or Postal code
        });
      });

      $(document).on('click', '.cta-btn-3-pack', function () {
        console.log('add to cart event');
        window.dataLayer = window.dataLayer || [];
        window.dataLayer.push({
          event: 'eec.addToCart', // name of an event. In this case, always stays as eec.addToCart
          ecommerce: {
            // ecommerce object. This is the essential part of tracking. New EE data must always be pushed to this object
            currencyCode: '{{shop.currency}}', // the currency which is currently used by a visitor
            add: {
              // name of an action. In this case, always stays as add
              actionField: {
                list: 'main', // optional. name of a list from which the product was added to a cart
              },
              products: [
                {
                  // list of products added to a cart. Can contain multiple products at the same time
                  name: 'CuraLin 3 Bottles Pack', // name of a product that was added to a cart
                  id: '7323933999255', // id of a product
                  price: '186.00', // price of a product
                  category: 'Simple',
                  variant: '', // category of a product
                  quantity: 1,
                },
              ],
            },
          },
          userId: '{{ customer.id }}',
          email: '{{ customer.email }}',
          country: '{{customer.customer_address.country_code }}',
          city: '{{customer.customer_address.city }}',
          name: '{{ customer.first_name }}',
          surname: '{{ customer.last_name }}',
          phone_number: '{{customer.phone }}',
          state: '{{customer.customer_address.province }}', //state or province
          zip: '{{customer.customer_address.zip }}', //ZIP or Postal code
        });
      });
    </script>

    <script>
      const reviewsSlider = new Swiper('.real-reviews .swiper', {
        slidesPerView: 2,
        spaceBetween: 0,
        grabCursor: true,
        loop: true,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
          disabledClass: 'disabled',
        },
        autoplay: {
          delay: 3000,
        },
        breakpoints: {
          0: {
            slidesPerView: 1,
          },
          630: {
            slidesPerView: 2,
          },
          900: {
            slidesPerView: 3,
          },
          1100: {
            slidesPerView: 4,
          },
        },
      });

      const ingredientsSlider = new Swiper('.ingredients-slider .swiper', {
        slidesPerView: 1,
        spaceBetween: 15,
        // grabCursor: true,
        loop: false,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
          disabledClass: 'disabled',
        },
        pagination: {
          el: '.ingredients-bullets',
          type: 'bullets',
          clickable: true,
        },
      });

      const doctorsSlider = new Swiper('.doctors-list .list-slider .swiper', {
        slidesPerView: 1,
        spaceBetween: 8,
        grabCursor: true,
        loop: false,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
          disabledClass: 'disabled',
        },
        pagination: {
          el: '.slider-bullets',
          bulletClass: 'bullet',
          bulletActiveClass: 'active',
          type: 'bullets',
          clickable: true,
        },
        breakpoints: {
          0: {
            slidesPerView: 1.8,
            spaceBetween: 8,
          },
          641: {
            slidesPerView: 'auto',
            spaceBetween: 17,
          },
        },
      });

      const seenSlider = new Swiper('.seen-on .seen-slider .swiper', {
        slidesPerView: 1,
        spaceBetween: 8,
        grabCursor: true,
        loop: false,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev',
          disabledClass: 'disabled',
        },
        breakpoints: {
          0: {
            spaceBetween: 35,
            slidesPerView: 1.7,
          },
          641: {
            slidesPerView: 2,
          },
          900: {
            slidesPerView: 3,
            spaceBetween: 15,
          },
          1271: {
            slidesPerView: 4,
            spaceBetween: 30,
          },
          1391: {
            slidesPerView: 4,
            spaceBetween: 50,
          },
        },
      });

      const dqSlider = new Swiper('.doctors-quote .dq-slider .swiper', {
        slidesPerView: 1,
        spaceBetween: 8,
        grabCursor: true,
        loop: false,
        pagination: {
          el: '.slider-bullets',
          bulletClass: 'bullet',
          bulletActiveClass: 'active',
          type: 'bullets',
          clickable: true,
        },
      });
      // globals
      let canvas,
        ctx,
        W,
        H,
        mp = 100,
        particles = [],
        angle = 0,
        tiltAngle = 0,
        confettiActive = true,
        animationComplete = true,
        deactivationTimerHandler,
        reactivationTimerHandler,
        animationHandler;

      // objects

      let particleColors = {
        colorOptions: [
          'DodgerBlue',
          'OliveDrab',
          'Gold',
          'pink',
          'SlateBlue',
          'lightblue',
          'Violet',
          'PaleGreen',
          'SteelBlue',
          'SandyBrown',
          'Chocolate',
          'Crimson',
        ],
        colorIndex: 0,
        colorIncrementer: 0,
        colorThreshold: 10,
        getColor: function () {
          if (this.colorIncrementer >= 10) {
            this.colorIncrementer = 0;
            this.colorIndex++;
            if (this.colorIndex >= this.colorOptions.length) {
              this.colorIndex = 0;
            }
          }
          this.colorIncrementer++;
          return this.colorOptions[this.colorIndex];
        },
      };

      function confettiParticle(color) {
        this.x = Math.random() * W; // x-coordinate
        this.y = Math.random() * H - H; //y-coordinate
        this.r = RandomFromTo(10, 20); //radius;
        this.d = Math.random() * mp + 10; //density;
        this.color = color;
        this.tilt = Math.floor(Math.random() * 10) - 10;
        this.tiltAngleIncremental = Math.random() * 0.07 + 0.05;
        this.tiltAngle = 0;

        this.draw = function () {
          ctx.beginPath();
          ctx.lineWidth = this.r / 2;
          ctx.strokeStyle = this.color;
          ctx.moveTo(this.x + this.tilt + this.r / 4, this.y);
          ctx.lineTo(this.x + this.tilt, this.y + this.tilt + this.r / 4);
          return ctx.stroke();
        };
      }

      function SetGlobals() {
        canvas = document.getElementById('confetti-canvas');
        ctx = canvas.getContext('2d');
        W = window.innerWidth;
        H = window.innerHeight;
        canvas.width = W;
        canvas.height = H;
      }

      function InitializeConfetti() {
        particles = [];
        animationComplete = false;
        for (let i = 0; i < mp; i++) {
          let particleColor = particleColors.getColor();
          particles.push(new confettiParticle(particleColor));
        }
        StartConfetti();
      }

      function Draw() {
        ctx.clearRect(0, 0, W, H);
        let results = [];
        for (let i = 0; i < mp; i++) {
          (function (j) {
            results.push(particles[j].draw());
          })(i);
        }
        Update();

        return results;
      }

      function RandomFromTo(from, to) {
        return Math.floor(Math.random() * (to - from + 1) + from);
      }

      function Update() {
        let remainingFlakes = 0;
        let particle;
        angle += 0.01;
        tiltAngle += 0.1;

        for (let i = 0; i < mp; i++) {
          particle = particles[i];
          if (animationComplete) return;

          if (!confettiActive && particle.y < -15) {
            particle.y = H + 100;
            continue;
          }

          stepParticle(particle, i);

          if (particle.y <= H) {
            remainingFlakes++;
          }
          CheckForReposition(particle, i);
        }

        if (remainingFlakes === 0) {
          StopConfetti();
        }
      }

      function CheckForReposition(particle, index) {
        if ((particle.x > W + 20 || particle.x < -20 || particle.y > H) && confettiActive) {
          if (index % 5 > 0 || index % 2 == 0) {
            //66.67% of the flakes
            repositionParticle(particle, Math.random() * W, -10, Math.floor(Math.random() * 10) - 20);
          } else {
            if (Math.sin(angle) > 0) {
              //Enter from the left
              repositionParticle(particle, -20, Math.random() * H, Math.floor(Math.random() * 10) - 20);
            } else {
              //Enter from the right
              repositionParticle(particle, W + 20, Math.random() * H, Math.floor(Math.random() * 10) - 20);
            }
          }
        }
      }

      function stepParticle(particle, particleIndex) {
        particle.tiltAngle += particle.tiltAngleIncremental;
        particle.y += (Math.cos(angle + particle.d) + 3 + particle.r / 2) / 2;
        particle.x += Math.sin(angle);
        particle.tilt = Math.sin(particle.tiltAngle - particleIndex / 3) * 15;
      }

      function repositionParticle(particle, xCoordinate, yCoordinate, tilt) {
        particle.x = xCoordinate;
        particle.y = yCoordinate;
        particle.tilt = tilt;
      }

      function StartConfetti() {
        W = window.innerWidth;
        H = window.innerHeight;
        canvas.width = W;
        canvas.height = H;
        (function animloop() {
          if (animationComplete) return null;
          animationHandler = requestAnimFrame(animloop);
          return Draw();
        })();
      }

      function ClearTimers() {
        clearTimeout(reactivationTimerHandler);
        clearTimeout(animationHandler);
      }

      function DeactivateConfetti() {
        confettiActive = false;
        ClearTimers();
      }

      function StopConfetti() {
        animationComplete = true;
        if (ctx == undefined) return;
        ctx.clearRect(0, 0, W, H);
      }

      function RestartConfetti() {
        ClearTimers();
        StopConfetti();
        reactivationTimerHandler = setTimeout(function () {
          confettiActive = true;
          animationComplete = false;
          InitializeConfetti();
        }, 100);
      }

      window.requestAnimFrame = (function () {
        return (
          window.requestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.oRequestAnimationFrame ||
          window.msRequestAnimationFrame ||
          function (callback) {
            return window.setTimeout(callback, 1000 / 60);
          }
        );
      })();

      /*window.addEventListener('load', (e) => {
      SetGlobals();
      DeactivateConfetti();
      RestartConfetti();

      InitializeConfetti();

      setTimeout(function () {
          DeactivateConfetti()
      }, 3000);
      window.onresize = function (event) {
          W = window.innerWidth;
          H = window.innerHeight;
          canvas.width = W;
          canvas.height = H;
      };
  });*/

      (function () {
        'use strict';

        /*  if (document.querySelector('.dark-theme')) {
          document.querySelector('html').style.backgroundColor = '#000000';
          document.querySelector('body').style.color = '#ffffff';
      }*/

        const get_utm = window.location.search.substring(1);
        let product_link = document.querySelectorAll(
          '.product-list .card .submit-btn a, .list-wrap .card .c-wrap .bottom .b-wrap a,\
       .chose-pack .c-wrap .pack-link .active-link a, .chose-pack .c-wrap .pack-link .link a, .product-list  .single-card .main-info .btn-wrap .main-btn,\
       .product-list line-decoration .card .bottom .submit-btn a, .product-list .card .submit-btn a,\
       .more-space.v3 .product-list .single-card .main-info .btn-wrap .main-btn'
        );
        let floating_btn_wrap = document.querySelector('.about-content');
        let floating_btn = document.querySelector('.about-content .floating-btn');
        let cta_floating_btn = document.querySelector('.article-content .cta-btn');
        let lumen_floating_btn = document.querySelector('.lumen-page .floating-btn');
        let ticker = document.querySelectorAll('.seen-headlines .headlines-list .ticker-wrap');
        let fixed_header = document.querySelector('.about-intro.fixed-header header');

        window.onload = function () {
          for (let i = 0; i < product_link.length; i++) {
            product_link[i].href = product_link[i].href + '&' + get_utm;
          }
        };

        if (ticker.length) {
          let ticker_list = document.querySelectorAll('.seen-headlines .headlines-list .ticker-wrap ul');
          for (let i = 0; i < ticker_list.length; i++) {
            let _clone = ticker_list[i].cloneNode(true);
            ticker[i].append(_clone);
          }
        }

        window.addEventListener('scroll', (e) => {
          let last_known_scroll_position = window.scrollY;

          if (floating_btn) {
            if (
              floating_btn_wrap.offsetTop < last_known_scroll_position &&
              document.querySelector('.about-content .product-list').offsetTop > last_known_scroll_position
            ) {
              floating_btn.classList.add('show');
            } else {
              floating_btn.classList.remove('show');
            }
          }

          if (lumen_floating_btn) {
            if (
              document.querySelector('.lumen-page .seen-on').offsetTop < last_known_scroll_position &&
              document.querySelector('.lumen-page .goods-list').offsetTop +
                20 -
                document.querySelector('.lumen-page .goods-list').getBoundingClientRect().height >
                last_known_scroll_position
            ) {
              lumen_floating_btn.classList.add('show');
            } else {
              lumen_floating_btn.classList.remove('show');
            }
          }

          if (fixed_header) {
            if (document.querySelector('.guarantee-section .extra-info').offsetTop < last_known_scroll_position) {
              fixed_header.classList.add('hide');
            } else {
              fixed_header.classList.remove('hide');
            }
          }

          if (cta_floating_btn && window.innerWidth < 641) {
            if (
              window.innerHeight - (cta_floating_btn.getBoundingClientRect().height + 20) >
              cta_floating_btn.getBoundingClientRect().top
            ) {
              cta_floating_btn.classList.add('fixed');
              if (window.innerHeight > document.querySelector('.product-list').getBoundingClientRect().top) {
                cta_floating_btn.classList.add('hide');
              } else {
                cta_floating_btn.classList.remove('hide');
              }
            } else {
              cta_floating_btn.classList.remove('fixed');
            }
          }
        });

        let buyBtns = document.querySelectorAll('.buy-btn .main-btn');

        for (let i = 0; i < buyBtns.length; i++) {
          buyBtns[i].addEventListener('click', () => {
            document.querySelector('.product-list').scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          });
        }

        if (document.querySelector('.lumen-intro .intro-content .intro-btn button')) {
          document.querySelector('.lumen-intro .intro-content .intro-btn button').addEventListener('click', () => {
            document.querySelector('.goods-list-face').scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          });
        }
        if (lumen_floating_btn) {
          lumen_floating_btn.querySelector('button').addEventListener('click', () => {
            document.querySelector('.goods-list-face').scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          });
        }

        if (document.querySelector('.mb-floating-btn .main-btn')) {
          document.querySelector('.mb-floating-btn .main-btn').addEventListener('click', () => {
            document.querySelector('.product-list').scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });
          });
        }

        for (let i = 0; i < document.querySelectorAll('.product-list .card .img img').length; i++) {
          document.querySelectorAll('.product-list .card .img img')[i].addEventListener('click', (event) => {
            let _parent = event.target.closest('.card');
            _parent.querySelector('.submit-btn a').click();
          });
        }
        for (let i = 0; i < document.querySelectorAll('.product-list .single-card .img-wrap span img').length; i++) {
          document
            .querySelectorAll('.product-list .single-card .img-wrap span img')
            [i].addEventListener('click', (event) => {
              let _parent = event.target.closest('.single-card');
              _parent.querySelector('.main-info .btn-wrap .main-btn').click();
            });
        }
        for (let i = 0; i < document.querySelectorAll('.product-list .card .sale-label').length; i++) {
          document.querySelectorAll('.product-list .card .img img')[i].addEventListener('click', (event) => {
            let _parent = event.target.closest('.card');
            _parent.querySelector('.submit-btn a').click();
          });
        }

        const countdown = document.querySelector('.countdown');
        const laborCountdown = document.querySelector('.labor-countdown');

        function getTimeRemaining(endtime) {
          const total = Date.parse(endtime) - Date.parse(new Date());
          const seconds = Math.floor((total / 1000) % 60);
          const minutes = Math.floor((total / 1000 / 60) % 60);
          const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
          const days = Math.floor(total / (1000 * 60 * 60 * 24));

          return {
            total,
            days,
            hours,
            minutes,
            seconds,
          };
        }

        function initializeClock(item, endtime) {
          const clock = document.querySelector(item);
          const daysSpan = clock.querySelector('.giveaway-page .countdown ul li.days p span');
          const hoursSpan = clock.querySelector('.giveaway-page .countdown ul li.hours p span');
          const minutesSpan = clock.querySelector('.giveaway-page .countdown ul li.minutes p span');
          const secondsSpan = clock.querySelector('.giveaway-page .countdown ul li.seconds p span');

          function updateClock() {
            const t = getTimeRemaining(endtime);
            daysSpan.innerHTML = t.days;
            hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
            minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
            secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

            if (t.total <= 0) {
              clearInterval(timeInterval);
            }
          }

          updateClock();
          const timeInterval = setInterval(updateClock, 1000);
        }

        function initializeLaborClock(item, endtime) {
          const clock = document.querySelector(item);
          const daysSpan = clock.querySelector('ul li.days p span');
          const hoursSpan = clock.querySelector('ul li.hours p span');
          const minutesSpan = clock.querySelector('ul li.minutes p span');
          const secondsSpan = clock.querySelector('ul li.seconds p span');

          function updateClock() {
            const t = getTimeRemaining(endtime);
            daysSpan.innerHTML = t.days;
            hoursSpan.innerHTML = ('0' + t.hours).slice(-2);
            minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
            secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

            if (t.total <= 0) {
              clearInterval(timeInterval);
            }
          }

          updateClock();
          const timeInterval = setInterval(updateClock, 1000);
        }

        if (laborCountdown) {
          // year-month-dateThours:minutes:seconds:ms-GMT
          const laborDeadline = '2021-09-07T00:00:01.000-00:00';
          initializeLaborClock('.labor-countdown', laborDeadline);
        }
        if (countdown) {
          // year-month-dateThours:minutes:seconds:ms-GMT
          // const deadline = '2021-8-13 11:00:00 EST';

          const deadline = '2021-08-28T11:00:00.000-05:00';
          initializeClock('.giveaway-page .countdown', deadline);
        }

        const giveawayForm = document.querySelector('.giveaway-page .form-wrap form');

        if (giveawayForm) {
          const giveawayFullName = giveawayForm.querySelector('label input[name="full_name"]'),
            giveawayEmail = giveawayForm.querySelector('label input[name="email"]');

          fetch('https://ipinfo.io/json')
            .then((response) => {
              return response.json();
            })
            .then((locationJson) => {
              giveawayForm.querySelector('input[name="country"]').value = locationJson.country;
              giveawayForm.querySelector('input[name="city"]').value = locationJson.city;
              giveawayForm.querySelector('input[name="state"]').value = locationJson.regionName;
            })
            .catch(console.error);

          function checkForm() {
            let nameCanSubmit,
              emailCanSubmit = false;

            if (
              giveawayFullName.value === '' ||
              !isNaN(giveawayFullName.value) ||
              !/[a-zA-Z]+\s+[a-zA-Z]+/g.test(giveawayFullName.value)
            ) {
              nameCanSubmit = false;
              giveawayFullName.parentElement.classList.add('error');
            } else {
              nameCanSubmit = true;
              giveawayFullName.parentElement.classList.remove('error');
            }

            if (
              giveawayEmail.value === '' ||
              !isNaN(giveawayEmail.value) ||
              !/\S+@\S+\.\S+/.test(giveawayEmail.value)
            ) {
              emailCanSubmit = false;
              giveawayEmail.parentElement.classList.add('error');
            } else {
              emailCanSubmit = true;
              giveawayEmail.parentElement.classList.remove('error');
            }

            if (nameCanSubmit && emailCanSubmit) {
              /* async function getParams() {
                       const _params = new URLSearchParams([...new FormData(giveawayForm).entries()]);
                       return await new Response(_params).text();
                   }

                   getParams().then(response => {
                       fetch(giveawayForm.action, {
                           method: 'post',
                           mode: 'no-cors',
                           headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                           body: response
                       }).then(response => {
                           /!* if (!response.ok) {
                                throw new Error('Network response was not ok.')
                            } else {*!/
                           document.querySelector('.giveaway-page .page-wrap').remove();
                           document.querySelector('.giveaway-page .thanks-wrap').classList.remove('none')
                           // }
                       }).catch(console.error);
                   });*/
              giveawayForm.querySelector('.submit-btn').classList.add('processing');
              fetch(giveawayForm.action, {
                method: 'post',
                mode: 'no-cors',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  full_name: giveawayForm.full_name.value,
                  email: giveawayForm.email.value,
                  country: giveawayForm.country.value,
                  state: giveawayForm.state.value,
                  city: giveawayForm.city.value,
                }),
              })
                .then((response) => {
                  SetGlobals();
                  document.querySelector('.giveaway-page .page-wrap').remove();
                  window.scrollTo(0, 0);
                  document.querySelector('.giveaway-page .thanks-wrap').classList.remove('none');
                  InitializeConfetti();
                  setTimeout(function () {
                    DeactivateConfetti();
                  }, 3000);
                })
                .catch(console.error);
            }
          }

          giveawayForm.addEventListener('submit', function (e) {
            e.preventDefault();
            checkForm();
          });
        }

        const choseGoods = document.querySelector('.goods-list .chose-pack');

        if (choseGoods) {
          let choseGoodsBtn = choseGoods.querySelectorAll('.pack-list ul li .item-wrap');
          for (let i = 0; i < choseGoodsBtn.length; i++) {
            choseGoodsBtn[i].addEventListener('click', () => {
              if (!choseGoodsBtn[i].classList.contains('active')) {
                let _pack = choseGoodsBtn[i].dataset.pack;
                document.querySelector('.goods-list .pack-img .img.active').classList.remove('active');
                choseGoods.querySelector('.pack-link .link.active').classList.remove('active');
                choseGoods.querySelector('.pack-list ul li .item-wrap.active').classList.remove('active');

                document.querySelector('.goods-list .pack-img .img[data-pack="' + _pack + '"]').classList.add('active');
                choseGoods.querySelector('.pack-link .link[data-pack="' + _pack + '"]').classList.add('active');
                choseGoodsBtn[i].classList.add('active');
              }
            });
          }
        }

        const accordions = document.querySelectorAll('.faq-list ul li');

        const openAccordion = (accordion) => {
          const content = accordion.querySelector('.answer');
          accordion.classList.add('active');
          // content.style.maxHeight = content.scrollHeight + "px";
        };

        const closeAccordion = (accordion) => {
          const content = accordion.querySelector('.answer');
          accordion.classList.remove('active');
          // content.style.maxHeight = null;
        };

        accordions.forEach((accordion) => {
          const intro = accordion.querySelector('.question');
          const content = accordion.querySelector('.answer');

          intro.onclick = () => {
            if (accordion.classList.contains('active')) {
              closeAccordion(accordion);
            } else {
              openAccordion(accordion);
            }
            /* if (content.style.maxHeight) {
                  closeAccordion(accordion);
              } else {
                  accordions.forEach((accordion) => closeAccordion(accordion));
                  openAccordion(accordion);
              }*/
          };
        });

        if (document.querySelector('.fda-video .video-wrap span img')) {
          let iframe = document.querySelector('.fda-video .video-wrap span iframe');
          let player = $f(iframe);

          document.querySelector('.fda-video .video-wrap span img').addEventListener('click', () => {
            document.querySelector('.fda-video .video-wrap span').classList.add('play');
            player.api('play');

            // player.api("pause");
          });
        }
      })();
    </script>
  </body>
</html>
