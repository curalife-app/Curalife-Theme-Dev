<section class="quiz-results-section pb-0">
	<div class="container text-center">
		<div class="mbl:flex-col flex items-center gap-8 justify-between [&>*]:w-1/2 mbl:[&>*]:w-full">
			<div class="h3 text-start mbl:text-center text-[25px]">
				Your current weight is
				<span id="wgt"></span>
				lbs
			</div>

			<div class="goals-wrapper bg-[#FFF1E8] rounded-md p-8 my-4 w-1/2 mbl:w-full">
				<h5 class="text-black">Your Goals:</h5>
				<ul class="check goals m-0 text-[20px]" id="goals">
					<li class="goal">
						Attain a weight of
						<span id="wlg"></span>
						lbs
					</li>
				</ul>
			</div>
		</div>

		<div class="py-8">
			<b>That's a within-reach goal,</b>
			<br>
			and with us by your side, you can achieve it without exhausting routines.
		</div>

		<div class="mbl:flex-col pt-8 flex items-center gap-8 justify-between [&>*]:w-1/2 mbl:[&>*]:w-full" style="border-top:2px solid var(--primary);">
			<div class="h3 mt-6  text-start mbl:text-center text-[25px]">
				You can lose at least
				<span id="can"></span>
				lbs in 3 months with Curaslim
			</div>

			<img class="max-w-1/2 mbl:max-w-full" src="{{ 'curaslim_results.png' | file_url }}" alt="Curaslim Quiz Results">
		</div>
	</div>
</section>

<script>
	function sendToZapier(params) {
		// Replace this URL with your actual Zapier webhook URL
		const ZAPIER_WEBHOOK_URL = 'https://hooks.zapier.com/hooks/catch/10900898/2zlu7dg/';

		// Create an object with all URL parameters
		const webhookData = {};
		params.forEach((value, key) => {
			webhookData[key] = value;
		});

		// Send the data to Zapier
		fetch(ZAPIER_WEBHOOK_URL, {
			method: 'POST',
			body: JSON.stringify(webhookData),
			headers: {
				'Content-Type': 'application/json'
			}
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				console.log('Data successfully sent to Zapier');
			})
			.catch(error => {
				console.error('Error sending data to Zapier:', error);
			});
	}

	function processGeneralUrlParams() {
		console.log('Processing general URL parameters...');
		const urlParams = new URLSearchParams(window.location.search);

		// Send parameters to Zapier first
		sendToZapier(urlParams);

		urlParams.forEach((value, key) => {
			console.log(`Processing parameter: ${key} with value: ${value}`);
			const element = document.getElementById(key);
			if (element) {
				console.log(`Found element with ID: ${key}. Setting text content to: ${value}`);
				element.textContent = value;
			} else {
				console.warn(`No element found with ID: ${key}`);
			}
		});

		console.log('Finished processing general URL parameters.');
	}

	// Rest of your existing functions remain the same
	function processCanParam() {
		console.log("Processing 'can' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const canValue = urlParams.get('wgt');

		if (canValue !== null) {
			const element = document.getElementById('can');
			if (element) {
				const processedValue = parseFloat(canValue) - (parseFloat(canValue) - parseFloat(canValue) * 0.075);
				console.log(`Original value of 'wgt': ${canValue}, Processed value: ${processedValue}`);
				element.textContent = processedValue.toFixed(0);
			} else {
				console.warn(`No element found with ID: can`);
			}
		}

		console.log("Finished processing 'can' URL parameter.");
	}

	function processGoalsParam() {
		console.log("Processing 'gls' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const goalsValue = urlParams.get('gls');

		if (goalsValue !== null) {
			const goalsElement = document.getElementById('goals');
			const goalsArray = goalsValue.split(',');

			goalsArray.forEach(goal => {
				const trimmedGoal = goal.trim();
				if (trimmedGoal.toLowerCase() !== 'other') {
					const listItem = document.createElement('li');
					listItem.className = 'goal';
					listItem.textContent = trimmedGoal;
					goalsElement.appendChild(listItem);
				}
			});

			console.log(`Added goals: ${goalsArray}`);
		} else {
			console.warn(`No 'gls' parameter found in the URL.`);
		}

		console.log("Finished processing 'gls' URL parameter.");
	}

	document.addEventListener('DOMContentLoaded', () => {
		processGeneralUrlParams();
		processCanParam();
		processGoalsParam();
	});
</script>

{% schema %}
	{
		"name": "Quiz Results",
		"class": "quiz-results-section",
		"settings": [],
		"presets": [
			{
				"name": "Quiz Results"
			}
		]
	}
{% endschema %}
