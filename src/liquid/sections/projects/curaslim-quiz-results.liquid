<section class="quiz-results-section pb-0">
  <div class="container text-center">
    <div class="h2 text-black text-[25px]">
      Reach <span id="wgt"></span> lbs
    </div>

    <div class="goals-wrapper bg-[#FFF1E8] rounded-md p-8 my-4">
      <h5 class="text-black">Your Goals:</h5>
      <ul class="check goals m-0" id="goals">
        <li class="goal">Weight loss <span id="wlg"></span>lbs</li>
      </ul>
    </div>

    <p>
      <b>That's a within-reach goal,</b><br />and with us by your side, you can
      achieve it without exhausting routines.
    </p>

    <div class="h2 mt-6 text-black text-[25px]">
      You can lose at least <span id="can"></span> lbs in 3 months with Curaslim
    </div>
  </div>
</section>

<!-- Modified Sticky Bar -->
<a id="sticky-bar"
  class="bottom-4 fixed z-50 transition-all duration-300 ease-in-out transform -translate-x-1/2 opacity-0 pointer-events-none"
  href="#cta">
  <button class="px-6 w-full py-4 absolute bottom-0 bg-[--orange] text-black font-bold !text-[20px] shadow-lg rounded-lg">
    <i class="fa-solid fa-arrow-right mr-2"></i>Buy Curaslim - Lose Weight
  </button>
</a>

<style>
  article ul li,
  section ul li {
    margin-bottom: 0.25em;
    padding-left: 1.5em;

    &:before {
      top: 0.5rem;
    }
  }

  #sticky-bar {
    opacity: 0;
    pointer-events: none;
    transform: translateY(100%);
    transition: opacity 0.5s ease, transform 0.5s ease;
    width: 94vw;
    left: 3vw;

    &::after {
      content: " ";
      width: 100vw;
      height: 25vw;
      display: inline-block;
      background: linear-gradient(0deg, rgb(255 255 255) 50%, rgb(255 255 255 / 0%) 100%);
      position: absolute;
      left: -3vw;
      bottom: -4vw;
      z-index: -1;
    }
  }

  #sticky-bar.visible {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
  }

  @keyframes popIn {
    0% {
      opacity: 0;
      transform: translateY(100%) scale(0.9);
    }
    80% {
      opacity: 1;
      transform: translateY(-10%) scale(1.05);
    }
    100% {
      transform: translateY(0) scale(1);
    }
  }

  #sticky-bar.visible {
    animation: popIn 0.5s forwards;
  }
</style>

<script>
  function processGeneralUrlParams() {
    console.log("Processing general URL parameters...");
    const urlParams = new URLSearchParams(window.location.search);

    urlParams.forEach((value, key) => {
      console.log(`Processing parameter: ${key} with value: ${value}`);
      const element = document.getElementById(key);
      if (element) {
        console.log(
          `Found element with ID: ${key}. Setting text content to: ${value}`
        );
        element.textContent = value;
      } else {
        console.warn(`No element found with ID: ${key}`);
      }
    });

    console.log("Finished processing general URL parameters.");
  }

  function processCanParam() {
    console.log("Processing 'can' URL parameter...");
    const urlParams = new URLSearchParams(window.location.search);
    const canValue = urlParams.get("wgt");

    if (canValue !== null) {
      const element = document.getElementById("can");
      if (element) {
        const processedValue = parseFloat(canValue) - (parseFloat(canValue) - parseFloat(canValue) * 0.075);
        console.log(
          `Original value of 'wgt': ${canValue}, Processed value: ${processedValue}`
        );
        element.textContent = processedValue.toFixed(0); // Adjust to 2 decimal places
      } else {
        console.warn(`No element found with ID: can`);
      }
    }

    console.log("Finished processing 'can' URL parameter.");
  }

  function processGoalsParam() {
    console.log("Processing 'gls' URL parameter...");
    const urlParams = new URLSearchParams(window.location.search);
    const goalsValue = urlParams.get("gls");

    if (goalsValue !== null) {
      const goalsElement = document.getElementById("goals");
      const goalsArray = goalsValue.split(","); // Assuming goals are comma-separated

      goalsArray.forEach((goal) => {
        const trimmedGoal = goal.trim();
        if (trimmedGoal.toLowerCase() !== "other") {
          // Check for "Other" (case-insensitive)
          const listItem = document.createElement("li");
          listItem.className = "goal";
          listItem.textContent = trimmedGoal;
          goalsElement.appendChild(listItem);
        }
      });

      console.log(`Added goals: ${goalsArray}`);
    } else {
      console.warn(`No 'gls' parameter found in the URL.`);
    }

    console.log("Finished processing 'gls' URL parameter.");
  }

  function handleStickyBar() {
    const stickyBar = document.getElementById("sticky-bar");
    const quizResultsSection = document.querySelector(".quiz-results-section");
    const ctaElement = document.getElementById("cta");
    let isVisible = false;

    window.addEventListener("scroll", () => {
      const sectionBottom = quizResultsSection.offsetTop + quizResultsSection.offsetHeight;
      const ctaPosition = ctaElement.offsetTop;

      if (
        window.pageYOffset > sectionBottom &&
        window.pageYOffset + window.innerHeight < ctaPosition &&
        !isVisible
      ) {
        stickyBar.classList.add("visible");
        isVisible = true;
      } else if (
        (window.pageYOffset <= sectionBottom ||
          window.pageYOffset + window.innerHeight >= ctaPosition) &&
        isVisible
      ) {
        stickyBar.classList.remove("visible");
        isVisible = false;
      }
    });
  }

  // Run the functions when the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    processGeneralUrlParams();
    processCanParam();
    processGoalsParam();
    handleStickyBar();
  });
</script>

{% schema %}
  {
    "name": "Quiz Results",
    "class": "quiz-results-section",
    "settings": [],
    "presets": [
      {
        "name": "Quiz Results"
      }
    ]
  }
{% endschema %}