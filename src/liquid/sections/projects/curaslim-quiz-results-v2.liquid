<section id="section-{{ section.id }}" class="quiz-results-section {{ section.settings.section_additional_classes }}">
	<div class="container text-center">
		<div class="flex-col flex items-center gap-y-8 gap-x-20 justify-between [&>*]:w-1/2 mbl:[&>*]:w-full">
			<div class="titles">
				<h1 class="h1 !text-black text-center font-thin mbl:text-start">
					{{ section.settings.heading_pre }}
					<span class="text-[--primary]"><span id="can"></span></span>
					{{ section.settings.heading_post }}
				</h1>
				<p class="text-[--bronze] text-center mbl:text-start italic font-bold text-[22px]">
					{{ section.settings.subheading }}
				</p>
			</div>
			<div class="estimated-results mbl:flex-col flex items-center justify-between w-full gap-8">
				{% if section.settings.result_image %}
					<img class="mbl:my-4 m-0" src="{{ section.settings.result_image | image_url }}" alt="Curaslim Quiz Results">
				{% endif %}
				<div class="estimated-results-wrapper mbl:w-full w-1/2" id="results-bars-container">
					<!-- Results bars will be rendered here -->
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	@media (max-width: 768px) {
		.quiz-results-section .titles h1,
		.quiz-results-section .titles p { text-align: start; font-size: 5vw; }
		h4 { font-size: 6vw; }
		.quiz-results-section .quiz-bar-label { font-size: 5vw; }
	}
	h1 { font-size: 60px !important; }
	@media (max-width: 768px) { h1 { font-size: 10vw !important; } }
	.quiz-bar-wrapper {
		opacity: 0;
		transform: translateY(20px);
		animation: fadeInUp 0.5s forwards;
	}
	h4 { text-align: start; font-weight: bold; }
	.quiz-bar-label { margin-bottom: 0.5rem; font-style: italic; font-size: 26px; text-align: start; }
	.quiz-percentage { font-weight: bold; }
	.quiz-bar-container {
		background: var(--bg-color, #f3f3f3);
		border-radius: 9999px;
		height: 1rem;
		overflow: hidden;
		position: relative;
	}
	.quiz-bar-fill {
		background: var(--primary-color, #2563eb);
		height: 100%;
		line-height: normal;
		color: white;
		text-align: right;
		padding-right: 0.5rem;
		transition: width 1.5s ease-out;
	}
	@keyframes fadeInUp {
		from { opacity: 0; transform: translateY(20px); }
		to { opacity: 1; transform: translateY(0); }
	}
</style>

<script>
	// Encapsulate functionality into a modular object
	const QuizResults = {
		// Send data to Zapier with retry logic
		sendToZapier: (params, maxAttempts = 3, delay = 1000) => {
			const ZAPIER_WEBHOOK_URL = 'https://hooks.zapier.com/hooks/catch/10900898/2zlu7dg/';
			const webhookData = {};
			params.forEach((value, key) => webhookData[key] = value);
			let attempts = 0;
			const attemptSend = async () => {
				while (attempts < maxAttempts) {
					try {
						const response = await fetch(ZAPIER_WEBHOOK_URL, {
							method: 'POST',
							body: JSON.stringify(webhookData),
							headers: { 'Content-Type': 'application/json' }
						});
						if (!response.ok) throw new Error(`Status: ${response.status}`);
						console.log('Data sent to Zapier on attempt', attempts + 1);
						return response;
					} catch (error) {
						attempts++;
						console.error(`Attempt ${attempts} failed:`, error);
						if (attempts < maxAttempts) {
							console.log(`Retrying in ${delay}ms...`);
							await new Promise(resolve => setTimeout(resolve, delay));
							delay *= 2;
						} else {
							console.error('Max attempts reached.');
						}
					}
				}
			};
			attemptSend();
		},
		// Process URL parameters and update any matching elements
		processGeneralUrlParams: () => {
			console.log('Processing URL parameters...');
			const urlParams = new URLSearchParams(window.location.search);
			QuizResults.sendToZapier(urlParams);
			urlParams.forEach((value, key) => {
				const el = document.getElementById(key);
				if (el) el.textContent = value;
			});
			console.log('Finished processing URL parameters.');
		},
		// Process the weight ("wgt") parameter and update the "can" element
		processCanParam: (calcFactor) => {
			const urlParams = new URLSearchParams(window.location.search);
			const canValue = urlParams.get('wgt');
			if (canValue !== null) {
				const canEl = document.getElementById('can');
				if (canEl) {
					const processed = parseFloat(canValue) * calcFactor;
					canEl.textContent = processed.toFixed(0);
				}
			}
		},
		// Build the mapping from dynamic benefit blocks (type "benefit")
		getMappingFromBlocks: () => {
			const mapping = {};
			{% for block in section.blocks %}
				{% if block.type == 'benefit' %}
					mapping["{{ block.settings.original_mapping_key | escape }}"] = {
						title: "{{ block.settings.benefit_title | escape }}",
						percentage: {{ block.settings.benefit_percentage }}
					};
				{% endif %}
			{% endfor %}
			return mapping;
		},
		// Generate dynamic benefit data based on the "gls" URL parameter
		getQuizBenefitsData: (goalsValue) => {
			const mapping = QuizResults.getMappingFromBlocks();
			const data = [];
			if (goalsValue) {
				goalsValue.split(',').forEach(key => {
					const trimmed = key.trim();
					if (trimmed && trimmed.toLowerCase() !== 'other') {
						if (mapping[trimmed]) {
							data.push({
								goal: mapping[trimmed].title,
								percentage: mapping[trimmed].percentage
							});
						} else {
							data.push({ goal: trimmed, percentage: 80 });
						}
					}
				});
			}
			return data;
		},
		// Retrieve static benefits (blocks of type "static_benefit")
		getStaticBenefits: () => {
			const staticBenefits = [];
			{% for block in section.blocks %}
				{% if block.type == 'static_benefit' %}
					staticBenefits.push({
						goal: "{{ block.settings.benefit_title | escape }}",
						percentage: {{ block.settings.benefit_percentage }}
					});
				{% endif %}
			{% endfor %}
			return staticBenefits;
		},
		// Render the benefit bars using a document fragment and ARIA attributes for accessibility
		renderResultsBars: (benefits, headerText) => {
			const container = document.getElementById('results-bars-container');
			if (!container) return;
			container.innerHTML = '';
			const header = document.createElement('h4');
			header.textContent = headerText;
			header.style.marginBottom = '2rem';
			container.appendChild(header);

			const fragment = document.createDocumentFragment();
			benefits.forEach((item, idx) => {
				const barWrapper = document.createElement('div');
				barWrapper.className = 'quiz-bar-wrapper mb-8';
				barWrapper.style.animationDelay = `${idx * 0.15}s`;

				const labelContainer = document.createElement('div');
				labelContainer.className = 'quiz-bar-label';
				labelContainer.style.display = 'flex';
				labelContainer.style.justifyContent = 'start';
				labelContainer.style.gap = '1rem';
				labelContainer.style.alignItems = 'center';

				const labelText = document.createElement('span');
				labelText.textContent = item.goal;

				const percentageText = document.createElement('span');
				percentageText.textContent = `${item.percentage}%`;
				percentageText.className = 'quiz-percentage';
				percentageText.style.color = 'var(--primary-color)';

				labelContainer.append(labelText, percentageText);

				const progressBarContainer = document.createElement('div');
				progressBarContainer.className = 'quiz-bar-container';

				const progressBarFill = document.createElement('div');
				progressBarFill.className = 'quiz-bar-fill';
				progressBarFill.setAttribute('data-target-width', item.percentage);
				// Add ARIA attributes for accessibility
				progressBarFill.setAttribute('role', 'progressbar');
				progressBarFill.setAttribute('aria-valuenow', item.percentage);
				progressBarFill.setAttribute('aria-valuemin', '0');
				progressBarFill.setAttribute('aria-valuemax', '100');

				progressBarContainer.appendChild(progressBarFill);
				barWrapper.append(labelContainer, progressBarContainer);
				fragment.appendChild(barWrapper);
			});
			container.appendChild(fragment);

			// Trigger animation after a short delay
			setTimeout(() => {
				document.querySelectorAll('.quiz-bar-fill').forEach(bar => {
					const target = bar.getAttribute('data-target-width');
					bar.style.width = `${target}%`;
				});
			}, 100);
		},
		// Process the "gls" parameter and append static benefits at the end
		processGoalsParam: (benefitsHeader) => {
			const urlParams = new URLSearchParams(window.location.search);
			const goalsValue = urlParams.get('gls');
			const dynamicBenefits = QuizResults.getQuizBenefitsData(goalsValue);
			const staticBenefits = QuizResults.getStaticBenefits();
			const combined = dynamicBenefits.concat(staticBenefits);
			QuizResults.renderResultsBars(combined, benefitsHeader);
		},
		// Initialize the section
		init: () => {
			const section = document.getElementById('section-{{ section.id }}');
			if (!section) return;
			const params = new URLSearchParams(window.location.search);
			if (params.get('cta') === 'true') {
				document.querySelectorAll('.hide-on-cta').forEach(el => el.remove());
			}
			if ({{ section.settings.display_on_url_param | json }} && params.get('cta') !== 'true') {
				section.remove();
				return;
			}
			const calcFactor = parseFloat("{{ section.settings.calc_factor }}");
			const benefitsHeaderText = "{{ section.settings.benefits_header | escape }}";
			// Always process dynamic mapping from URL and then append static benefits
			QuizResults.processGoalsParam(benefitsHeaderText);
			QuizResults.processGeneralUrlParams();
			QuizResults.processCanParam(calcFactor);
		}
	};

	// Initialize when DOM is ready
	document.addEventListener('DOMContentLoaded', QuizResults.init);
</script>

{% schema %}
{
	"name": "Quiz Results V2",
	"class": "quiz-results-section",
	"settings": [
		{
			"type": "text",
			"id": "heading_pre",
			"label": "Heading Text (before dynamic weight)",
			"default": "You can lose at least"
		},
		{
			"type": "text",
			"id": "heading_post",
			"label": "Heading Text (after dynamic weight)",
			"default": "lbs in just 3 months with Curaslim"
		},
		{
			"type": "text",
			"id": "subheading",
			"label": "Subheading",
			"default": "No Injectables Required!"
		},
		{
			"type": "image_picker",
			"id": "result_image",
			"label": "Results Image"
		},
		{
			"type": "text",
			"id": "benefits_header",
			"label": "Benefits Header",
			"default": "Upon reaching their goal users also report:"
		},
		{
			"type": "text",
			"id": "calc_factor",
			"label": "Calculation Factor for Weight",
			"default": "0.075"
		},
		{
			"type": "checkbox",
			"id": "display_on_url_param",
			"label": "Display Only on cta=true URL Param"
		},
		{
			"type": "text",
			"id": "section_additional_classes",
			"label": "Additional Classes"
		}
	],
	"blocks": [
		{
			"type": "benefit",
			"name": "Dynamic Benefit",
			"settings": [
				{
					"type": "text",
					"id": "original_mapping_key",
					"label": "Original Mapping Key",
					"default": "Improve health & reduce risks"
				},
				{
					"type": "text",
					"id": "benefit_title",
					"label": "Benefit Title",
					"default": "Improved Well-Being"
				},
				{
					"type": "number",
					"id": "benefit_percentage",
					"label": "Benefit Percentage",
					"default": 89
				}
			]
		},
		{
			"type": "static_benefit",
			"name": "Static Benefit",
			"settings": [
				{
					"type": "text",
					"id": "benefit_title",
					"label": "Benefit Title",
					"default": "Extra Benefit"
				},
				{
					"type": "number",
					"id": "benefit_percentage",
					"label": "Benefit Percentage",
					"default": 96
				}
			]
		}
	],
	"presets": [
		{
			"name": "Quiz Results"
		}
	]
}
{% endschema %}
