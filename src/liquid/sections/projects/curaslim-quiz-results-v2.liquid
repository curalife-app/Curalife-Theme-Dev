<section class="quiz-results-section">
	<div class="container text-center">
		<div class="flex-col flex items-center gap-y-8 gap-x-20 justify-between [&>*]:w-1/2 mbl:[&>*]:w-full">
			<div class="titles">
				<h1 class="h1 !text-black text-center font-thin mbl:text-start">
					You can lose at least
					<span class="text-[--primary]"><span id="can"></span> lbs</span><br class="desktop">
					in just 6 months with Curaslim
				</h1>
				<p class="text-[--bronze] text-center mbl:text-start italic font-bold text-[22px]">
					No Injectables Required!
				</p>
			</div>

			<div class="estimated-results mbl:flex-col flex items-center justify-between w-full gap-8">
				<img class="mbl:my-4 m-0" src="{{ 'Group_1597877953.svg' | file_url }}" alt="Curaslim Quiz Results">
				<div class="estimated-results-wrapper mbl:w-full w-1/2" id="results-bars-container">
					<!-- The results bars will be inserted here by JS -->
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	@media (max-width: 768px) {
		.quiz-results-section .titles h1,
		.quiz-results-section .titles p {
			text-align: start;
		}

		h4 {
			font-size: 5vw;
		}

		.quiz-results-section .quiz-bar-label {
			font-size: 5vw;
		}
	}

	h1 {
		font-size: 60px !important;
	}

	.quiz-bar-wrapper {
		opacity: 0;
		transform: translateY(20px);
		animation: fadeInUp 0.5s forwards;
	}
	h4 {
		text-align: start;
	}
	.quiz-bar-label {
		margin-bottom: 0.5rem;
		font-style: italic;
		font-size: 26px;
		text-align: start;
	}
	.quiz-percentage {
		/* Optional styling for percentage text */
		font-weight: bold;
	}
	.quiz-bar-container {
		background: var(--bg-color, #f3f3f3);
		border-radius: 9999px;
		height: 1rem;
		overflow: hidden;
		position: relative;
	}
	.quiz-bar-fill {
		background: var(--primary-color, #2563eb);
		height: 100%;
		line-height: normal;
		color: white;
		text-align: right;
		padding-right: 0.5rem;
		transition: width 1.5s ease-out;
	}
	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>

<script>
	function getQuizBenefitsData(goalsValue) {
		// Mapping of URL goals to new title and percentage
		const mapping = {
			"Improve health & reduce risks": { title: "Improved Well-Being", percentage: 89 },
			"Increase your energy levels": { title: "Boosted Energy", percentage: 88 },
			"Feel great in your clothes": { title: "Wardrobe Freedom", percentage: 81 },
			"Enhance your appearance": { title: "Happy with Appearance", percentage: 86 },
			"Elevate your self-confidence": { title: "More Self-Confident", percentage: 83 },
			"Boost physical performance": { title: "Enhanced Performance", percentage: 82 }
		};

		let quizBenefitsData = [];
		if (goalsValue !== null) {
			const goalsArray = goalsValue.split(',');
			goalsArray.forEach(goal => {
				const trimmedGoal = goal.trim();
				if (trimmedGoal.toLowerCase() !== 'other' && trimmedGoal !== '') {
					if (mapping[trimmedGoal]) {
						quizBenefitsData.push({
							goal: mapping[trimmedGoal].title,
							percentage: mapping[trimmedGoal].percentage
						});
					} else {
						// Fallback: if the goal is not in the mapping, you can set a default percentage.
						quizBenefitsData.push({ goal: trimmedGoal, percentage: 80 });
					}
				}
			});
		}

		// Append the static goal at the end
		quizBenefitsData.push({ goal: "Hunger & Portion Control", percentage: 96 });

		return quizBenefitsData;
	}

	/**
	 * Sends data to Zapier with retry logic for improved reliability.
	 *
	 * @param {URLSearchParams} params - The URL parameters to be sent.
	 * @param {number} [maxAttempts=3] - Maximum number of attempts.
	 * @param {number} [delay=1000] - Initial delay between retries in milliseconds.
	 */
	async function sendToZapier(params, maxAttempts = 3, delay = 1000) {
		const ZAPIER_WEBHOOK_URL = 'https://hooks.zapier.com/hooks/catch/10900898/2zlu7dg/';
		const webhookData = {};
		params.forEach((value, key) => {
			webhookData[key] = value;
		});

		let attempts = 0;
		while (attempts < maxAttempts) {
			try {
				const response = await fetch(ZAPIER_WEBHOOK_URL, {
					method: 'POST',
					body: JSON.stringify(webhookData),
					headers: { 'Content-Type': 'application/json' }
				});
				if (!response.ok) {
					throw new Error('Network response was not ok: ' + response.status);
				}
				console.log('Data successfully sent to Zapier on attempt', attempts + 1);
				return response;
			} catch (error) {
				attempts++;
				console.error(`Attempt ${attempts} failed to send data to Zapier:`, error);
				if (attempts < maxAttempts) {
					console.log(`Retrying in ${delay}ms...`);
					await new Promise(resolve => setTimeout(resolve, delay));
					delay *= 2; // Exponential backoff
				} else {
					console.error('Max attempts reached. Giving up on sending data to Zapier.');
				}
			}
		}
	}

	function processGeneralUrlParams() {
		console.log('Processing general URL parameters...');
		const urlParams = new URLSearchParams(window.location.search);
		// Fire-and-forget the Zapier call. The retry logic inside handles errors.
		sendToZapier(urlParams);

		urlParams.forEach((value, key) => {
			console.log(`Processing parameter: ${key} with value: ${value}`);
			const element = document.getElementById(key);
			if (element) {
				console.log(`Found element with ID: ${key}. Setting text content to: ${value}`);
				element.textContent = value;
			} else {
				console.warn(`No element found with ID: ${key}`);
			}
		});
		console.log('Finished processing general URL parameters.');
	}

	function processCanParam() {
		console.log("Processing 'can' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const canValue = urlParams.get('wgt');
		if (canValue !== null) {
			const element = document.getElementById('can');
			if (element) {
				// Simplified calculation: original value * 0.075
				const processedValue = parseFloat(canValue) * 0.075;
				console.log(`Original value of 'wgt': ${canValue}, Processed value: ${processedValue}`);
				element.textContent = processedValue.toFixed(0);
			} else {
				console.warn("No element found with ID: 'can'");
			}
		}
		console.log("Finished processing 'can' URL parameter.");
	}

	function processGoalsParam() {
		console.log("Processing 'gls' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const goalsValue = urlParams.get('gls');

		const quizBenefitsData = getQuizBenefitsData(goalsValue);
		console.log("Quiz Benefits Data:", quizBenefitsData);
		renderResultsBars(quizBenefitsData);
		console.log("Finished processing 'gls' URL parameter.");
	}

	function renderResultsBars(benefits) {
		const container = document.getElementById('results-bars-container');
		if (!container) return;

		// Clear any existing content
		container.innerHTML = '';

		// Add the title header
		const header = document.createElement('h4');
		header.textContent = "CuraSlim Users Also Notice:";
		header.style.marginBottom = '2rem';
		container.appendChild(header);

		benefits.forEach((item, idx) => {
			// Create the container for each bar
			const barWrapper = document.createElement('div');
			barWrapper.className = 'quiz-bar-wrapper mb-8';
			barWrapper.style.animationDelay = `${idx * 0.15}s`;

			// Create a flex container for the goal title and its percentage
			const labelContainer = document.createElement('div');
			labelContainer.className = 'quiz-bar-label';
			labelContainer.style.display = 'flex';
			labelContainer.style.justifyContent = 'start';
			labelContainer.style.gap = '1rem';
			labelContainer.style.alignItems = 'center';

			const labelText = document.createElement('span');
			labelText.textContent = item.goal;

			const percentageText = document.createElement('span');
			percentageText.textContent = `${item.percentage}%`;
			percentageText.className = 'quiz-percentage';
			percentageText.style.color = 'var(--primary-color)';

			labelContainer.appendChild(labelText);
			labelContainer.appendChild(percentageText);

			// Create the progress bar container
			const progressBarContainer = document.createElement('div');
			progressBarContainer.className = 'quiz-bar-container';

			// Create the progress bar fill element
			const progressBarFill = document.createElement('div');
			progressBarFill.className = 'quiz-bar-fill';
			progressBarFill.setAttribute('data-target-width', item.percentage);

			// Assemble the elements
			progressBarContainer.appendChild(progressBarFill);
			barWrapper.appendChild(labelContainer);
			barWrapper.appendChild(progressBarContainer);
			container.appendChild(barWrapper);
		});

		// Trigger the animation after a short delay to ensure elements are rendered
		setTimeout(() => {
			document.querySelectorAll('.quiz-bar-fill').forEach(bar => {
				const targetWidth = bar.getAttribute('data-target-width');
				bar.style.width = `${targetWidth}%`;
			});
		}, 100);
	}

	document.addEventListener('DOMContentLoaded', () => {
		processGeneralUrlParams();
		processCanParam();
		processGoalsParam();
	});
</script>

{% schema %}
	{
		"name": "Quiz Results V2",
		"class": "quiz-results-section",
		"settings": [],
		"presets": [
			{
				"name": "Quiz Results"
			}
		]
	}
{% endschema %}
