<section class="quiz-results-section">
	<div class="container text-center">
		<div class="flex-col flex items-center gap-y-8 gap-x-20 justify-between [&>*]:w-1/2 mbl:[&>*]:w-full">
			<div class="titles">
				<h1 class="h1 !text-black text-center text-[25px] font-thin mbl:text-start">
					You can lose at least
					<span class="text-[--primary]"><span id="can"></span> lbs</span><br>
					in just 6 months with Curaslim
				</h1>
				<p class="text-[--bronze] text-center mbl:text-start font-bold font-[21px]">No Injectables Required!</p>
			</div>

			<div class="estimated-results mbl:flex-col flex items-center justify-between w-full gap-8">
				<img class="m-0" src="{{ 'curaslim_results_v2.png' | file_url }}" alt="Curaslim Quiz Results">
				<div class="estimated-results-wrapper mbl:w-full w-1/2">
					{% assign quiz_benefits_raw = "Reduced cravings|95,Boosted energy|85,Elevated self-confidence|90,Quick results|82" %}
					{% render 'quiz-results-bars', benefits_string: quiz_benefits_raw %}
				</div>
			</div>
		</div>
	</div>
</section>

<style>
	@media (max-width: 768px) {
		.quiz-results-section .titles h1,
		.quiz-results-section .titles p {
			text-align: start;
		}
	}
</style>

<script>
	function sendToZapier(params) {
		// Replace this URL with your actual Zapier webhook URL
		const ZAPIER_WEBHOOK_URL = 'https://hooks.zapier.com/hooks/catch/10900898/2zlu7dg/';

		// Create an object with all URL parameters
		const webhookData = {};
		params.forEach((value, key) => {
			webhookData[key] = value;
		});

		// Send the data to Zapier
		fetch(ZAPIER_WEBHOOK_URL, {
			method: 'POST',
			body: JSON.stringify(webhookData),
			headers: {
				'Content-Type': 'application/json'
			}
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				console.log('Data successfully sent to Zapier');
			})
			.catch(error => {
				console.error('Error sending data to Zapier:', error);
			});
	}

	function processGeneralUrlParams() {
		console.log('Processing general URL parameters...');
		const urlParams = new URLSearchParams(window.location.search);

		// Send parameters to Zapier first
		sendToZapier(urlParams);

		urlParams.forEach((value, key) => {
			console.log(`Processing parameter: ${key} with value: ${value}`);
			const element = document.getElementById(key);
			if (element) {
				console.log(`Found element with ID: ${key}. Setting text content to: ${value}`);
				element.textContent = value;
			} else {
				console.warn(`No element found with ID: ${key}`);
			}
		});

		console.log('Finished processing general URL parameters.');
	}

	// Rest of your existing functions remain the same
	function processCanParam() {
		console.log("Processing 'can' URL parameter...");
		const urlParams = new URLSearchParams(window.location.search);
		const canValue = urlParams.get('wgt');

		if (canValue !== null) {
			const element = document.getElementById('can');
			if (element) {
				const processedValue = parseFloat(canValue) - (parseFloat(canValue) - parseFloat(canValue) * 0.075);
				console.log(`Original value of 'wgt': ${canValue}, Processed value: ${processedValue}`);
				element.textContent = processedValue.toFixed(0);
			} else {
				console.warn(`No element found with ID: can`);
			}
		}

		console.log("Finished processing 'can' URL parameter.");
	}

	document.addEventListener('DOMContentLoaded', () => {
		processGeneralUrlParams();
		processCanParam();
	});
</script>

{% schema %}
	{
		"name": "Quiz Results V2",
		"class": "quiz-results-section",
		"settings": [],
		"presets": [
			{
				"name": "Quiz Results"
			}
		]
	}
{% endschema %}
