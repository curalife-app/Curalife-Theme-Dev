{% assign buttonURL = page.metafields.custom.next_page_link | default: section.settings.button_link %}
{% assign buttonName = section.settings.button_element_name %}

<!-- Sticky Button -->
{% if section.settings.is_sticky %}
	<a id="sticky-bar" href="{{ buttonURL }}" class="clickable container">
		<button
			class="sticky-button"
			{% if buttonName %}
				name="track:button-click|name:{{ buttonName }}"
			{% endif %}
			aria-label="{{ section.settings.button_text }}">
			{{ section.settings.button_text }}
		</button>
	</a>
{% else %}
	<section id="button-section-{{ section.id }}" class="button-section {{ section.settings.section_additional_classes }} {% if section.settings.is_sticky %}hidden mbl:w-full{% endif %}">
		<div class="container flex justify-center">
			{% render 'button',
				button_text: section.settings.button_text,
				button_url: buttonURL,
				button_url_global: buttonURL,
				button_icon: '',
				button_style: '',
				button_text_color: section.settings.button_title_color,
				button_bg_color: section.settings.button_bg_color,
				button_bg_hover: section.settings.button_bg_hover,
				button_text_color_hover: section.settings.button_title_color_hover,
				button_is_new_tab: section.settings.button_is_new_tab,
				button_is_link_to_top: false,
				button_is_prerender_link: false,
				button_under_title: section.settings.button_under_title,
				button_under_title_color: section.settings.button_under_title_color,
				button_under_title_classes: section.settings.button_under_title_classes,
				buttonName: buttonName,
				button_id: section.id
			%}
		</div>
	</section>
{% endif %}

<style>
	/* Base section styles */
	#button-section-{{ section.id }} {
			padding-top: {% if section.settings.padding_top != 50 and section.settings.padding_top != blank %}{{ section.settings.padding_top }}px{% endif %};
			padding-bottom: {% if section.settings.padding_bottom != 50 and section.settings.padding_top != blank %}{{ section.settings.padding_bottom }}px{% endif %};
			background-color: {{ section.settings.bg_color }};
	}

	/* Hidden state for button section */
	#button-section-{{ section.id }}.hidden {
			display: none;
	}

	/* Mobile padding adjustments */
	@media screen and (max-width: 768px) {
			#button-section-{{ section.id }} {
					padding-top: {% if section.settings.padding_top_mobile != blank %}{{ section.settings.padding_top_mobile }}vw{% endif %};
					padding-bottom: {% if section.settings.padding_bottom_mobile != blank %}{{ section.settings.padding_bottom_mobile }}vw{% endif %};
			}
	}
</style>

{% if section.settings.is_pass_url_parameters %}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			var baseLink = document.getElementById('button-link').href;
			var params = new URLSearchParams(window.location.search);
			document.getElementById('button-link').href = baseLink + '?' + params.toString();
		});
	</script>
{% endif %}

<!-- JavaScript for Sticky Button Behavior -->
{% if section.settings.is_sticky %}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const stickyBar = document.getElementById('sticky-bar');
			const stickyHideSetting = "{{ section.settings.sticky_hide | default: '' | strip }}";
			const hideOnElements = [
				...new Set([
					'.cta-section',
					...stickyHideSetting
						.split(',')
						.map(s => s.trim())
						.filter(s => s !== '')
				])
			];

			// Track intersecting elements for visibility state
			const intersectingElements = new Set();

			// Handle visibility based on intersection changes
			const observer = new IntersectionObserver(
				entries => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							intersectingElements.add(entry.target);
						} else {
							intersectingElements.delete(entry.target);
						}
					});

					// Set visibility - show when no elements intersect
					if (intersectingElements.size === 0) {
						stickyBar.classList.add('visible');
					} else {
						stickyBar.classList.remove('visible');
					}
				},
				{
					threshold: [0, 0.1, 0.2, 0.3],
					rootMargin: '50px'
				}
			);

			// Initialize element tracking
			function setupVisibilityTracking() {
				if (hideOnElements.length === 0) {
					// If no hide elements specified, always show button
					stickyBar.classList.add('visible');
					return;
				}

				hideOnElements.forEach(selector => {
					if (selector) {
						const elements = document.querySelectorAll(selector);
						elements.forEach(element => {
							observer.observe(element);
						});
					}
				});

				// Set initial visibility
				if (!document.querySelectorAll(hideOnElements.join(',')).length) {
					stickyBar.classList.add('visible');
				}
			}

			// Initialize tracking
			setupVisibilityTracking();
		});
	</script>

	<style>
		/* Sticky bar container */
		#sticky-bar {
				position: fixed;
				bottom: 10px;
				left: 10px;
				opacity: 0;
				pointer-events: none;
				z-index: 50;
				width: 300px;
				max-width: 300px;
				text-align: center;
				transform: translateX(-50%);
		}

		/* Visible state for sticky bar */
		#sticky-bar.visible {
				opacity: 1;
				pointer-events: auto;
				animation: popIn 0.5s forwards;
		}

		/* Button styling */
		#sticky-bar .sticky-button {
				width: 100%;
				padding: 0.75rem 1.5rem;
				background-color: {{ section.settings.button_bg_color }};
				color: {{ section.settings.button_title_color }};
				font-weight: bold;
				font-size: 1.5rem;
				box-shadow: 0 5px 0px #897854;
				border-radius: 0.5rem;
				display: flex;
				align-items: center;
				justify-content: center;
				border: none;
				cursor: pointer;
		}

		/* Mobile responsive adjustments */
		@media (max-width: 768px) {
				#sticky-bar {
						width: 100%;
						bottom: 3vw;
						left: 3vw;

						button {
							width: 94vw;
						}
				}
		}

		/* Mobile gradient overlay */
		@media (max-width: 768px) {
				#sticky-bar::after {
						content: " ";
						width: 100vw;
						height: 25vw;
						display: inline-block;
						background: linear-gradient(0deg, rgb(255 255 255) 40%, rgb(255 255 255 / 0%) 90%);
						position: absolute;
						left: -3vw;
						bottom: -3vw;
						z-index: -1;
				}
		}

		/* Animation keyframes */
		@keyframes popIn {
				0% {
						opacity: 0;
						transform: translateY(100%) scale(0.9);
				}
				80% {
						opacity: 1;
						transform: translateY(-10%) scale(1.05);
				}
				100% {
					opacity: 1;
					transform: translateY(0) scale(1);
				}
		}
	</style>
{% endif %}

{% schema %}
	{
		"name": "Button",
		"disabled_on": {
			"groups": ["header", "footer"]
		},
		"settings": [
			{
				"type": "text",
				"id": "button_text",
				"label": "Button Text"
			},
			{
				"type": "url",
				"id": "button_link",
				"label": "Button Link"
			},
			{
				"type": "checkbox",
				"id": "is_pass_url_parameters",
				"label": "Pass URL Parameters"
			},
			{
				"type": "checkbox",
				"id": "is_sticky",
				"label": "Make Button Sticky (Float at Bottom)"
			},
			{
				"type": "text",
				"id": "sticky_hide",
				"label": "Hide Button When Scrolled Over Elements (CSS Selectors)"
			},
			{
				"type": "color",
				"id": "bg_color",
				"label": "Background Color"
			},
			{
				"type": "color",
				"id": "button_bg_color",
				"label": "Button Background Color"
			},
			{
				"type": "color",
				"id": "button_title_color",
				"label": "Button Title Color"
			},
			{
				"type": "color",
				"id": "button_bg_hover",
				"label": "Button Hover Background Color"
			},
			{
				"type": "color",
				"id": "button_title_color_hover",
				"label": "Button Hover Title Color"
			},
			{
				"type": "header",
				"content": "Under Title Settings"
			},
			{
				"type": "text",
				"id": "button_under_title",
				"label": "Under Title"
			},
			{
				"type": "color",
				"id": "button_under_title_color",
				"label": "Under Title Color"
			},
			{
				"type": "text",
				"id": "button_under_title_classes",
				"label": "Under Title Additional Classes"
			},
			{
				"type": "header",
				"content": "Padding"
			},
			{
				"type": "range",
				"id": "padding_top",
				"label": "Padding Top (px unit)",
				"min": 0,
				"max": 200,
				"step": 10,
				"unit": "px",
				"default": 50
			},
			{
				"type": "range",
				"id": "padding_bottom",
				"label": "Padding Bottom (px unit)",
				"min": 0,
				"max": 200,
				"step": 10,
				"unit": "px",
				"default": 50
			},
			{
				"type": "range",
				"id": "padding_top_mobile",
				"label": "Padding Top on Mobile (vw unit)",
				"min": 0,
				"max": 30,
				"step": 1,
				"unit": "vw",
				"default": 10
			},
			{
				"type": "range",
				"id": "padding_bottom_mobile",
				"label": "Padding Bottom on Mobile (vw unit)",
				"min": 0,
				"max": 30,
				"step": 1,
				"unit": "vw",
				"default": 10
			},
			{
				"type": "checkbox",
				"id": "remove_padding_top",
				"label": "Remove Top Padding"
			},
			{
				"type": "checkbox",
				"id": "remove_padding_bottom",
				"label": "Remove Bottom Padding"
			},
			{
				"type": "text",
				"id": "section_additional_classes",
				"label": "Additional Classes"
			},
			{
				"type": "text",
				"id": "button_element_name",
				"label": "Element Name (for tracking)"
			},
			{
				"type": "select",
				"id": "animation",
				"label": "Animation",
				"options": [
					{
						"value": "none",
						"label": "None"
					},
					{
						"value": "fade-zoom-in",
						"label": "Fade"
					},
					{
						"value": "fade-up",
						"label": "Fade Up"
					},
					{
						"value": "fade-down",
						"label": "Fade Down"
					},
					{
						"value": "fade-left",
						"label": "Fade Left"
					},
					{
						"value": "fade-right",
						"label": "Fade Right"
					},
					{
						"value": "fade-up-right",
						"label": "Fade Up Right"
					},
					{
						"value": "fade-up-left",
						"label": "Fade Up Left"
					},
					{
						"value": "fade-down-right",
						"label": "Fade Down Right"
					},
					{
						"value": "fade-down-left",
						"label": "Fade Down Left"
					},
					{
						"value": "flip-up",
						"label": "Flip Up"
					},
					{
						"value": "flip-down",
						"label": "Flip Down"
					},
					{
						"value": "flip-left",
						"label": "Flip Left"
					},
					{
						"value": "flip-right",
						"label": "Flip Right"
					},
					{
						"value": "slide-up",
						"label": "Slide Up"
					},
					{
						"value": "slide-down",
						"label": "Slide Down"
					},
					{
						"value": "slide-left",
						"label": "Slide Left"
					},
					{
						"value": "slide-right",
						"label": "Slide Right"
					},
					{
						"value": "zoom-in",
						"label": "Zoom In"
					},
					{
						"value": "zoom-in-up",
						"label": "Zoom In Up"
					},
					{
						"value": "zoom-in-down",
						"label": "Zoom In Down"
					},
					{
						"value": "zoom-in-left",
						"label": "Zoom In Left"
					},
					{
						"value": "zoom-in-right",
						"label": "Zoom In Right"
					},
					{
						"value": "zoom-out",
						"label": "Zoom Out"
					},
					{
						"value": "zoom-out-up",
						"label": "Zoom Out Up"
					},
					{
						"value": "zoom-out-down",
						"label": "Zoom Out Down"
					},
					{
						"value": "zoom-out-left",
						"label": "Zoom Out Left"
					},
					{
						"value": "zoom-out-right",
						"label": "Zoom Out Right"
					}
				],
				"default": "none"
			}
		],
		"presets": [
			{
				"name": "Button"
			}
		]
	}
{% endschema %}
