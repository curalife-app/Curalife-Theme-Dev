{% comment %}
  Development Mode Detection

  This snippet provides a global 'isDevelopment' variable that you can use throughout
  your theme to conditionally show/hide elements based on development vs production.

  Usage:
  1. Include this snippet at the top of theme.liquid or another global template
  2. Use the 'isDevelopment' variable in your theme:
     {% if isDevelopment %}
       <div class="dev-notice">Development Mode</div>
     {% endif %}
{% endcomment %}

{% assign isDevelopment = false %}

{% comment %}
  Option 1: Local development URLs
{% endcomment %}
{% if request.host contains '127.0.0.1' or request.host contains 'localhost' %}
  {% assign isDevelopment = true %}
{% endif %}

{% comment %}
  Option 2: Shopify preview URLs from the theme dev command
{% endcomment %}
{% if request.host contains '.shopifypreview.com' or request.path contains 'preview_theme_id=' %}
  {% assign isDevelopment = true %}
{% endif %}

{% comment %}
  Option 3: Check URL for dev_mode parameter (from Shopify CLI hot reload script)
{% endcomment %}
{% if request.query_string contains 'dev_mode=1' %}
  {% assign isDevelopment = true %}
{% endif %}

{% comment %}
  Option 4: Set development mode based on specific myshopify URLs
  Add your development store URLs here if you know them
{% endcomment %}
{% if request.host contains 'dev-' or request.host contains '-dev.' or request.host contains '-development.' %}
  {% assign isDevelopment = true %}
{% endif %}

{% comment %}
  Option 5: Force development mode via theme setting override
{% endcomment %}
{% if settings.force_development_mode %}
  {% assign isDevelopment = true %}
{% endif %}

{% comment %}
  Use JavaScript to check for URL parameters and optionally set development mode
{% endcomment %}
<script>
  (function() {
    // Function to get URL parameters
    function getUrlParameter(name) {
      name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
      var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
      var results = regex.exec(location.search);
      return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }

    // Check if dev_mode parameter is present
    var fromHotReload = false;
    if (getUrlParameter('dev_mode') === '1') {
      window.isDevelopmentMode = true;
      fromHotReload = document.referrer.indexOf('theme dev') !== -1;

      // Create a cookie to maintain development mode across page loads
      document.cookie = "dev_mode=1; path=/; max-age=3600"; // Expires in 1 hour
    } else if (document.cookie.indexOf('dev_mode=1') !== -1) {
      // Check for the development mode cookie
      window.isDevelopmentMode = true;
    } else {
      window.isDevelopmentMode = {% if isDevelopment %}true{% else %}false{% endif %};
    }

    // Log more detailed development mode information
    if (window.isDevelopmentMode) {
      console.log('%c[Dev Mode]%c Active', 'background:#2196F3; color:white; padding:2px 6px; border-radius:3px;', 'color:#2196F3; font-weight:bold;');
      if (fromHotReload) {
        console.log('%c[Dev Mode]%c Enabled via Shopify hot reload script', 'background:#2196F3; color:white; padding:2px 6px; border-radius:3px;', 'color:#2196F3;');
      }
    }

    // Function to append dev_mode parameter to all internal links
    function appendDevModeToLinks() {
      if (!window.isDevelopmentMode) return;

      var currentHost = window.location.hostname;
      var addedCounter = 0;

      // Wait for DOM to be ready
      document.addEventListener('DOMContentLoaded', function() {
        // Process all links
        var links = document.getElementsByTagName('a');
        for (var i = 0; i < links.length; i++) {
          var link = links[i];
          var href = link.getAttribute('href');

          // Skip if there's no href, it's already got the parameter, or it's an external/anchor link
          if (!href ||
              href.indexOf('dev_mode=1') !== -1 ||
              href.indexOf('#') === 0 ||
              href.indexOf('mailto:') === 0 ||
              href.indexOf('tel:') === 0 ||
              (href.indexOf('http') === 0 && href.indexOf(currentHost) === -1)) {
            continue;
          }

          // Add the parameter
          var separator = href.indexOf('?') !== -1 ? '&' : '?';
          link.setAttribute('href', href + separator + 'dev_mode=1');
          addedCounter++;
        }

        // Also handle dynamically added links with a MutationObserver
        var observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            if (mutation.type === 'childList') {
              mutation.addedNodes.forEach(function(node) {
                // Only process element nodes
                if (node.nodeType !== 1) return;

                // Check if it's a link or contains links
                if (node.tagName === 'A') {
                  processLink(node);
                } else {
                  var links = node.getElementsByTagName('a');
                  for (var i = 0; i < links.length; i++) {
                    processLink(links[i]);
                  }
                }
              });
            }
          });
        });

        function processLink(link) {
          var href = link.getAttribute('href');

          // Skip if there's no href, it's already got the parameter, or it's an external/anchor link
          if (!href ||
              href.indexOf('dev_mode=1') !== -1 ||
              href.indexOf('#') === 0 ||
              href.indexOf('mailto:') === 0 ||
              href.indexOf('tel:') === 0 ||
              (href.indexOf('http') === 0 && href.indexOf(currentHost) === -1)) {
            return;
          }

          // Add the parameter
          var separator = href.indexOf('?') !== -1 ? '&' : '?';
          link.setAttribute('href', href + separator + 'dev_mode=1');
        }

        // Start observing the entire document
        observer.observe(document.documentElement, {
          childList: true,
          subtree: true
        });

        console.log('[Dev Mode] Added dev_mode=1 to ' + addedCounter + ' links');
      });
    }

    // Add dev_mode parameter to all links if in development mode
    appendDevModeToLinks();

    // Create dev indicator if needed
    if (window.isDevelopmentMode && {% if settings.show_development_indicator %}true{% else %}false{% endif %}) {
      document.addEventListener('DOMContentLoaded', function() {
        if (!document.querySelector('.dev-topbar')) {
          // Get theme info for display
          var themeName = "{{ shop.name | escape }}";
          var themeID = "{{ theme.id }}";
          var templateName = "{{ template.name | default: 'unknown' }}";
          var templateType = "{{ template.type | default: 'unknown' }}";
          var pageHandle = "{{ page.handle | default: product.handle | default: collection.handle | default: 'unknown' }}";
          var currentDate = new Date().toLocaleString();

          // Determine source of development mode
          var devSource = "Unknown";
          if (getUrlParameter('dev_mode') === '1') {
            devSource = "URL Parameter";
            if (fromHotReload) {
              devSource = "Shopify Hot Reload";
            }
          } else if (document.cookie.indexOf('dev_mode=1') !== -1) {
            devSource = "Cookie";
          } else if (window.location.hostname.includes('localhost') || window.location.hostname.includes('127.0.0.1')) {
            devSource = "Local Dev";
          } else if (window.location.hostname.includes('.shopifypreview.com')) {
            devSource = "Shopify Preview";
          } else if (window.location.hostname.includes('dev-') || window.location.hostname.includes('-dev.')) {
            devSource = "Dev Store";
          } else if ({% if settings.force_development_mode %}true{% else %}false{% endif %}) {
            devSource = "Theme Settings";
          }

          // Create element and set styles
          var topbar = document.createElement('div');
          topbar.className = 'dev-topbar';

          // Add content with theme info
          topbar.innerHTML = `
            <div class="dev-topbar-content">
              <div class="dev-topbar-section">
                <span class="dev-topbar-indicator">Development Mode</span>
                <span class="dev-topbar-source">${devSource}</span>
                <span class="dev-topbar-date">${currentDate}</span>
              </div>
              <div class="dev-topbar-section">
                <span class="dev-topbar-item"><strong>Theme:</strong> ${themeName} (ID: ${themeID})</span>
                <span class="dev-topbar-item"><strong>Template:</strong> ${templateType}.${templateName}</span>
                <span class="dev-topbar-item"><strong>Handle:</strong> ${pageHandle}</span>
              </div>
              <div class="dev-topbar-section">
                <button class="dev-topbar-toggle" onclick="document.querySelector('.dev-topbar').classList.toggle('dev-topbar-collapsed')">▲</button>
                <button class="dev-topbar-close" onclick="this.parentNode.parentNode.parentNode.remove()">×</button>
              </div>
            </div>
          `;

          // Add to document
          document.body.insertBefore(topbar, document.body.firstChild);

          // Add styles
          var style = document.createElement('style');
          style.textContent = `
            .dev-topbar {
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              background: rgba(33, 150, 243, 0.9);
              color: white;
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
              font-size: 12px;
              z-index: 10000;
              box-shadow: 0 1px 3px rgba(0,0,0,0.2);
              transition: all 0.3s ease;
              backdrop-filter: blur(5px);
              -webkit-backdrop-filter: blur(5px);
            }

            .dev-topbar-content {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 6px 12px;
            }

            .dev-topbar-section {
              display: flex;
              align-items: center;
              gap: 12px;
            }

            .dev-topbar-indicator {
              padding: 2px 6px;
              background: rgba(255,255,255,0.2);
              border-radius: 4px;
              font-weight: bold;
            }

            .dev-topbar-source {
              padding: 1px 5px;
              background: rgba(0,0,0,0.2);
              border-radius: 4px;
              font-size: 10px;
              font-weight: normal;
            }

            .dev-topbar-date {
              color: rgba(255,255,255,0.8);
              font-size: 11px;
            }

            .dev-topbar-item {
              background: rgba(0,0,0,0.1);
              padding: 2px 6px;
              border-radius: 4px;
              white-space: nowrap;
            }

            .dev-topbar-toggle, .dev-topbar-close {
              background: rgba(255,255,255,0.2);
              color: white;
              border: none;
              width: 20px;
              height: 20px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              cursor: pointer;
              font-size: 12px;
              line-height: 1;
              padding: 0;
            }

            .dev-topbar-toggle:hover, .dev-topbar-close:hover {
              background: rgba(255,255,255,0.3);
            }

            .dev-topbar-close {
              font-size: 16px;
            }

            .dev-topbar-collapsed {
              transform: translateY(-100%);
              opacity: 0.6;
            }

            .dev-topbar-collapsed:hover {
              transform: translateY(-80%);
              opacity: 1;
            }

            .dev-topbar-collapsed .dev-topbar-toggle {
              transform: rotate(180deg);
            }

            /* Responsive adjustments */
            @media (max-width: 768px) {
              .dev-topbar-section:nth-child(2) {
                display: none;
              }
            }
          `;
          document.head.appendChild(style);

          // Create handle for showing collapsed bar
          var handle = document.createElement('div');
          handle.className = 'dev-topbar-handle';
          handle.innerHTML = 'DEV';
          handle.onclick = function() {
            document.querySelector('.dev-topbar').classList.remove('dev-topbar-collapsed');
          };

          // Add styles for handle
          style.textContent += `
            .dev-topbar-handle {
              position: fixed;
              top: 0;
              left: 50%;
              transform: translateX(-50%);
              background: rgba(33, 150, 243, 0.9);
              color: white;
              font-size: 10px;
              font-weight: bold;
              padding: 2px 8px;
              border-radius: 0 0 4px 4px;
              cursor: pointer;
              z-index: 9999;
              opacity: 0;
              transition: opacity 0.3s ease;
              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            }

            .dev-topbar-collapsed + .dev-topbar-handle {
              opacity: 1;
            }
          `;

          document.body.appendChild(handle);

          // Fix body padding
          var originalBodyPadding = window.getComputedStyle(document.body).paddingTop;
          var originalBodyPosition = window.getComputedStyle(document.body).position;
          document.body.style.paddingTop = (parseInt(originalBodyPadding || 0) + 30) + 'px';
          if (originalBodyPosition === 'static') {
            document.body.style.position = 'relative';
          }
        }
      });
    }

    // Debug panel
    if (getUrlParameter('dev_debug') === '1') {
      document.addEventListener('DOMContentLoaded', function() {
        var debugPanel = document.createElement('div');
        debugPanel.className = 'development-debug';
        debugPanel.style.position = 'fixed';
        debugPanel.style.top = '10px';
        debugPanel.style.right = '10px';
        debugPanel.style.background = '#fff';
        debugPanel.style.border = '2px solid #333';
        debugPanel.style.padding = '15px';
        debugPanel.style.zIndex = '10000';
        debugPanel.style.fontFamily = 'monospace';
        debugPanel.style.maxWidth = '400px';
        debugPanel.style.boxShadow = '0 0 10px rgba(0,0,0,0.2)';

        // Check if this might be a hot reload session
        var fromHotReload = document.referrer.indexOf('theme dev') !== -1;
        var hotReloadIndicator = fromHotReload ? 'Yes' : 'No';

        debugPanel.innerHTML = `
          <h3 style="margin-top: 0; margin-bottom: 10px;">Development Detection Debug</h3>
          <ul style="padding-left: 20px; margin-bottom: 10px;">
            <li>Host: ${window.location.hostname}</li>
            <li>Path: ${window.location.pathname}</li>
            <li>Query: ${window.location.search}</li>
            <li>JS Dev Mode: ${window.isDevelopmentMode}</li>
            <li>Liquid Dev Mode: {% if isDevelopment %}true{% else %}false{% endif %}</li>
            <li>Dev Mode Param: ${getUrlParameter('dev_mode')}</li>
            <li>Dev Cookie: ${document.cookie.indexOf('dev_mode=1') !== -1}</li>
            <li>Links Modified: Yes</li>
            <li>Hot Reload: ${hotReloadIndicator}</li>
          </ul>
          <button onclick="this.parentNode.style.display='none';"
                  style="background: #f44336; color: white; border: none; padding: 5px 10px; cursor: pointer;">
            Close
          </button>
        `;

        document.body.appendChild(debugPanel);
      });
    }
  })();
</script>

{% comment %}
  For backward compatibility only - the JS version is preferred
{% endcomment %}
{% if isDevelopment and settings.show_development_indicator %}
  <style>
    .development-indicator {
      display: none; /* Hide old indicator */
    }
  </style>
{% endif %}