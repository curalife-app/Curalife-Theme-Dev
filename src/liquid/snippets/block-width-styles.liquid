{% comment %}
	Block Width Styles Snippet

	Renders CSS to set the width of a block based on its block_width_percent setting.
	Adjusts the width to account for gaps between columns.

	Parameters:
	- block_id: The ID of the block
	- width_percent: The width percentage from block settings
	- mobile_width_percent: The width percentage from block settings for mobile (defaults to calculated)
	- columns: Number of columns for desktop (default: 2)
	- columns_mobile: Number of columns for mobile (default: 1)
	- gap_width: Gap width in % for desktop (default: 2)
	- gap_width_mobile: Gap width in % for mobile (defaults to gap_width)
{% endcomment %}

{% assign columns = columns | default: 2 %}
{% assign columns_mobile = columns_mobile | default: 1 | plus: 0 %}
{% assign gap_width = gap_width | default: 2 %}
{% assign gap_width_mobile = gap_width_mobile | default: gap_width %}

{% comment %} Calculate gap variables for CSS calc() {% endcomment %}
{% assign total_gaps_desktop = columns | minus: 1 %}
{% assign total_gaps_mobile = columns_mobile | minus: 1 %}

{% comment %} Only generate CSS if we have custom width settings that differ from defaults {% endcomment %}
{% assign should_generate_desktop = false %}
{% assign should_generate_mobile = false %}

{% if width_percent != blank %}
	{% assign should_generate_desktop = true %}
{% endif %}

{% comment %} Only generate mobile CSS for explicit custom widths (not 100% or blank) {% endcomment %}
{% case mobile_width_percent %}
	{% when '75', '66', '50', '33', '25', '20', '16' %}
		{% assign should_generate_mobile = true %}
{% endcase %}

{% if should_generate_desktop or should_generate_mobile %}
	<style>
		{% if should_generate_desktop %}
		/* Custom desktop width using CSS calc() with gap consideration */
		#block-{{ block_id }} {
			width: calc(((100% - ({{ gap_width }}% * {{ total_gaps_desktop }})) / {{ columns }}) * {{ width_percent | divided_by: 100.0 | times: columns }}) !important;
			flex-basis: calc(((100% - ({{ gap_width }}% * {{ total_gaps_desktop }})) / {{ columns }}) * {{ width_percent | divided_by: 100.0 | times: columns }}) !important;
		}
		{% endif %}

		{% if should_generate_mobile %}
		@media (max-width: 768px) {
			#block-{{ block_id }} {
				width: calc(((100% - ({{ gap_width_mobile }}% * {{ total_gaps_mobile }})) / {{ columns_mobile }}) * {{ mobile_width_percent | divided_by: 100.0 | times: columns_mobile }}) !important;
				flex-basis: calc(((100% - ({{ gap_width_mobile }}% * {{ total_gaps_mobile }})) / {{ columns_mobile }}) * {{ mobile_width_percent | divided_by: 100.0 | times: columns_mobile }}) !important;
			}
		}
		{% endif %}
	</style>
{% endif %}
