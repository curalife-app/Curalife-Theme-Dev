{% comment %}
  Account Information Snippet

  This snippet displays the customer's contact information and shipping address in the account page.
  It also handles displaying success messages after contact information is updated.
  It now includes password change functionality right in the same card.

  Usage:
  {% render 'account-info' %}

  Dependencies:
  - Requires customer object to be available
  - Expects certain CSS classes to be defined in the parent template
  - Handles the contact-updated URL parameter for success messages
{% endcomment %}

<div class="account-info-container">
  <div class="info-section contact-address-section">
    <div class="section-header">
      <h3 class="section-title">Personal Information</h3>
      <div class="action-buttons">
        <!-- Removing Manage Addresses button from here -->
      </div>
    </div>
    <div class="section-content">
      <div class="contact-address-grid">
        <div class="contact-info">
          <h4 class="subsection-title">Contact Details</h4>
          <ul class="info-list no-style">
            <li class="info-item">
              <span class="info-label">First Name</span>
              <span class="info-value">{{ customer.first_name }}</span>
            </li>
            <li class="info-item">
              <span class="info-label">Last Name</span>
              <span class="info-value">{{ customer.last_name }}</span>
            </li>
            <li class="info-item">
              <span class="info-label">Email</span>
              <span class="info-value">{{ customer.email }}</span>
            </li>
          </ul>
        </div>

        <div class="address-info">
          <h4 class="subsection-title">Addresses</h4>
          <div class="addresses-list">
            <!-- Add Address button now hidden initially -->
            <button type="button" class="action-button add-address-btn" data-address-toggle style="display: none;">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
              <span>Add New Address</span>
            </button>

            <div id="AddAddress" class="address-form" style="display: none;">
              <div class="form-header">
                <h4>Add New Address</h4>
                <button type="button" class="icon-btn cancel-btn" data-address-toggle title="Cancel">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z" fill="currentColor"/>
                  </svg>
                </button>
              </div>
              {%- form 'customer_address', customer.new_address -%}
                <div class="form-grid">
                  <div class="field">
                    <input type="text" id="AddressFirstNameNew" name="address[first_name]" value="{{ form.first_name }}" autocomplete="given-name" placeholder=" ">
                    <label for="AddressFirstNameNew">First Name</label>
                  </div>
                  <div class="field">
                    <input type="text" id="AddressLastNameNew" name="address[last_name]" value="{{ form.last_name }}" autocomplete="family-name" placeholder=" ">
                    <label for="AddressLastNameNew">Last Name</label>
                  </div>
                  <div class="field">
                    <input type="text" id="AddressCompanyNew" name="address[company]" value="{{ form.company }}" autocomplete="organization" placeholder=" ">
                    <label for="AddressCompanyNew">Company</label>
                  </div>
                  <div class="field">
                    <input type="text" id="AddressAddress1New" name="address[address1]" value="{{ form.address1 }}" autocomplete="street-address" placeholder=" ">
                    <label for="AddressAddress1New">Address</label>
                  </div>
                  <div class="field">
                    <input type="text" id="AddressAddress2New" name="address[address2]" value="{{ form.address2 }}" autocomplete="street-address" placeholder=" ">
                    <label for="AddressAddress2New">Apartment, suite, etc.</label>
                  </div>
                  <div class="field">
                    <input type="text" id="AddressCityNew" name="address[city]" value="{{ form.city }}" autocomplete="address-level2" placeholder=" ">
                    <label for="AddressCityNew">City</label>
                  </div>
                  <div class="field">
                    <select id="AddressCountryNew" name="address[country]" data-default="{{ form.country }}" autocomplete="country">
                      {{ all_country_option_tags }}
                    </select>
                    <label for="AddressCountryNew">Country</label>
                  </div>
                  <div class="field province-field" id="AddressProvinceContainerNew" style="display:none;">
                    <select id="AddressProvinceNew" name="address[province]" data-default="{{ form.province }}" autocomplete="address-level1">
                    </select>
                    <label for="AddressProvinceNew">State/Province</label>
                  </div>
                  <div class="field">
                    <input type="text" id="AddressZipNew" name="address[zip]" value="{{ form.zip }}" autocomplete="postal-code" placeholder=" ">
                    <label for="AddressZipNew">ZIP Code</label>
                  </div>
                  <div class="field">
                    <input type="tel" id="AddressPhoneNew" name="address[phone]" value="{{ form.phone }}" autocomplete="tel" placeholder=" ">
                    <label for="AddressPhoneNew">Phone</label>
                  </div>
                </div>
                <div class="default-address-checkbox">
                  {{ form.set_as_default_checkbox }}
                  <label for="address_default_address_new">Set as default address</label>
                </div>
                <div class="form-actions">
                  <button type="submit" class="primary-button">Add Address</button>
                  <button type="reset" class="secondary-button" data-address-toggle>Cancel</button>
                </div>
              {%- endform -%}
            </div>

            <div class="default-address-container">
              {%- if customer.default_address -%}
                <div class="address-card default-only">
                  <div class="address-header">
                    <div class="address-title">
                      <h5>{{ customer.default_address.first_name }} {{ customer.default_address.last_name }}</h5>
                      <span class="default-badge">Default</span>
                    </div>
                  </div>
                  <div class="address-content">
                    {%- if customer.default_address.company -%}
                      <p class="company">{{ customer.default_address.company }}</p>
                    {%- endif -%}
                    <p class="street">{{ customer.default_address.address1 }}</p>
                    {%- if customer.default_address.address2 -%}
                      <p class="street">{{ customer.default_address.address2 }}</p>
                    {%- endif -%}
                    <p class="location">{{ customer.default_address.city }}{% if customer.default_address.province_code %}, {{ customer.default_address.province_code }}{% endif %} {{ customer.default_address.zip }}</p>
                    <p class="country">{{ customer.default_address.country }}</p>
                    {%- if customer.default_address.phone -%}
                      <p class="phone">{{ customer.default_address.phone }}</p>
                    {%- endif -%}
                  </div>
                </div>
                <!-- Added Manage Addresses button here -->
                <button type="button" class="action-button manage-addresses-btn">
                  <span class="action-text">Manage Addresses</span>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                </button>
              {%- else -%}
                <div class="empty-address">
                  <p>You don't have any addresses saved yet.</p>
                  <!-- Added Manage Addresses button here for the empty state -->
                  <button type="button" class="action-button manage-addresses-btn">
                    <span class="action-text">Manage Addresses</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                  </button>
                </div>
              {%- endif -%}
            </div>

            <div class="addresses-grid" style="display: none;">
              {%- if customer.addresses.size > 0 -%}
                {%- for address in customer.addresses -%}
                  <div class="address-card" data-address-id="{{ address.id }}">
                    <div class="address-header">
                      <div class="address-title">
                        <h5>{{ address.first_name }} {{ address.last_name }}</h5>
                        {%- if address == customer.default_address -%}
                          <span class="default-badge">Default</span>
                        {%- endif -%}
                      </div>
                      <div class="address-actions">
                        <button type="button" class="icon-btn edit-address" data-address-id="{{ address.id }}" title="Edit Address">
                          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 17.25V21H6.75L17.81 9.94L14.06 6.19L3 17.25ZM20.71 7.05C21.1 6.66 21.1 6.02 20.71 5.63L18.37 3.29C17.98 2.9 17.34 2.9 16.95 3.29L15.66 4.58L19.42 8.34L20.71 7.05Z" fill="currentColor"/>
                          </svg>
                        </button>
                        <form method="post" action="/account/addresses/{{ address.id }}" class="delete-address-form" style="display: inline;">
                          <input type="hidden" name="_method" value="delete">
                          <button type="submit" class="icon-btn delete" data-address-id="{{ address.id }}" title="Delete Address">
                            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M6 19C6 20.1 6.9 21 8 21H16C17.1 21 18 20.1 18 19V7H6V19ZM19 4H15.5L14.5 3H9.5L8.5 4H5V6H19V4Z" fill="currentColor"/>
                            </svg>
                          </button>
                        </form>
                      </div>
                    </div>

                    <div class="address-content">
                      {%- if address.company -%}
                        <p class="company">{{ address.company }}</p>
                      {%- endif -%}
                      <p class="street">{{ address.address1 }}</p>
                      {%- if address.address2 -%}
                        <p class="street">{{ address.address2 }}</p>
                      {%- endif -%}
                      <p class="location">{{ address.city }}{% if address.province_code %}, {{ address.province_code }}{% endif %} {{ address.zip }}</p>
                      <p class="country">{{ address.country }}</p>
                      {%- if address.phone -%}
                        <p class="phone">{{ address.phone }}</p>
                      {%- endif -%}
                    </div>

                    <div id="EditAddress_{{ address.id }}" class="address-form edit-form" style="display: none;">
                      <div class="form-header">
                        <h4>Edit Address</h4>
                        <button type="button" class="icon-btn cancel-edit" data-address-id="{{ address.id }}" title="Cancel">
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z" fill="currentColor"/>
                          </svg>
                        </button>
                      </div>
                      {%- form 'customer_address', address -%}
                        <div class="form-grid">
                          <div class="field">
                            <input type="text" id="AddressFirstName_{{ form.id }}" name="address[first_name]" value="{{ form.first_name }}" autocomplete="given-name" placeholder=" ">
                            <label for="AddressFirstName_{{ form.id }}">First Name</label>
                          </div>
                          <div class="field">
                            <input type="text" id="AddressLastName_{{ form.id }}" name="address[last_name]" value="{{ form.last_name }}" autocomplete="family-name" placeholder=" ">
                            <label for="AddressLastName_{{ form.id }}">Last Name</label>
                          </div>
                          <div class="field">
                            <input type="text" id="AddressCompany_{{ form.id }}" name="address[company]" value="{{ form.company }}" autocomplete="organization" placeholder=" ">
                            <label for="AddressCompany_{{ form.id }}">Company</label>
                          </div>
                          <div class="field">
                            <input type="text" id="AddressAddress1_{{ form.id }}" name="address[address1]" value="{{ form.address1 }}" autocomplete="street-address" placeholder=" ">
                            <label for="AddressAddress1_{{ form.id }}">Address</label>
                          </div>
                          <div class="field">
                            <input type="text" id="AddressAddress2_{{ form.id }}" name="address[address2]" value="{{ form.address2 }}" autocomplete="street-address" placeholder=" ">
                            <label for="AddressAddress2_{{ form.id }}">Apartment, suite, etc.</label>
                          </div>
                          <div class="field">
                            <input type="text" id="AddressCity_{{ form.id }}" name="address[city]" value="{{ form.city }}" autocomplete="address-level2" placeholder=" ">
                            <label for="AddressCity_{{ form.id }}">City</label>
                          </div>
                          <div class="field">
                            <select id="AddressCountry_{{ form.id }}" name="address[country]" data-default="{{ form.country }}" autocomplete="country">
                              {{ all_country_option_tags }}
                            </select>
                            <label for="AddressCountry_{{ form.id }}">Country</label>
                          </div>
                          <div class="field province-field" id="AddressProvinceContainer_{{ form.id }}" style="display:none;">
                            <select id="AddressProvince_{{ form.id }}" name="address[province]" data-default="{{ form.province }}" autocomplete="address-level1">
                            </select>
                            <label for="AddressProvince_{{ form.id }}">State/Province</label>
                          </div>
                          <div class="field">
                            <input type="text" id="AddressZip_{{ form.id }}" name="address[zip]" value="{{ form.zip }}" autocomplete="postal-code" placeholder=" ">
                            <label for="AddressZip_{{ form.id }}">ZIP Code</label>
                          </div>
                          <div class="field">
                            <input type="tel" id="AddressPhone_{{ form.id }}" name="address[phone]" value="{{ form.phone }}" autocomplete="tel" placeholder=" ">
                            <label for="AddressPhone_{{ form.id }}">Phone</label>
                          </div>
                        </div>
                        <div class="default-address-checkbox">
                          {{ form.set_as_default_checkbox }}
                          <label for="address_default_address_{{ form.id }}">Set as default address</label>
                        </div>
                        <div class="form-actions">
                          <button type="submit" class="primary-button">Save Changes</button>
                          <button type="button" class="secondary-button cancel-edit" data-address-id="{{ address.id }}">Cancel</button>
                        </div>
                      {%- endform -%}
                    </div>
                  </div>
                {%- endfor -%}
              {%- else -%}
                <div class="empty-address">
                  <p>You don't have any addresses saved yet.</p>
                </div>
              {%- endif -%}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="info-section password-section">
    <div class="section-header flex items-center justify-between">
      <h3 class="section-title">Password Management</h3>
      <button type="button" class="action-button toggle-password-form" aria-label="Toggle password change form">
        <span class="action-text">Change</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
      </button>
    </div>
    <div class="section-content">
      <div class="password-form-wrapper" style="display: none;">
        {% form 'customer' %}
          <div class="form-fields">
            <div class="form-group">
              <label for="CustomerCurrentPassword">Current Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[current_password]" id="CustomerCurrentPassword" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
            </div>

            <div class="form-group">
              <label for="CustomerNewPassword">New Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[password]" id="CustomerNewPassword" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
              <div class="password-strength-meter">
                <div class="strength-label"></div>
                <div class="meter-bar">
                  <span class="strength-value"></span>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label for="CustomerPasswordConfirmation">Confirm New Password</label>
              <div class="password-input-wrapper">
                <input type="password" name="customer[password_confirmation]" id="CustomerPasswordConfirmation" required>
                <button type="button" class="toggle-password-visibility no-style" aria-label="Toggle password visibility">
                  <svg class="eye-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                  <svg class="eye-off-icon" style="display: none;" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                </button>
              </div>
            </div>
          </div>

          <input type="hidden" name="return_to" value="/account?password-updated=true#a">

          <div class="form-actions">
            <button type="submit" class="primary-button">Update Password</button>
            <button type="button" class="secondary-button cancel-password-btn">Cancel</button>
          </div>
        {% endform %}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Check for query parameter indicating successful update
    const urlParams = new URLSearchParams(window.location.search);

    // Contact info update message
    if (urlParams.get('contact-updated') === 'true') {
      // Show success message if not already displayed
      const contactSection = document.querySelector('.contact-address-section');
      if (contactSection && !contactSection.querySelector('.success-message')) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '<p>Your contact information has been updated successfully!</p>';
        contactSection.querySelector('.section-content').insertBefore(successDiv, contactSection.querySelector('.contact-address-grid'));

        // Auto remove after 5 seconds
        setTimeout(() => {
          successDiv.classList.add('fade-out');
          setTimeout(() => {
            successDiv.remove();
            // Remove the query parameter
            const url = new URL(window.location);
            url.searchParams.delete('contact-updated');
            window.history.replaceState({}, '', url);
          }, 500);
        }, 5000);
      }
    }

    // Password update message
    if (urlParams.get('password-updated') === 'true') {
      const passwordSection = document.querySelector('.password-section');
      if (passwordSection && !passwordSection.querySelector('.success-message')) {
        const successDiv = document.createElement('div');
        successDiv.className = 'success-message';
        successDiv.innerHTML = '<p>Your password has been updated successfully!</p>';
        passwordSection.querySelector('.section-content').insertBefore(successDiv, passwordSection.querySelector('.password-form-wrapper'));

        // Auto remove after 5 seconds
        setTimeout(() => {
          successDiv.classList.add('fade-out');
          setTimeout(() => {
            successDiv.remove();
            // Remove the query parameter
            const url = new URL(window.location);
            url.searchParams.delete('password-updated');
            window.history.replaceState({}, '', url);
          }, 500);
        }, 5000);
      }
    }

    // Toggle password form visibility
    const toggleFormBtn = document.querySelector('.toggle-password-form');
    const passwordForm = document.querySelector('.password-form-wrapper');
    const cancelBtn = document.querySelector('.cancel-password-btn');

    if (toggleFormBtn && passwordForm) {
      toggleFormBtn.addEventListener('click', function() {
        if (passwordForm.style.display === 'none') {
          passwordForm.style.display = 'block';
          passwordForm.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
          passwordForm.style.display = 'none';
        }
      });

      if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
          passwordForm.style.display = 'none';
          // Clear form values
          const passwordInputs = passwordForm.querySelectorAll('input[type="password"]');
          passwordInputs.forEach(input => {
            input.value = '';
          });
          // Reset strength meter
          const strengthBar = passwordForm.querySelector('.strength-value');
          if (strengthBar) {
            strengthBar.style.width = '0%';
          }
          const strengthLabel = passwordForm.querySelector('.strength-label');
          if (strengthLabel) {
            strengthLabel.textContent = '';
          }
        });
      }
    }

    // Toggle password visibility
    const togglePasswordBtns = document.querySelectorAll('.toggle-password-visibility');

    togglePasswordBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const passwordInput = this.parentElement.querySelector('input');
        const eyeIcon = this.querySelector('.eye-icon');
        const eyeOffIcon = this.querySelector('.eye-off-icon');

        if (passwordInput.type === 'password') {
          passwordInput.type = 'text';
          eyeIcon.style.display = 'none';
          eyeOffIcon.style.display = 'block';
        } else {
          passwordInput.type = 'password';
          eyeIcon.style.display = 'block';
          eyeOffIcon.style.display = 'none';
        }
      });
    });

    // Password strength meter
    const newPasswordInput = document.getElementById('CustomerNewPassword');
    const strengthBar = document.querySelector('.strength-value');
    const strengthLabel = document.querySelector('.strength-label');

    if (newPasswordInput && strengthBar && strengthLabel) {
      newPasswordInput.addEventListener('input', function() {
        const password = this.value;
        let strength = 0;
        let label = '';

        if (password.length >= 8) strength += 1;
        if (password.match(/[a-z]/) && password.match(/[A-Z]/)) strength += 1;
        if (password.match(/\d/)) strength += 1;
        if (password.match(/[^a-zA-Z\d]/)) strength += 1;

        switch (strength) {
          case 0:
            strengthBar.style.width = '0%';
            label = '';
            break;
          case 1:
            strengthBar.style.width = '25%';
            strengthBar.style.backgroundColor = '#ff4d4d'; // Red
            label = 'Weak';
            break;
          case 2:
            strengthBar.style.width = '50%';
            strengthBar.style.backgroundColor = '#ffa64d'; // Orange
            label = 'Fair';
            break;
          case 3:
            strengthBar.style.width = '75%';
            strengthBar.style.backgroundColor = '#99cc00'; // Light Green
            label = 'Good';
            break;
          case 4:
            strengthBar.style.width = '100%';
            strengthBar.style.backgroundColor = '#2ecc71'; // Green
            label = 'Strong';
            break;
        }

        strengthLabel.textContent = label;
        strengthLabel.style.color = strengthBar.style.backgroundColor;
      });

      // Password confirmation validation
      const confirmInput = document.getElementById('CustomerPasswordConfirmation');

      if (confirmInput) {
        confirmInput.addEventListener('input', function() {
          if (this.value !== newPasswordInput.value) {
            this.setCustomValidity('Passwords do not match');
          } else {
            this.setCustomValidity('');
          }
        });
      }
    }

    // Updated address management functionality
    const manageAddressesBtn = document.querySelector('.manage-addresses-btn');
    const addressesGrid = document.querySelector('.addresses-grid');
    const defaultAddressContainer = document.querySelector('.default-address-container');
    const addAddressBtn = document.querySelector('.add-address-btn');

    if (manageAddressesBtn && addressesGrid && defaultAddressContainer && addAddressBtn) {
      manageAddressesBtn.addEventListener('click', function() {
        const isExpanded = addressesGrid.style.display !== 'none';

        // Toggle the visibility of addresses grid
        addressesGrid.style.display = isExpanded ? 'none' : 'block';

        // Toggle the visibility of the add address button
        addAddressBtn.style.display = isExpanded ? 'none' : 'flex';

        // Update the button text based on state
        this.querySelector('.action-text').textContent = isExpanded ? 'Manage Addresses' : 'Hide Addresses';

        // Keep default address visible when in collapsed state
        defaultAddressContainer.style.display = 'block';
      });
    }

    // Address form functionality - adding back
    const addAddressForm = document.getElementById('AddAddress');

    if (addAddressBtn && addAddressForm) {
      const toggleButtons = document.querySelectorAll('[data-address-toggle]');
      toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
          addAddressForm.style.display = addAddressForm.style.display === 'none' ? 'block' : 'none';
        });
      });
    }

    // Edit address functionality - adding back
    document.querySelectorAll('.edit-address').forEach(button => {
      button.addEventListener('click', function() {
        const addressId = this.dataset.addressId;
        const addressCard = this.closest('.address-card');
        const editForm = addressCard.querySelector(`#EditAddress_${addressId}`);
        const addressContent = addressCard.querySelector('.address-content');
        const addressActions = addressCard.querySelector('.address-actions');

        if (editForm && addressContent && addressActions) {
          addressContent.style.display = 'none';
          addressActions.style.display = 'none';
          editForm.style.display = 'block';
        }
      });
    });

    // Cancel edit functionality - adding back
    document.querySelectorAll('.cancel-edit').forEach(button => {
      button.addEventListener('click', function() {
        const addressId = this.dataset.addressId;
        const addressCard = this.closest('.address-card');
        const editForm = addressCard.querySelector(`#EditAddress_${addressId}`);
        const addressContent = addressCard.querySelector('.address-content');
        const addressActions = addressCard.querySelector('.address-actions');

        if (editForm && addressContent && addressActions) {
          addressContent.style.display = 'block';
          addressActions.style.display = 'flex';
          editForm.style.display = 'none';
        }
      });
    });

    // Handle Delete Address - adding back
    document.querySelectorAll('.delete-address-form').forEach(form => {
      form.addEventListener('submit', function(e) {
        e.preventDefault();

        const addressId = this.querySelector('button').dataset.addressId;
        const addressCard = this.closest('.address-card');

        // Add visual feedback
        addressCard.style.opacity = '0.5';

        // Create form data with the hidden _method=delete input
        const formData = new FormData(this);

        // Use Shopify's built-in authenticity tokens by fetching the form action URL
        fetch(this.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (response.ok) {
            // Remove the card with animation
            addressCard.style.height = addressCard.offsetHeight + 'px';
            setTimeout(() => {
              addressCard.style.height = '0';
              addressCard.style.padding = '0';
              addressCard.style.margin = '0';
              addressCard.style.overflow = 'hidden';
            }, 10);
            setTimeout(() => {
              addressCard.remove();
              showAddressMessage('Address deleted successfully!', 'success');

              // Check if this was the default address and reload if needed
              if (addressCard.querySelector('.default-badge')) {
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              }

              // If no addresses left, show empty state
              const remainingAddresses = document.querySelectorAll('.addresses-grid .address-card');
              if (remainingAddresses.length <= 1) {
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              }
            }, 300);
          } else {
            throw new Error('Error deleting address');
          }
        })
        .catch(error => {
          addressCard.style.opacity = '1';
          showAddressMessage('Error deleting address. Please try again.', 'error');
          console.error('Address error:', error);
        });
      });
    });

    // Country/province selectors
    new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
      hideElement: 'AddressProvinceContainerNew'
    });

    // Initialize province selectors for existing addresses
    const countrySelectors = document.querySelectorAll('[id^="AddressCountry_"]');
    countrySelectors.forEach(countrySelect => {
      const formId = countrySelect.id.replace('AddressCountry_', '');
      const provinceSelect = document.getElementById(`AddressProvince_${formId}`);
      const provinceContainer = document.getElementById(`AddressProvinceContainer_${formId}`);

      if (provinceSelect && provinceContainer) {
        new Shopify.CountryProvinceSelector(countrySelect.id, provinceSelect.id, {
          hideElement: provinceContainer.id
        });
      }
    });

    // Handle address operations with AJAX
    function setupAddressAjax() {
      // Add new address form AJAX
      const newAddressForm = document.querySelector('#AddAddress form');
      if (newAddressForm) {
        newAddressForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(this);

          // Add a loading state
          const submitBtn = this.querySelector('button[type="submit"]');
          const originalBtnText = submitBtn.innerHTML;
          submitBtn.innerHTML = 'Adding...';
          submitBtn.disabled = true;

          fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => {
            if (response.ok) {
              // Success message
              showAddressMessage('Address added successfully!', 'success');

              // Close the form
              addAddressForm.style.display = 'none';

              // Reset the form
              this.reset();

              // Reload page to show new address
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              throw new Error('Error adding address');
            }
          })
          .catch(error => {
            showAddressMessage('Error adding address. Please try again.', 'error');
            console.error('Address error:', error);
          })
          .finally(() => {
            // Reset button state
            submitBtn.innerHTML = originalBtnText;
            submitBtn.disabled = false;
          });
        });
      }

      // Edit address forms AJAX
      document.querySelectorAll('[id^="EditAddress_"] form').forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();
          const formData = new FormData(this);
          const addressId = this.closest('[id^="EditAddress_"]').id.replace('EditAddress_', '');

          // Add a loading state
          const submitBtn = this.querySelector('button[type="submit"]');
          const originalBtnText = submitBtn.innerHTML;
          submitBtn.innerHTML = 'Saving...';
          submitBtn.disabled = true;

          fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => {
            if (response.ok) {
              showAddressMessage('Address updated successfully!', 'success');

              // Check if this form contains a "set as default" checked box
              const setDefaultCheckbox = this.querySelector('input[name="address[default]"]');

              if (setDefaultCheckbox && setDefaultCheckbox.checked) {
                // If setting as default, reload the page to update the default address display
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              } else {
                // Otherwise, reload to show the updated address
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              }
            } else {
              throw new Error('Error updating address');
            }
          })
          .catch(error => {
            showAddressMessage('Error updating address. Please try again.', 'error');
            console.error('Address error:', error);
          })
          .finally(() => {
            // Reset button state
            submitBtn.innerHTML = originalBtnText;
            submitBtn.disabled = false;
          });
        });
      });

      // Delete address AJAX
      document.querySelectorAll('.delete-address-form').forEach(form => {
        form.addEventListener('submit', function(e) {
          e.preventDefault();

          const addressId = this.querySelector('button').dataset.addressId;
          const addressCard = this.closest('.address-card');

          // Add visual feedback
          addressCard.style.opacity = '0.5';

          // Create form data with the hidden _method=delete input
          const formData = new FormData(this);

          // Use Shopify's built-in authenticity tokens by fetching the form action URL
          fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
          .then(response => {
            if (response.ok) {
              // Remove the card with animation
              addressCard.style.height = addressCard.offsetHeight + 'px';
              setTimeout(() => {
                addressCard.style.height = '0';
                addressCard.style.padding = '0';
                addressCard.style.margin = '0';
                addressCard.style.overflow = 'hidden';
              }, 10);
              setTimeout(() => {
                addressCard.remove();
                showAddressMessage('Address deleted successfully!', 'success');

                // Check if this was the default address and reload if needed
                if (addressCard.querySelector('.default-badge')) {
                  setTimeout(() => {
                    window.location.reload();
                  }, 1000);
                }

                // If no addresses left, show empty state
                const remainingAddresses = document.querySelectorAll('.addresses-grid .address-card');
                if (remainingAddresses.length <= 1) {
                  setTimeout(() => {
                    window.location.reload();
                  }, 1000);
                }
              }, 300);
            } else {
              throw new Error('Error deleting address');
            }
          })
          .catch(error => {
            addressCard.style.opacity = '1';
            showAddressMessage('Error deleting address. Please try again.', 'error');
            console.error('Address error:', error);
          });
        });
      });
    }

    // Helper function to show address-related messages
    function showAddressMessage(message, type = 'success') {
      const addressSection = document.querySelector('.address-info');

      // Remove any existing messages
      const existingMessage = addressSection.querySelector('.ajax-message');
      if (existingMessage) existingMessage.remove();

      // Create new message
      const messageDiv = document.createElement('div');
      messageDiv.className = `ajax-message ${type}`;
      messageDiv.innerHTML = `<p>${message}</p>`;

      // Insert message at the top of the addresses list
      const addressesList = addressSection.querySelector('.addresses-list');
      addressesList.insertBefore(messageDiv, addressesList.firstChild);

      // Auto remove after 4 seconds
      setTimeout(() => {
        messageDiv.classList.add('fade-out');
        setTimeout(() => {
          messageDiv.remove();
        }, 500);
      }, 4000);
    }

    // Initialize AJAX for address forms
    setupAddressAjax();
  });
</script>

<style>
  /* Merged contact and address styles */
  .action-buttons {
    display: flex;
    gap: 10px;
  }

  .contact-address-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 24px;
    margin-top: 15px;
  }

  .subsection-title {
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 15px 0;
    padding-bottom: 8px;
    border-bottom: 1px solid var(--gray-200);
    color: var(--gray-800);
    position: relative;
  }

  .subsection-title:after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    width: 30px;
    height: 2px;
    background-color: var(--primary);
    border-radius: var(--radius-full, 9999px);
  }

  .contact-info, .address-info {
    background-color: white;
    border-radius: var(--radius-lg, 12px);
    padding: 20px;
    box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05));
    transition: box-shadow 0.3s ease, transform 0.3s ease;
    border: 1px solid var(--gray-200, #f3f4f6);
  }

  .contact-info:hover, .address-info:hover {
    box-shadow: var(--shadow-md, 0 4px 8px rgba(0, 0, 0, 0.08));
    transform: translateY(-2px);
  }

  /* Address Cards and Forms Styles */
  .addresses-list {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .add-address-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    background-color: var(--blue, #0066cc);
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    margin-bottom: 10px;
  }

  .add-address-btn:hover {
    background-color: #0055aa;
    transform: translateY(-2px);
  }

  .addresses-grid {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .address-card {
    background: white;
    border: 1px solid var(--gray-200, #f3f4f6);
    border-radius: var(--radius-lg, 12px);
    padding: 16px;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05));
    position: relative;
    overflow: hidden;
  }

  .address-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md, 0 4px 8px rgba(0, 0, 0, 0.08));
  }

  .address-card.default-only {
    border-left: 3px solid var(--primary, #32646f);
  }

  .address-card.default-only:after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 0;
    height: 0;
    border-style: solid;
    border-width: 0 40px 40px 0;
    border-color: transparent var(--primary, #32646f) transparent transparent;
    opacity: 0.2;
    pointer-events: none;
  }

  .address-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
    position: relative;
  }

  .address-header:after {
    content: '';
    position: absolute;
    bottom: -6px;
    left: 0;
    width: 100%;
    height: 1px;
    background: linear-gradient(to right, var(--gray-300, #e5e7eb), transparent);
  }

  .address-title {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .address-title h5 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: var(--gray-900, #1f2937);
  }

  .default-badge {
    background: var(--primary, #32646f);
    color: white;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 11px;
    font-weight: 500;
  }

  .address-actions {
    display: flex;
    gap: 6px;
  }

  .icon-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border-radius: var(--radius-md, 8px);
    border: 1px solid var(--gray-200, #f3f4f6);
    background: white;
    min-width: unset;
    padding: unset;
    color: var(--gray-700, #4b5563);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .icon-btn:before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    background: rgba(var(--primary-rgb, 50, 100, 111), 0.1);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.4s ease, height 0.4s ease;
  }

  .icon-btn:hover {
    color: var(--primary, #32646f);
    border-color: var(--primary, #32646f);
    z-index: 1;
  }

  .icon-btn:hover:before {
    width: 120%;
    height: 120%;
  }

  .icon-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(var(--primary-rgb, 50, 100, 111), 0.2);
    border-color: var(--primary, #32646f);
  }

  .icon-btn.delete:hover {
    background: rgba(239, 68, 68, 0.1);
    border-color: var(--danger, #ef4444);
    color: var(--danger, #ef4444);
  }

  .icon-btn.delete:hover:before {
    background: rgba(239, 68, 68, 0.1);
  }

  .icon-btn.delete:focus {
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
    border-color: var(--danger, #ef4444);
  }

  .address-content {
    font-size: 14px;
    line-height: 1.5;
    color: var(--gray-600, #6b7280);
  }

  .address-content p {
    margin: 0 0 4px 0;
  }

  .address-content .company {
    font-weight: 600;
    color: var(--primary, #32646f);
  }

  .address-content .street {
    color: var(--gray-800, #374151);
  }

  .address-content .phone {
    margin-top: 8px;
    position: relative;
    padding-left: 20px;
  }

  .address-content .phone:before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 14px;
    height: 14px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='14' height='14' viewBox='0 0 24 24' fill='none' stroke='%236b7280' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
  }

  .address-form {
    background: white;
    border-radius: 8px;
    padding: 16px;
    margin-top: 10px;
    border: 1px solid rgba(0,0,0,0.08);
  }

  .form-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 10px;
    border-bottom: 1px solid rgba(0,0,0,0.08);
  }

  .form-header h4 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
    margin-bottom: 16px;
  }

  .field {
    position: relative;
    margin-bottom: 8px;
  }

  .field input,
  .field select {
    width: 100%;
    padding: 10px 12px;
    border: 1px solid rgba(0,0,0,0.1);
    border-radius: 4px;
    font-size: 14px;
    background: white;
    color: var(--dark, #333);
    transition: all 0.3s ease;
  }

  .field input:focus,
  .field select:focus {
    border-color: var(--primary, #32646f);
    outline: none;
    box-shadow: 0 0 0 3px rgba(var(--primary-rgb, 50, 100, 111), 0.15);
  }

  .field label {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: white;
    padding: 0 4px;
    font-size: 13px;
    color: var(--gray-600, #6b7280);
    transition: all 0.3s ease;
    pointer-events: none;
  }

  .field input:focus + label,
  .field input:not(:placeholder-shown) + label,
  .field select:focus + label,
  .field select:not([value=""]) + label {
    top: 0;
    transform: translateY(-50%) scale(0.9);
    color: var(--blue, #0066cc);
  }

  .default-address-checkbox {
    margin: 12px 0;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .form-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 16px;
    padding-top: 12px;
    border-top: 1px solid rgba(0,0,0,0.08);
  }

  .primary-button,
  .secondary-button {
    padding: 10px 16px;
    border-radius: var(--radius-md, 8px);
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .primary-button {
    background: var(--primary, #32646f);
    color: white;
    border: none;
    box-shadow: 0 2px 6px rgba(var(--primary-rgb, 50, 100, 111), 0.2);
    position: relative;
    overflow: hidden;
  }

  .primary-button:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .primary-button:hover {
    background: var(--primary-dark, #275058);
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(var(--primary-rgb, 50, 100, 111), 0.3);
  }

  .primary-button:hover:after {
    transform: translateX(0);
  }

  .primary-button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(var(--primary-rgb, 50, 100, 111), 0.3);
  }

  .secondary-button {
    background: white;
    color: var(--gray-700, #4b5563);
    border: 1px solid var(--gray-300, #e5e7eb);
  }

  .secondary-button:hover {
    border-color: var(--primary, #32646f);
    color: var(--primary, #32646f);
    background-color: rgba(var(--primary-rgb, 50, 100, 111), 0.05);
  }

  .secondary-button:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(var(--primary-rgb, 50, 100, 111), 0.15);
    border-color: var(--primary, #32646f);
  }

  .empty-address {
    padding: 24px;
    background: linear-gradient(145deg, var(--gray-100, #f9fafb), white);
    border-radius: var(--radius-lg, 12px);
    text-align: center;
    border: 1px dashed var(--gray-300, #e5e7eb);
    box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05)) inset;
  }

  .empty-address p {
    margin: 0 0 16px 0;
    color: var(--gray-600, #6b7280);
    font-size: 15px;
  }

  .success-message {
    padding: 12px 16px;
    background-color: var(--success-light, rgba(16, 185, 129, 0.1));
    color: var(--success, #10b981);
    border-radius: var(--radius-md, 8px);
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: opacity 0.5s ease;
    animation: slideIn 0.3s ease;
    border-left: 3px solid var(--success, #10b981);
  }

  .success-message.fade-out {
    opacity: 0;
  }

  @keyframes slideIn {
    from { transform: translateX(-10px); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
  }

  .ajax-message.success {
    background-color: var(--success-light, rgba(16, 185, 129, 0.1));
    color: var(--success, #10b981);
    border-left: 3px solid var(--success, #10b981);
  }

  .ajax-message.error {
    background-color: var(--danger-light, rgba(239, 68, 68, 0.1));
    color: var(--danger, #ef4444);
    border-left: 3px solid var(--danger, #ef4444);
  }

  .password-strength-meter {
    margin-top: 10px;
  }

  .strength-label {
    font-size: 12px;
    font-weight: 600;
    margin-bottom: 6px;
    transition: color 0.3s ease;
  }

  .meter-bar {
    height: 6px;
    background-color: var(--gray-200, #f3f4f6);
    border-radius: var(--radius-full, 9999px);
    overflow: hidden;
  }

  .strength-value {
    display: block;
    height: 100%;
    width: 0;
    border-radius: var(--radius-full, 9999px);
    transition: width 0.3s ease, background-color 0.3s ease;
  }

  @media screen and (max-width: 767px) {
    .contact-address-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }

    .address-info {
      padding: 16px;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .address-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 8px;
    }

    .address-actions {
      margin-top: 4px;
    }

    .action-buttons {
      flex-direction: column;
      gap: 5px;
    }
  }

  /* New styles for the manage addresses button */
  .manage-addresses-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 12px;
    padding: 8px 12px;
    border: 1px solid var(--gray-200, #f3f4f6);
    border-radius: var(--radius-md, 8px);
    background-color: white;
    color: var(--primary, #32646f);
    font-weight: 500;
    transition: all 0.3s ease;
    width: 100%;
    justify-content: center;
  }

  .manage-addresses-btn:hover {
    background-color: rgba(var(--primary-rgb, 50, 100, 111), 0.05);
    border-color: var(--primary, #32646f);
    transform: translateY(-2px);
    box-shadow: 0 2px 6px rgba(var(--primary-rgb, 50, 100, 111), 0.1);
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: var(--gray-700, #4b5563);
    font-size: 14px;
  }

  .password-input-wrapper {
    position: relative;
  }

  .password-input-wrapper input {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid var(--gray-300, #e5e7eb);
    border-radius: var(--radius-md, 8px);
    font-size: 15px;
    padding-right: 45px;
    transition: all 0.3s ease;
  }

  .password-input-wrapper input:focus {
    border-color: var(--primary, #32646f);
    box-shadow: 0 0 0 3px rgba(var(--primary-rgb, 50, 100, 111), 0.15);
    outline: none;
  }

  .toggle-password-visibility {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--gray-500, #9ca3af);
    cursor: pointer;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.3s ease;
  }

  .toggle-password-visibility:hover {
    color: var(--primary, #32646f);
  }

  .password-form-wrapper {
    background-color: var(--gray-100, #f9fafb);
    border-radius: var(--radius-lg, 12px);
    padding: 24px;
    border: 1px solid var(--gray-200, #f3f4f6);
    margin-top: 20px;
    animation: fadeIn 0.3s ease;
    box-shadow: var(--shadow-sm, 0 2px 4px rgba(0, 0, 0, 0.05));
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .success-message {
    padding: 12px 16px;
    background-color: var(--success-light, rgba(16, 185, 129, 0.1));
    color: var(--success, #10b981);
    border-radius: var(--radius-md, 8px);
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: opacity 0.5s ease;
    animation: slideIn 0.3s ease;
    border-left: 3px solid var(--success, #10b981);
  }

  .success-message p {
    margin: 0;
    font-weight: 500;
  }

  .section-header {
    margin-bottom: 20px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .section-title {
    font-size: 18px;
    font-weight: 700;
    color: var(--gray-900, #1f2937);
    margin: 0;
    position: relative;
    padding-bottom: 10px;
  }

  .section-title:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 30px;
    height: 3px;
    background-color: var(--primary, #32646f);
    border-radius: var(--radius-full, 9999px);
  }

  .action-button {
    display: flex;
    align-items: center;
    gap: 8px;
    color: var(--primary, #32646f);
    background: rgba(var(--primary-rgb, 50, 100, 111), 0.1);
    border: none;
    border-radius: var(--radius-md, 8px);
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-button:hover {
    background: rgba(var(--primary-rgb, 50, 100, 111), 0.15);
    transform: translateY(-2px);
    box-shadow: 0 2px 8px rgba(var(--primary-rgb, 50, 100, 111), 0.2);
  }

  .action-button svg {
    transition: transform 0.3s ease;
  }

  .action-button:hover svg {
    transform: rotate(10deg);
  }
</style>