{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% if product.handle == 'curalin' or product.handle == 'curalin-tm' %}
	{% assign shippingPrice = 790 %}
{% else %}
	{% assign shippingPrice = 1000 %}
{% endif %}

{% assign referenced_variant_product = prod %}
{% assign referenced_variant = null %}

{% assign giftsAmount = 0 %}
{% assign faqsAmount = value %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}

		{% when 'faq' %}
			{% assign faqsAmount = faqsAmount | plus: 1 %}
	{% endcase %}
{% endfor %}

{% assign defaultSelectionIndex = 0 %}
{% assign firstVariantBlock = null %}
{% assign variant_selling_plan_id = null %}

<!-- Find first variant block to use for properties -->
{% for block in blocks %}
	{% if block.type == 'variant' %}
		{% assign firstVariantBlock = block %}

		<!-- Try to find the matching variant in the product -->
		{% if referenced_variant_product and referenced_variant_product.variants.size > 0 %}
			{% for var in referenced_variant_product.variants %}
				{% assign currVarID = var.id | plus: 0 %}
				{% assign settingsVarID = firstVariantBlock.settings.variant_id | plus: 0 %}

				{% if currVarID == settingsVarID %}
					{% assign referenced_variant = var %}

					<!-- If variant has subscription metafields, use those -->
					{% if var.metafields.subscription and var.metafields.subscription.selling_plan_id %}
						{% assign variant_selling_plan_id = var.metafields.subscription.selling_plan_id %}
					{% endif %}

					{% break %}
				{% endif %}
			{% endfor %}
		{% endif %}

		<!-- If we still don't have a selling_plan_id, use the one from settings or fallback -->
		{% unless variant_selling_plan_id %}
			{% if firstVariantBlock.settings.selling_plan_id %}
				{% assign variant_selling_plan_id = firstVariantBlock.settings.selling_plan_id %}
			{% elsif selling_plan_id %}
				{% assign variant_selling_plan_id = selling_plan_id %}
			{% endif %}
		{% endunless %}

		{% break %}
	{% endif %}
{% endfor %}

<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}" data-gifts-amount="{{ giftsAmount }}">
	<div class="purchase-options flex flex-col gap-3 mb-3">
		<div class="single-variant-box border-primary p-4 border-2 rounded-md"
			data-variant-id="{{ firstVariantBlock.settings.variant_id }}"
			data-selling-plan-id="{{ variant_selling_plan_id }}"
			data-compare-price="{% if referenced_variant %}{{ referenced_variant.compare_at_price }}{% else %}{{ firstVariantBlock.settings.compare_price }}{% endif %}"
			data-price="{% if referenced_variant %}{{ referenced_variant.price }}{% else %}{{ firstVariantBlock.settings.price }}{% endif %}">
			<!-- Header -->
			<div class="variant-header text-primary font-bold text-[22px] mb-3">
				<svg class="inline-block" width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path fill-rule="evenodd" clip-rule="evenodd" d="M3 11.9995C3 10.8176 3.23279 9.64736 3.68508 8.55548C4.13738 7.46361 4.80031 6.4715 5.63604 5.63581C6.47177 4.80013 7.46392 4.13722 8.55585 3.68495C9.64778 3.23268 10.8181 2.9999 12 2.9999C13.1819 2.9999 14.3522 3.23268 15.4442 3.68495C16.5361 4.13722 17.5282 4.80013 18.364 5.63581C19.1997 6.4715 19.8626 7.46361 20.3149 8.55548C20.7672 9.64736 21 10.8176 21 11.9995C21 14.3863 20.0518 16.6754 18.364 18.3631C16.6761 20.0509 14.3869 20.999 12 20.999C9.61305 20.999 7.32387 20.0509 5.63604 18.3631C3.94821 16.6754 3 14.3863 3 11.9995ZM12 1C5.925 1 1 5.92476 1 11.9995C1 18.0742 5.925 22.9989 12 22.9989C18.075 22.9989 23 18.0742 23 11.9995C23 5.92476 18.075 1 12 1ZM16.8 8.59963C16.8788 8.49458 16.9361 8.37504 16.9687 8.24783C17.0013 8.12062 17.0085 7.98824 16.99 7.85825C16.9714 7.72825 16.9274 7.60319 16.8605 7.49019C16.7936 7.3772 16.7051 7.27849 16.6 7.1997C16.4949 7.12091 16.3754 7.06358 16.2482 7.03099C16.121 6.9984 15.9886 6.99119 15.8586 7.00976C15.7286 7.02833 15.6035 7.07232 15.4905 7.13923C15.3775 7.20613 15.2788 7.29464 15.2 7.39969L9.892 14.4773L7.707 12.2925C7.5184 12.1103 7.2658 12.0095 7.0036 12.0118C6.7414 12.0141 6.49059 12.1192 6.30518 12.3046C6.11977 12.49 6.0146 12.7408 6.01233 13.003C6.01005 13.2652 6.11084 13.5178 6.293 13.7064L9.293 16.7062C9.3943 16.8075 9.51618 16.8859 9.6504 16.936C9.78461 16.9861 9.92802 17.0067 10.0709 16.9966C10.2138 16.9864 10.3529 16.9457 10.4787 16.8772C10.6044 16.8086 10.714 16.7138 10.8 16.5992L16.8 8.59963Z" fill="#3A7684"/>
			</svg>
			Subscribe & Save</div>

			<div class="top-wrapper border-bg flex items-center justify-between pb-4 mb-4 border-b">
				<!-- Variant name and subtitle -->
				<div class="variant-info">
					<div class="text-[22px] font-semibold">{{ firstVariantBlock.settings.product_title | default: '1-Month Supply' }}</div>
					<div class="text-[15px] text-gray-600">{{ firstVariantBlock.settings.variant_title | default: '1 bottle delivered monthly' }}</div>
				</div>

				<!-- Price display -->
				<div class="price-display">
					<div class="flex flex-col">
						<div class="main-price text-primary">
							<span class="price font-bold mbl:text-[6vw] rounded-full bg-bg text-center block p-1 mb-1">$0 NOW</span>
						</div>
						<div class="text-gray-600 text-[14px]">${{ firstVariantBlock.settings.price | default: '55' }} if you keep it</div>
					</div>
				</div>
			</div>

			<!-- Benefits bullet list -->
			<ul class="benefits-list no-style my-4">
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>Full 30-day supply of {{ firstVariantBlock.settings.product_name | default: 'Curalin' }}</span>
				</li>
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>Free shipping and returns</span>
				</li>
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>24/7 customer support</span>
				</li>
				<li class="flex items-start gap-2 mb-2">
					<span class="text-primary font-bold">✓</span>
					<span>Free health consultation</span>
				</li>
			</ul>

			{% if giftsAmount > 0 %}
				<div class="gift-selector mb-2">
					{% render 'subscription-box-gift-selector',
						SID: SID,
						giftsAmount: giftsAmount,
						blocks: blocks,
						isHideTitle: true,
						isGlobal: isGlobal
					%}
				</div>
			{% endif %}
		</div>

		<div class="info-box flex items-center justify-between p-4 bg-[#FDF5EA] rounded-md gap-2 border border-[#FFEACF]">
			<div class="info-text">
				<p>Try Curalin for FREE - only pay if you keep it after 14 days.</p>
				<div class="text-bronze font-medium underline cursor-pointer">How does "Try Before You Buy" work?</div>
			</div>
			<div class="info-icon text-primary text-xl">
				<svg width="47" height="57" viewBox="0 0 47 57" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_3655_204)">
<path d="M25.7757 30.0281C22.8661 27.7845 22.3255 23.6054 24.5692 20.6958L32.717 10.1267C34.9606 7.21706 39.1397 6.67651 42.0493 8.92013C44.9589 11.1638 45.4995 15.3428 43.2558 18.2524L35.108 28.8216C32.8644 31.7312 28.6853 32.2717 25.7757 30.0281Z" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M37.0784 11.4253C37.9818 11.0531 39.0592 11.164 39.8858 11.8012" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M39.182 23.5307L28.6382 15.4075" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M29.7989 36.2179C31.7577 40.3108 30.4246 45.3158 26.5186 47.8563C22.2745 50.616 16.595 49.4134 13.8319 45.1622L3.80988 29.7473C1.05022 25.5033 2.25281 19.8237 6.504 17.0607C10.7481 14.301 16.4276 15.5036 19.1907 19.7548L20.6922 22.062" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M7.25435 27.5072C5.73385 25.1696 6.4012 22.0239 8.73875 20.5034" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M19.7438 30.3573L8.82171 37.4521" stroke="#D96A49" stroke-width="1.67838" stroke-linecap="round" stroke-linejoin="round"/>
</g>
<defs>
<clipPath id="clip0_3655_204">
<rect width="47" height="56.1389" fill="white"/>
</clipPath>
</defs>
</svg>

			</div>
		</div>

	{% render 'try-before-you-buy-popup' %}

	{% render 'subscription-box-faq',
		SID: SID,
		faqsAmount: faqsAmount,
		blocks: blocks
	%}

	<div class="submit-wrap flex flex-col w-full">
		<div class="checkout-button mb-3">
			{% assign buttonSID = SID | append: '-checkout' %}

			{% render 'buy-buttons-new-4',
				SID: buttonSID,
				product: prod,
				variant: '',
				buttonText: 'Try Before You Buy',
				selling_plan_id: selling_plan_id,
				product_form_id: product_form_id,
				buyType: buyType,
				isBuyWithPrime: isBuyWithPrime,
				buyboxType: buyboxType,
				buyboxName: buyboxName,
				buttonClass: 'bg-[#FCAF2A] hover:bg-[#E99E20] text-black font-bold rounded-full py-3 w-full transition-all duration-300'
			%}
		</div>

		<div class="one-time-purchase-link mt-3 text-center">
			{% assign firstVariant = prod.selected_or_first_available_variant %}
			<div
				id="one-time-add-to-cart"
				class="one-time-add-to-cart text-primary mb-2 underline cursor-pointer"
				name="track:link-submit|buybox-type:{{ buyboxType }}|buybox-name:{{ buyboxName }}|variant-sku:{{ firstVariant.sku }}|purchase-type:buyonce"
				data-variant-id="{{ firstVariant.id }}"
				data-bottle-quantity="1"
				data-sku="{{ firstVariant.sku }}"
				data-purchase-type="buyonce">
				Buy Once for {{ firstVariant.price | money }} + {{ shippingPrice | money | replace: '.00', '' }} Shipping
			</div>
		</div>

		{% if blocks.size > 0 %}
			{% for block in blocks %}
				{% if block.type == 'text' %}
					<div class="text-content text-[14px] text-primary whitespace-break-spaces {% if block.settings.text_position == 'center' %}text-center{% else %}text-start{% endif %}">{{ block.settings.content }}</div>
				{% endif %}
			{% endfor %}
		{% endif %}
	</div>
</div>

<!-- Replace style with Tailwind classes added to parent div -->
<div class="buy-box grid grid-cols-[45%_40%] gap-x-[5%] justify-center">
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
	const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
	if (!productActions) return;

	const submitButton = productActions.querySelector('.checkout-button button');
	const oneTimeButton = productActions.querySelector('.one-time-add-to-cart');

	// Simplified state management for single variant
	const BuyBoxState = {
		data: {
			isLoading: false,
			isRedirectingToCheckout: false,
			purchaseType: 'subscribe',
			buyType: '{{ buyType }}',
			SID: '{{ SID }}'
		},

		setState(updates) {
			Object.assign(this.data, updates);
			this.updateUI(updates);
		},

		updateUI(changes) {
			if ('isLoading' in changes) {
				this.updateLoadingState(this.data.isLoading);
			}
		},

		updateLoadingState(isLoading) {
			if (submitButton) {
				if (isLoading) {
					submitButton.disabled = true;
					submitButton.innerHTML = `<div class="border-white/20 border-t-white animate-spin inline-block w-6 h-6 mx-auto border-2 rounded-full"></div>`;
					submitButton.setAttribute('aria-busy', 'true');
					submitButton.classList.add('loading-active');
				} else {
					submitButton.disabled = false;
					submitButton.innerHTML = submitButton.getAttribute('data-original-text') || 'Try Before You Buy';
					submitButton.removeAttribute('aria-busy');
					submitButton.classList.remove('loading-active');
				}
			}

			// Also update one-time purchase button if it exists
			if (oneTimeButton) {
				oneTimeButton.disabled = isLoading;
				if (isLoading) {
					oneTimeButton.setAttribute('aria-busy', 'true');
					oneTimeButton.classList.add('disabled');
				} else {
					oneTimeButton.removeAttribute('aria-busy');
					oneTimeButton.classList.remove('disabled');
				}
			}

			// Use class-based disabling for better performance
			if (isLoading) {
				productActions.classList.add('processing-order');
			} else {
				productActions.classList.remove('processing-order');
			}
		},

		init() {
			// Store original button text for later restoration
			if (submitButton) {
				submitButton.setAttribute('data-original-text', submitButton.textContent);
			}
		}
	};

	function showNotification(msg, type = 'error') {
		const note = document.createElement('div');
		note.className = `
			cart-notification ${type}
			fixed bottom-4 left-1/2 transform -translate-x-1/2
			p-4 rounded-lg shadow-lg z-[2147483640]
			transition-opacity duration-300
		`.replace(/\s+/g, ' ');

		if (type === 'error') {
			note.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
		} else {
			note.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
		}

		note.innerHTML = `
			<div class="flex items-center">
				<div class="mr-3">${type === 'error' ? '⚠️' : '✅'}</div>
				<div class="text-sm font-medium">${msg}</div>
				<button
					class="hover:text-gray-500 ml-auto text-gray-400"
					onclick="this.parentElement.parentElement.remove()"
				>
					✕
				</button>
			</div>
		`;
		document.body.appendChild(note);
		setTimeout(() => {
			note.classList.add('opacity-0');
			setTimeout(() => note.remove(), 300);
		}, 5000);
	}

	async function getCart(forceRefresh = false) {
		try {
			const now = Date.now();
			const res = await fetch('/cart.js?t=' + now, {
				cache: 'no-store',
				headers: {
					'Cache-Control': 'no-cache',
					'Pragma': 'no-cache'
				}
			});

			if (!res.ok) throw new Error('Failed to fetch cart');
			return await res.json();
		} catch (err) {
			console.error('Error in getCart:', err);
			throw new Error('Unable to access your cart');
		}
	}

	async function clearCart() {
		try {
			const res = await fetch('/cart/clear.js', {
				method: 'POST',
				cache: 'no-store',
				headers: {
					'Cache-Control': 'no-cache',
					'Pragma': 'no-cache'
				}
			});

			if (!res.ok) {
				const errorData = await res.json();
				throw Object.assign(new Error('Failed to clear cart'), { response: errorData });
			}

			return res.json();
		} catch (err) {
			console.error('Error clearing cart:', err);
			throw err;
		}
	}

	async function handleBuyNowFlow(items) {
		try {
			// Set loading state immediately and prevent multiple clicks
			BuyBoxState.setState({
				isLoading: true,
				isRedirectingToCheckout: true
			});

			console.log('Starting buy now flow with items:', JSON.stringify(items));

			// Remove cart popup if it exists (do this early)
			const cartPopup = document.getElementById('upCart');
			if (cartPopup) cartPopup.remove();

			// Perform cart operations in parallel when possible
			console.log('Clearing cart...');
			const clearCartPromise = clearCart();

			// Wait for cart clearing to complete
			await clearCartPromise;
			console.log('Cart cleared successfully');

			// Validate each item to ensure selling_plan is properly formatted
			items.forEach(item => {
				if (item.selling_plan !== undefined) {
					// Ensure selling_plan is a number
					item.selling_plan = parseInt(item.selling_plan, 10);
					if (isNaN(item.selling_plan)) {
						console.error(`Invalid selling_plan value: ${item.selling_plan}`);
						delete item.selling_plan;
					}
				}
			});

			// Add items to cart (with improved error handling)
			const requestBody = JSON.stringify({ items });
			console.log('Adding items to cart with request body:', requestBody);

			const addRes = await fetch('/cart/add.js', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Cache-Control': 'no-cache'
				},
				body: requestBody,
				cache: 'no-store'
			});

			console.log('Cart add response status:', addRes.status);
			const responseText = await addRes.text();
			console.log('Cart add response text:', responseText);

			let responseData;
			try {
				responseData = JSON.parse(responseText);
				console.log('Cart add parsed response:', responseData);
			} catch (e) {
				console.error('Failed to parse response as JSON:', e);
			}

			if (!addRes.ok) {
				throw Object.assign(
					new Error('Failed to add items'),
					{ response: responseData || responseText }
				);
			}

			// Verify items were added with subscription
			try {
				const cart = await fetch('/cart.js').then(res => res.json());
				console.log('Cart contents after adding items:', cart);
				const hasSubscription = cart.items.some(item => item.selling_plan_allocation);
				if (!hasSubscription) {
					console.warn('No subscription items found in cart after adding. Check selling plan ID.');
				}
			} catch (e) {
				console.error('Failed to verify cart contents:', e);
			}

			console.log('Items added successfully, redirecting to checkout');
			// Redirect to checkout immediately
			window.location.href = '/checkout';
		} catch (err) {
			console.error('handleBuyNowFlow error details:', err);
			BuyBoxState.setState({
				isRedirectingToCheckout: false,
				isLoading: false
			});
			throw err; // Re-throw to be handled by the caller
		}
	}

	async function addValidItemsToCart(items) {
		try {
			console.log('Adding items to cart:', JSON.stringify(items));

			// Add items to cart
			const res = await fetch('/cart/add.js', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					'Cache-Control': 'no-cache'
				},
				cache: 'no-store',
				body: JSON.stringify({ items })
			});

			console.log('Cart add response status:', res.status);
			const responseText = await res.text();
			console.log('Cart add response text:', responseText);

			let responseData;
			try {
				responseData = JSON.parse(responseText);
				console.log('Cart add parsed response:', responseData);
			} catch (e) {
				console.error('Failed to parse response as JSON:', e);
			}

			if (!res.ok) {
				throw Object.assign(
					new Error('Failed to add items to cart'),
					{ response: responseData || responseText }
				);
			}

			// Update cart UI if needed
			if (typeof window.updateCart === 'function') {
				console.log('Updating cart UI');
				window.updateCart();
			}

			// Show a success message
			showNotification('Items added to cart!', 'success');

			return responseData;
		} catch (err) {
			console.error('Error in addValidItemsToCart:', err);
			throw err;
		}
	}

	function initSubmitButton() {
		if (!submitButton) return;

		// Use a variable to track if a submission is in progress
		let isSubmitting = false;

		// Add click event for the variant box itself
		const variantBox = document.querySelector('.single-variant-box');
		if (variantBox) {
			// Log the selling plan ID we'll be using
			const sellingPlanId = variantBox.dataset.sellingPlanId;
			console.log('Using selling plan ID:', sellingPlanId);

			variantBox.addEventListener('click', function(e) {
				// Only trigger if the click is on the box itself, not on any buttons inside
				if (e.target.closest('button') || e.target.closest('.one-time-add-to-cart')) {
					return;
				}
				// Trigger the submit button click
				submitButton.click();
			});
		}

		// First make sure we override the default form submission from buy-buttons-new-4
		const form = productActions.querySelector('form[data-type="add-to-cart-form"]');
		if (form) {
			form.addEventListener('submit', function(e) {
				e.preventDefault();
				console.log('Form submit intercepted');
				// The actual submission logic is handled by the button click handler
			});
		}

		submitButton.addEventListener('click', async e => {
			e.preventDefault();
			console.log('Submit button clicked');

			// Prevent double-clicks or multiple submissions
			if (isSubmitting || BuyBoxState.data.isLoading) {
				console.log('Submission already in progress, ignoring click');
				return;
			}

			isSubmitting = true;
			BuyBoxState.setState({ isLoading: true });

			// Track the event in dataLayer - this is happening but not followed by cart action
			if (window.dataLayer) {
				window.dataLayer.push({
					'event': 'submit-clicked',
					'buybox_type': BuyBoxState.data.buyType,
					'buybox_name': 'subscription-try'
				});
			}

			try {
				const isSub = true; // Always subscription in this simplified version
				const variantBox = document.querySelector('.single-variant-box');
				const variant = variantBox?.dataset.variantId;
				const sellingPlanId = variantBox?.dataset.sellingPlanId;

				if (!variant) {
					throw new Error('No valid variant ID found');
				}

				if (isSub && !sellingPlanId) {
					throw new Error('No selling plan ID found for subscription purchase');
				}

				// Ensure selling plan ID is a number (Shopify requires this)
				const numericSellingPlanId = parseInt(sellingPlanId, 10);
				if (isNaN(numericSellingPlanId)) {
					throw new Error(`Invalid selling plan ID: ${sellingPlanId}`);
				}

				// Set values in the form if it exists
				const variantIdInput = productActions.querySelector('.submit-variant-id');
				const sellingPlanIdInput = productActions.querySelector('.submit-selling-plan-id');

				if (variantIdInput) variantIdInput.value = variant;
				if (sellingPlanIdInput) sellingPlanIdInput.value = numericSellingPlanId;

				let items = [{
					id: parseInt(variant, 10),
					quantity: 1,
					selling_plan: numericSellingPlanId
				}];

				// Debug log to check what's being sent to cart
				console.log('Adding to cart with items:', JSON.stringify(items), 'isSub:', isSub, 'sellingPlanId:', numericSellingPlanId);

				// Add selected gift if available
				{% if giftsAmount > 0 %}
				const selectedGiftBox = document.querySelector('.gift-box.selected');
				if (selectedGiftBox) {
					const giftBorder = selectedGiftBox.querySelector('.gift-option-border');
					if (!giftBorder) {
						console.error('Gift border element not found in selected gift box');
					} else {
						const giftIDSub = giftBorder.dataset.giftIdSubscription;
						const giftID = giftBorder.dataset.giftId;

						// Use subscription gift ID for subscription purchase, otherwise use regular gift ID
						const giftIDToUse = isSub && giftIDSub ? giftIDSub : giftID;

						if (giftIDToUse) {
							items.push({ id: parseInt(giftIDToUse, 10), quantity: 1 });
							console.log('Adding gift to cart:', giftIDToUse);
						} else {
							console.error('No gift ID found for selection. Sub:', giftIDSub, 'Regular:', giftID);
						}
					}
				} else {
					console.log('No gift selected, looking for default gift');
					// Get first available gift when no gift selection UI is shown
					{% for block in blocks %}
						{% if block.type == 'gift' and block.settings.show_on != 'none' %}
							{% if isGlobal %}
								{% assign giftID = block.settings.gift_id_global | plus: 0 %}
								{% assign giftIDSub = block.settings.gift_id_subscription_global | plus: 0 %}
							{% else %}
								{% assign giftID = block.settings.gift_id | plus: 0 %}
								{% assign giftIDSub = block.settings.gift_id_subscription | plus: 0 %}
							{% endif %}

							{% if giftID > 0 or giftIDSub > 0 %}
							const giftID = {{ giftID }};
							const giftIDSub = {{ giftIDSub }};
							const giftIDToUse = isSub && giftIDSub ? giftIDSub : giftID;

							if (giftIDToUse) {
								items.push({ id: giftIDToUse, quantity: 1 });
								console.log('Adding default gift to cart:', giftIDToUse);
							}
							{% break %}
							{% endif %}
						{% endif %}
					{% endfor %}
				}
				{% endif %}

				// For "Try Before You Buy", always use buy_now flow to go directly to checkout
				console.log("Starting checkout process with buyType:", BuyBoxState.data.buyType);
				await handleBuyNowFlow(items);

				// The following code won't execute if handleBuyNowFlow is successful since it redirects
				// But let's keep it as a fallback
				if (BuyBoxState.data.buyType !== 'buy_now') {
					await addValidItemsToCart(items);
					// Only reset loading state if we're not redirecting
					isSubmitting = false;
					BuyBoxState.setState({ isLoading: false });
				}
			} catch (err) {
				console.error('Submit error:', err);
				showNotification(err.message || 'Error adding items to cart', 'error');
				isSubmitting = false;
				BuyBoxState.setState({ isLoading: false });
			}
		});
	}

	function initOneTimeButton() {
		if (!oneTimeButton) return;

		oneTimeButton.setAttribute('data-original-text', oneTimeButton.textContent);

		// Track submission state
		let isSubmittingOneTime = false;

		oneTimeButton.addEventListener('click', async e => {
			e.preventDefault();

			// Prevent multiple submissions
			if (isSubmittingOneTime || BuyBoxState.data.isLoading) {
				return;
			}

			isSubmittingOneTime = true;
			BuyBoxState.setState({ isLoading: true });
			oneTimeButton.innerHTML = '<div class="border-primary/20 border-t-primary animate-spin inline-block w-4 h-4 mr-2 align-middle border-2 rounded-full"></div> Adding...';
			oneTimeButton.setAttribute('aria-busy', 'true');

			try {
				const variantBox = document.querySelector('.single-variant-box');
				const variant1 = variantBox?.dataset.variantId || oneTimeButton.dataset.variantId;

				if (!variant1) {
					throw new Error('Invalid variant ID');
				}

				const toAdd = [{ id: parseInt(variant1, 10), quantity: 1 }];

				{% if giftsAmount > 0 %}
				// Add selected gift to one-time purchase
				const selectedGiftBox = document.querySelector('.gift-box.selected');
				if (selectedGiftBox) {
					const giftBorder = selectedGiftBox.querySelector('.gift-option-border');
					if (giftBorder) {
						const giftID = giftBorder.dataset.giftId;

						if (giftID) {
							toAdd.push({ id: parseInt(giftID, 10), quantity: 1 });
							console.log('Adding gift to one-time purchase:', giftID);
						} else {
							console.error('No gift ID found for one-time purchase in selected gift');
						}
					} else {
						console.error('Gift border element not found in selected gift box for one-time');
					}
				} else {
					console.log('No gift selected for one-time, looking for default gift');
					// Fallback to first available gift
					{% for block in blocks %}
						{% if block.type == 'gift' and block.settings.show_on != 'none' %}
							{% if isGlobal %}
								{% assign giftID = block.settings.gift_id_global | plus: 0 %}
							{% else %}
								{% assign giftID = block.settings.gift_id | plus: 0 %}
							{% endif %}

							{% if giftID > 0 %}
							toAdd.push({ id: {{ giftID }}, quantity: 1 });
							console.log('Adding default gift to one-time purchase:', {{ giftID }});
							{% break %}
							{% endif %}
						{% endif %}
					{% endfor %}
				}
				{% endif %}

				if (BuyBoxState.data.buyType === 'buy_now') {
					// Optimize for buy now flow
					BuyBoxState.setState({ isRedirectingToCheckout: true });

					// Remove cart popup first
					const cartPopup = document.getElementById('upCart');
					if (cartPopup) cartPopup.remove();

					// Clear cart with optimized fetch
					await fetch('/cart/clear.js', {
						method: 'POST',
						cache: 'no-store',
						headers: {
							'Cache-Control': 'no-cache'
						}
					});

					// Add items with optimized fetch
					const res = await fetch('/cart/add.js', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'Cache-Control': 'no-cache'
						},
						cache: 'no-store',
						body: JSON.stringify({ items: toAdd })
					});

					const responseData = await res.json();

					if (!res.ok) {
						const error = new Error(responseData.description || 'Failed to add items');
						error.response = responseData;
						throw error;
					}

					// Go to checkout immediately
					window.location.href = '/checkout';
				} else {
					// Regular add to cart
					const res = await fetch('/cart/add.js', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
							'Cache-Control': 'no-cache'
						},
						cache: 'no-store',
						body: JSON.stringify({ items: toAdd })
					});

					const responseData = await res.json();

					if (!res.ok) {
						const error = new Error(responseData.description || 'Failed to add items');
						error.response = responseData;
						throw error;
					}

					// Update cart UI if needed
					if (typeof window.updateCart === 'function') {
						window.updateCart();
					}

					oneTimeButton.innerHTML = '✓ Added!';
					oneTimeButton.classList.add('text-green-700', 'border-green-700');

					// Reset state
					setTimeout(() => {
						oneTimeButton.innerHTML = oneTimeButton.getAttribute('data-original-text');
						oneTimeButton.classList.remove('text-green-700', 'border-green-700');
						oneTimeButton.removeAttribute('aria-busy');
						isSubmittingOneTime = false;
						BuyBoxState.setState({ isLoading: false });
					}, 2000);
				}
			} catch (err) {
				console.error('Cart error details:', err);
				showNotification(err.message || 'Error adding items to cart', 'error');
				oneTimeButton.innerHTML = '⚠ Failed';
				oneTimeButton.classList.add('text-red-600', 'border-red-600');

				// Reset state
				setTimeout(() => {
					oneTimeButton.innerHTML = oneTimeButton.getAttribute('data-original-text');
					oneTimeButton.classList.remove('text-red-600', 'border-red-600');
					oneTimeButton.removeAttribute('aria-busy');
					isSubmittingOneTime = false;
					BuyBoxState.setState({ isLoading: false });
				}, 2000);
			}
		});
	}

	function init() {
		BuyBoxState.init();
		initSubmitButton();
		initOneTimeButton();
		initGiftBoxes();
	}
	init();

	function initGiftBoxes() {
		// This function is no longer needed as the functionality is handled by subscription-box-gift-selector.liquid
		// We can leave it empty as it's still called in init()
	}
});
</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const ctasection = document.querySelector('#cta-section-{{ SID }}');
		if (!ctasection) return;

		const productActions = ctasection.querySelector('.product-actions');
		const ctaText = ctasection.querySelector('.cta-text');

		if (!productActions) return;

		if (window.innerWidth < 768 && ctaText) {
			productActions.insertAdjacentElement('afterbegin', ctaText);
		}
	});
</script>

<style>
	/* Core variables - keep these as CSS variables */
	#cta-section-{{ SID }} {
			--transition-speed: 0.2s;

			/* Info box styles */
			.info-box {
					background-color: #FDF5EA;
					border-color: #FFEACF;
			}

			/* Single variant box styles */
			.single-variant-box {
					border-color: var(--primary-color-lighter);
					transition: all 0.3s ease;
			}

			/* Benefits list styles */
			.benefits-list li span:first-child {
					color: var(--primary-color);
			}

			/* Product Actions */
			.product-actions {
					grid-area: {% if isHideInfo %}1{% else %}2{% endif %}/2/3/3;
			}

			/* Price Display Component */
			.price-display {
					.price-content-transition,
					.description-transition {
							transition: opacity 400ms ease-in-out;
					}

					.flex.items-end,
					.mt-2 {
							will-change: opacity;
					}

					/* Price Elements */
					.main-price,
					.discount-badge,
					.total-line {
							transition: opacity 200ms ease-in-out;
							will-change: opacity;
							opacity: 1;
					}
			}

			/* Animation States */
			.fade-out {
					opacity: 0 !important;
			}

			.fade-in {
					opacity: 1 !important;
			}

			/* Responsive Styles */
			@media (max-width: 767px) {
					.product-actions {
							grid-area: unset;
							grid-row: 3;
							max-width: unset;
							min-height: unset;
					}

					.one-time-purchase-link {
							.one-time-add-to-cart {
									font-size: 4vw;
							}
					}
			}

			/* Processing state styles */
			&.processing-order,
			.processing-order {
				position: relative;

				&::after {
					content: "";
					position: absolute;
					top: 0;
					left: 0;
					right: 0;
					bottom: 0;
					background: rgba(255, 255, 255, 0.6);
					z-index: 5;
					pointer-events: none;
					transition: opacity 0.2s ease;
				}

				.single-variant-box {
					pointer-events: none;
				}
			}
	}

	/* Loading state styles */
	[aria-busy="true"] {
		position: relative;
		cursor: wait !important;
	}

	/* Button loading optimization */
	button.loading-active {
		background-color: var(--primary-color-darker, #004085) !important;
		transition: none !important;
	}

	/* Performance optimized disabled styles */
	.disabled {
		opacity: 0.7;
		pointer-events: none;
	}

	/* Improved button loading states */
	button[aria-busy="true"] {
		background-color: var(--primary-color-darker, #004085) !important;
		position: relative;
	}

	button[aria-busy="true"]::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.15);
		border-radius: inherit;
	}
</style>
