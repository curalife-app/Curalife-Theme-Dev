{% assign referenced_variant_product = prod %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options flex flex-col gap-2">
    {% for block in blocks %}
      {% assign referenced_variant = blank %}
      {% assign blockVarID = block.settings.variant_id | plus: 0 %}
      {% for vari in referenced_variant_product.variants %}
        {% assign currVarID = vari.id | plus: 0 %}
        {% if currVarID == blockVarID %}
          {% assign referenced_variant = vari %}
        {% endif %}
      {% endfor %}

      {% if block.type == 'variant' %}
          {% render 'product-cta-section-actions-variant-2024-new-4',
            SID: SID,
            prod: referenced_variant_product,
            var: referenced_variant,
            buyBoxColor: buyBoxColor,
            pricePer: pricePer,
            saveFormat: saveFormat,
            variantTitle: block.settings.title,
            index: forloop.index,
            purchase_type: block.settings.purchase_type
          %}
      {% endif %}
    {% endfor %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% assign buttonSID = SID | append: '-checkout' %}
        {% render 'buy-buttons', SID: buttonSID, product: prod, variant: '', buttonText: "Add to Cart", selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} {
    .product-actions {
      grid-area: 2/2/3/3;
      min-height: 415px;
    }

    .purchase-type {
      button {
        background-color: var(--primary-color);
        color: black;
        border-radius: 5px;
        font-size: 16px;
        min-width: 49%;
        padding: 0.65rem;
        transition: background-color 0.3s, color 0.3s;

        &.selected {
          color: white !important;
        }

        &:not(.selected) {
          background: var(--primary-color-light);
          border: 1px solid var(--primary-color);

          .subscription-details {
            color: var(--primary-color-dark);
          }
        }
      }
    }

    .purchase-option-box {
      background: #fff;
      border: 1px solid var(--border-color);
      cursor: pointer;
      max-height: 72px; /* Start all boxes collapsed */
      filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
      transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
      border-radius: 10px;
      border-color: var(--primary-color);
      overflow: hidden;
      padding: 1rem;

      &:hover {
        filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      }

      &.selected {
        filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
        background-color: #EBF1F3;
        max-height: max-content;
      }

      &[inert] {
        max-height: 72px !important;
        background: #ededed;
        opacity: 0.6;

        .option-title {
          color: grey;
        }
      }

      .radio-box {
        align-items: center;
        display: flex;

        input[type='radio'] {
          display: none;
        }

        label {
          cursor: pointer;
          width: 19px;
          height: 19px;
          border: 1px solid var(--primary-color);
          border-radius: 50%;
          position: relative;
        }
      }

      &.selected {
        .radio-box {
          input[type='radio']:checked + label:after {
            content: '\2713';
            position: absolute;
            top: -2px;
            left: -2px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-color);
            text-align: center;
            line-height: 22px;
            color: #fff;
          }
        }
      }

      .save-title {
        background-color: var(--orange);
        font-weight: bold;
      }

      .top-wrapper {
        max-height: 30px;
      }

      .terms {
        margin-left: 32px;

        @media (max-width: 767px) {
          margin-left: 5vw;
        }
      }

      .price-wrapper {
        min-width: 5rem;

        .total-price {
          color: {{ buyBoxColor | default: 'var(--primary-color-dark)' }};
        }
      }
    }

    .purchase-options {
      .purchase-type {
        font-weight: 600px;
      }
    }

    .product-actions:not(.with-animation) {
      .purchase-option-box {
        max-height: none !important;
        transition: none !important;
      }
    }

    @media (max-width: 1269px) {
      .purchase-option-box {
        width: 100%;
      }
    }

    @media (max-width: 767px) {
      .product-actions {
        grid-area: unset;
        grid-row: 3;
        max-width: unset;
        min-height: unset;
      }

      .purchase-option-box {
        font-size: 4vw;
        padding: 3vw;
        max-height: 16vw;

        &.selected {
          max-height: none;
        }

        .top-wrapper {
          min-height: 9vw;
        }

        .left-wrapper {
          gap: 2vw;
        }

        .option-title {
          font-size: 3.9vw;
        }

        .price-wrapper {
          min-width: 17.7vw;

          .real-price {
            font-size: 4.5vw;
          }
        }

        .terms {
          .subtitle,
          .terms-title {
            font-size: 3.5vw;
          }
        }

        .radio-box {
          label {
            width: 3vw;
            height: 3vw;

            &:after {
              font-size: 2vw;
              width: 3vw !important;
              height: 3vw !important;
              top: -0.25vw !important;
              left: -0.25vw !important;
              display: flex;
              justify-content: center;
              align-items: center;
            }
          }
        }
      }

      .purchase-option-box.selected {
        max-height: max-content;
      }

      .purchase-option-box[inert] {
        max-height: 16vw !important;
      }
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Cache elements
    const productActions = document.getElementById('product-actions-{{ SID }}');
    if (!productActions) {
      console.error('Product actions element not found');
      return;
    }
    const SID = productActions.id.split('-').pop();

    // Cache frequently used elements
    const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
    const submitButton = productActions.querySelector('.checkout-button button');
    const submitSellingPlanIdInput = document.querySelector('.submit-selling-plan-id');
    const submitVariantIdInput = document.querySelector('.submit-variant-id');
    const enableToggleAnimation = typeof isVariantBoxToggle !== 'undefined' ? isVariantBoxToggle : false;

    // Initialize state
    const state = {
      selectedBox: null,
    };

    function getClosedHeight() {
      return window.innerWidth <= 767 ? '16vw' : '72px';
    }

    function safelySetStyle(element, property, value) {
      if (element && element.style && element.style[property] !== value) {
        element.style[property] = value;
      }
    }

    function safelyAddClass(element, className) {
      if (element && !element.classList.contains(className)) {
        element.classList.add(className);
      }
    }

    function safelyRemoveClass(element, className) {
      if (element && element.classList.contains(className)) {
        element.classList.remove(className);
      }
    }

    function adjustMaxHeight(element) {
      if (enableToggleAnimation) {
        const height = element.classList.contains('selected') ? element.scrollHeight + 'px' : getClosedHeight();
        safelySetStyle(element, 'maxHeight', height);
      } else {
        safelySetStyle(element, 'maxHeight', 'none');
      }
    }

    function togglePurchaseBox(element) {
      if (!element) return;
      if (element.classList.contains('selected')) return;

      for (let i = 0; i < purchaseOptionBoxes.length; i++) {
        const box = purchaseOptionBoxes[i];
        safelyRemoveClass(box, 'selected');
        safelySetStyle(box, 'maxHeight', getClosedHeight());
      }

      const isSubscription = element.getAttribute('data-purchase-type') === 'subscribe';
      const subscriptionPlanID = isSubscription ? element.getAttribute('data-subscription-selling-plan-id') : '';
      const variantID = element.getAttribute('data-variant');

      if (submitSellingPlanIdInput) {
        submitSellingPlanIdInput.value = subscriptionPlanID;
      }

      if (submitVariantIdInput) {
        submitVariantIdInput.value = variantID;
      }

      safelyAddClass(element, 'selected');
      const radioInput = element.querySelector("input[type='radio']");
      if (radioInput) {
        radioInput.checked = true;
      }
      state.selectedBox = element;

      updateVariantImage(element);

      if (enableToggleAnimation) {
        safelySetStyle(element, 'maxHeight', element.scrollHeight + 'px');
      }
    }

    function updateVariantImage(element) {
      var SID = '{{ section.id }}'
      if (typeof variantsAmount === 'undefined' || variantsAmount <= 1 || !window['productSliderAllInOne' + SID]) return;

      const index = parseInt(element.getAttribute('data-index')) || 1;
      const swiperInstance = window['productSliderAllInOne' + SID];
      const slideIndex = index;

      swiperInstance.slideTo(slideIndex);
      window.hasInitialImageUpdateHappened = true;
    }

    function initializePurchaseOptions() {
      const urlParams = new URLSearchParams(window.location.search);
      const defaultVariantIndex = parseInt(urlParams.get('default-variant')) || (typeof defaultSelectionIndex !== 'undefined' ? defaultSelectionIndex : 1) - 1;

      // Set default selection
      const defaultBox = purchaseOptionBoxes[defaultVariantIndex] || purchaseOptionBoxes[0];
      if (defaultBox) {
        togglePurchaseBox(defaultBox);
      }
    }

    productActions.addEventListener('click', (event) => {
      const purchaseOptionBox = event.target.closest('.purchase-option-box');
      if (purchaseOptionBox) {
        event.preventDefault();
        togglePurchaseBox(purchaseOptionBox);
      }
    });

    // Throttle function for resize event
    function throttle(func, limit) {
      let lastFunc;
      let lastRan;
      return function() {
        const context = this;
        const args = arguments;
        if (!lastRan) {
          func.apply(context, args);
          lastRan = Date.now();
        } else {
          clearTimeout(lastFunc);
          lastFunc = setTimeout(function() {
            if ((Date.now() - lastRan) >= limit) {
              func.apply(context, args);
              lastRan = Date.now();
            }
          }, limit - (Date.now() - lastRan));
        }
      };
    }

    window.addEventListener('resize', throttle(() => {
      for (let i = 0; i < purchaseOptionBoxes.length; i++) {
        const box = purchaseOptionBoxes[i];
        if (!box.classList.contains('selected')) {
          safelySetStyle(box, 'maxHeight', getClosedHeight());
        }
      }
    }, 200));

    initializePurchaseOptions();
  });
</script>