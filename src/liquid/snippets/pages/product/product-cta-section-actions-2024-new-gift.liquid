{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% assign variantsAmount = product.variants.size %}

{% assign giftsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}
	{% endcase %}
{% endfor %}

<div class="product-actions">
	<div class="purchase-options flex flex-col gap-2">
		<div class="purchase-type flex-nowrap flex w-full gap-2">
			{% assign subscriptionFeatures = 'Save on every order,Guaranteed delivery,Make changes anytime,VIP support,New subscribers gifs' | split: ',' %}
			<button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
				<span>
					Subscribe
					<div class="desktop">& Save</div>
					{% render 'tooltip',
						SID: SID,
						linkTitle: '<i class="tooltip-icon fa-duotone fa-circle-info text-[18px]"></i>',
						title: 'Subscription Details',
						description: '',
						features: subscriptionFeatures
					%}
				</span>
			</button>
			<button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
		</div>

		{% for var in product.variants %}
			<script>
				console.log('var: {{var.title}}');
			</script>
			{% render 'product-cta-section-actions-variant-2024-new', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, index: forloop.index %}
		{% endfor %}

		{% if giftsAmount > 0 %}
			<div class="gift-selector-wrap">
				<div class="gift-selector-title mb-2">Your free gift:</div>

				<div class="gift-options flex-nowrap flex justify-start gap-4">
					{% for block in blocks %}
						{% case block.type %}
							{% when 'gift' %}
								{% assign show_gift = false %}
								{% if block.settings.show_on == 'both' %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'global' and isGlobal %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'us' and isGlobal == false %}
									{% assign show_gift = true %}
								{% endif %}

								{% if show_gift %}
									{% assign giftProd = block.settings.gift_product %}
									{% assign giftVariant = giftProd.selected_or_first_available_variant %}
									{% assign giftProdSubscription = block.settings.gift_product_subscription | default: giftProd %}
									{% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
									{% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

									<div class="gift-option-container flex flex-col items-center">
										<div
											class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer"
											data-gift-id="{{ giftVariant.id }}"
											data-gift-id-subscription="{{ giftVariantSubscription.id | default: giftVariant.id }}">
											<div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 rounded-full">
												<div class="check-mark hidden w-4 h-4 font-bold text-white rounded-full">✓</div>
											</div>

											<div class="gift-image-container flex justify-center">
												<img src="{{ giftThumb | image_url }}" alt="{{ giftProd.title }}" class="object-contain">
											</div>
										</div>

										<div class="gift-content text-center">
											<div class="gift-name mb-1 font-medium">{{ giftProd.title | replace: 'Free ', '' }}</div>
											<div class="gift-price flex items-center justify-center gap-2">
												<span class="original-price text-gray-500 line-through">{{ giftVariantSubscription.compare_at_price | money_with_currency }}</span>
												<span class="sale-price font-bold">FREE</span>
											</div>
										</div>
									</div>
								{% endif %}
						{% endcase %}
					{% endfor %}
				</div>
			</div>
		{% endif %}

		<div class="submit-wrap flex flex-col w-full">
			{% if shop.name == 'CuraLife Global' %}
				{% assign isGlobal = true %}
			{% endif %}

			<input class="submit-variant-id" type="hidden" name="id" value="{{ variant | default: product.selected_or_first_available_variant.id }}" class="product-variant-id">
			<input class="submit-selling-plan-id" type="hidden" name="selling_plan" value="{{ selling_plan_id }}">

			<div class="product-form__buttons main-submit-wrapper flex">
				<button
					id="ProductSubmitButton-{{SID}}"
					data-variant-id="{{ variant | default: product.selected_or_first_available_variant.id }}"
					type="button"
					name="add"
					class="buy-button text-black product-form__submit button--full-width justify-center button--primary text-[20px] p-0 min-h-[50px] items-center bg-[--orange]">
					<!-- The text that should be shown normally -->
					<span class="submit-title">
						{% if buyType == 'buy_now' and shop.name != 'CuraLife Global' %}
							Buy Now
						{% else %}
							Add To Cart
						{% endif %}
					</span>
					<!-- Add a spinner element that will be toggled on loading -->
					<span class="loading-overlay__spinner" style="display: none; margin-left: 10px;">
						<!-- Example SVG spinner; customize as needed -->
						<svg width="24" height="24" viewBox="0 0 24 24" fill="none">
							<circle cx="12" cy="12" r="10" stroke="#000000" stroke-width="2" stroke-dasharray="31.415, 31.415" stroke-linecap="round">
								<animateTransform attributeName="transform" type="rotate" values="0 12 12;360 12 12" dur="1s" repeatCount="indefinite"/>
							</circle>
						</svg>
					</span>
				</button>
			</div>


			<div class="product-form__error-message-wrapper p-2 mt-1 text-center rounded-sm bg-[--light-red]" role="alert" hidden>
				<div class="error-wrapper flex items-center justify-center">
					<svg aria-hidden="true" focusable="false" class="icon icon-error h-[20px] mr-1" viewBox="0 0 13 13">
						<circle cx="6.5" cy="6.50049" r="5.5" stroke="white" stroke-width="2"/>
						<circle cx="6.5" cy="6.5" r="5.5" fill="#EB001B" stroke="#EB001B" stroke-width="0.7"/>
						<path d="M5.87413 3.52832L5.97439 7.57216H7.02713L7.12739 3.52832H5.87413ZM6.50076 9.66091C6.88091 9.66091 7.18169 9.37267 7.18169 9.00504C7.18169 8.63742 6.88091 8.34917 6.50076 8.34917C6.12061 8.34917 5.81982 8.63742 5.81982 9.00504C5.81982 9.37267 6.12061 9.66091 6.50076 9.66091Z" fill="white"/>
						<path d="M5.87413 3.17832H5.51535L5.52424 3.537L5.6245 7.58083L5.63296 7.92216H5.97439H7.02713H7.36856L7.37702 7.58083L7.47728 3.537L7.48617 3.17832H7.12739H5.87413ZM6.50076 10.0109C7.06121 10.0109 7.5317 9.57872 7.5317 9.00504C7.5317 8.43137 7.06121 7.99918 6.50076 7.99918C5.94031 7.99918 5.46982 8.43137 5.46982 9.00504C5.46982 9.57872 6.12061 10.0109 6.50076 10.0109Z" fill="white" stroke="#EB001B" stroke-width="0.7">
					</svg>
					<span class="product-form__error-message text-[12px]"></span>
				</div>

				<div class="notice">
					Please
					<a class="underline" href="https://help{% if isGlobal %}-global{% endif %}.curalife.com/">Contact Us</a>
					, we'd love to help!
				</div>
			</div>

			{% if isBuyWithPrime and isGlobal != true and customer.b2b? == false %}
				<div class="bwp-button">
					{% render 'buy-with-prime-button' %}
				</div>
			{% endif %}

			{% if customer %}
				{% render 'yotpo-product-points-widget' %}
			{% endif %}
		</div>
	</div>
</div>

{% if customer.email contains 'yotam' and false %}
	<script>
		// Cart Gift Handler Module
		const CartGiftHandler = {
			giftProductMapping: {
				"curalin-black-friday-week": "free-curaslim",
				"curaslim-black-friday-week": "free-curalin",
				"curaslin-curaslim-black-friday-week": {"free-magnesium", "free-restful-sleep", "free-joint-care"}
			},

			init() {
				document.addEventListener('click', e => {
					const clickPath = e.composedPath();
					const deleteButton = clickPath.find(el =>
						el.classList && el.classList.contains('styles_TrashButton__deleteButton__8uIHq')
					);

					if (!deleteButton) return;
					console.log('Delete button found:', deleteButton);

					const productRow = clickPath.find(el =>
						el.classList && el.classList.contains('styles_ProductRow__product__AokJ5')
					);

					if (!productRow) return;
					console.log('Product row found:', productRow);

					this.handleDeleteButtonClick(deleteButton, productRow).catch(console.error);
				});
			},

			async handleDeleteButtonClick(deleteButton, productRow) {
				try {
					const titleLink = productRow.querySelector('.upcart-product-title-link');
					if (!titleLink) return;

					const handle = titleLink.href.split('/products/')[1].split('?')[0];
					console.log('Deleting product:', handle);

					const cart = await (await fetch('/cart.js')).json();
					console.log('Current cart:', cart.items);

					const itemsToRemove = cart.items.filter(item => {
						const itemHandle = item.url.split('/products/')[1].split('?')[0];
						return itemHandle === handle || itemHandle === this.giftProductMapping[handle];
					});

					console.log('Removing items:', itemsToRemove);

					if (itemsToRemove.length === 0) return;

					const updates = {};
					itemsToRemove.forEach(item => updates[item.key] = 0);

					const response = await fetch('/cart/update.js', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ updates })
					});

					console.log('Update response:', await response.json());
					location.reload();
				} catch (error) {
					console.error('Error:', error);
				}
			}
		};

		CartGiftHandler.init();
	</script>
{% endif %}

<script>
  document.addEventListener('DOMContentLoaded', function() {
		const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
		if (!productActions) {
			console.error('Product actions container not found');
			return;
		}

		const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
		if (!purchaseOptionBoxes || purchaseOptionBoxes.length === 0) {
			console.error('No purchase option boxes found');
			return;
		}

		const SID = '{{ SID }}';
		window.SID = SID;

		const styleSheet = document.createElement("style");
		styleSheet.textContent = `
			.subscription-content, .buy-once-content {
				transition: opacity 0.3s ease-in-out;
			}
		`;
		document.head.appendChild(styleSheet);

		if (purchaseOptionBoxes.length > 0) {
			initializePurchaseOptions();
			setupMutationObserver();
		}

    // Gift selection logic
    const giftOptionContainers = document.querySelectorAll('.gift-option-container');

    giftOptionContainers.forEach(container => {
      container.addEventListener('click', function(event) {
        // Remove 'selected' class from all gift options
        giftOptionContainers.forEach(gift => gift.classList.remove('selected'));

        // Add 'selected' class to the clicked gift
        container.classList.add('selected');

        // Update radio indicator
        updateRadioIndicator(container);
      });
    });

    function updateRadioIndicator(selectedContainer) {
      giftOptionContainers.forEach(container => {
        const checkMark = container.querySelector('.check-mark');
        if (container === selectedContainer) {
          checkMark.classList.remove('hidden');
        } else {
          checkMark.classList.add('hidden');
        }
      });
    }

    // Initialize the first gift as selected by default
    if (giftOptionContainers.length > 0) {
      const firstGift = giftOptionContainers[0];
      firstGift.classList.add('selected');
      updateRadioIndicator(firstGift);
    }

    function isSubscriptionSelected() {
			const productActions = document.querySelector('.product-actions');
			const selectedButton = productActions?.querySelector('.purchase-type button.selected');
			return selectedButton?.classList.contains('subscription') ?? true;
		}

		function initializePurchaseOptions() {
			// Set initial purchase type for all variant boxes to "subscribe"
			purchaseOptionBoxes.forEach(box => {
				box.setAttribute('data-purchase-type', 'subscribe');
			});

      const urlParams = new URLSearchParams(window.location.search);
      const defaultVariant = urlParams.get('default-variant') ?
        parseInt(urlParams.get('default-variant')) :
        {{ defaultSelectionIndex | default: 1 }};

      const initialVariantIndex = defaultVariant ? defaultVariant - 1 : 0;

      // Handle initial inert state for subscription boxes
      purchaseOptionBoxes.forEach(box => {
        const subscriptionSellingPlanId = box.dataset.subscriptionSellingPlanId;
        if (!subscriptionSellingPlanId || subscriptionSellingPlanId === '0') {
          box.setAttribute('inert', '');
        }

        const subscriptionContent = box.querySelectorAll('.subscription-content');
        const buyOnceContent = box.querySelectorAll('.buy-once-content');

        box.classList.remove('selected');
        box.style.maxHeight = '68px';

        subscriptionContent.forEach(el => {
          el.style.display = 'block';
          el.style.opacity = '1';
        });

        buyOnceContent.forEach(el => {
          el.style.display = 'none';
          el.style.opacity = '0';
        });

        const radio = box.querySelector("input[type='radio']");
        if (radio) radio.checked = false;
      });

      // Find the first valid box for initial selection
			let defaultBox = purchaseOptionBoxes[initialVariantIndex];
				if (defaultBox && defaultBox.hasAttribute('inert')) {
					defaultBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
				}

				if (defaultBox) {
					defaultBox.classList.add('selected');
					// Set initial height without animation
					defaultBox.style.transition = 'none';
					defaultBox.style.maxHeight = `${defaultBox.scrollHeight}px`;

					// Force reflow
					defaultBox.offsetHeight;

					// Re-enable transitions
					requestAnimationFrame(() => {
						defaultBox.style.transition = '';
					});

					const radio = defaultBox.querySelector("input[type='radio']");
					if (radio) radio.checked = true;

        const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
        const submitVariantElement = productActions.querySelector('.submit-variant-id');

        if (submitSellingPlanElement) {
          submitSellingPlanElement.value = defaultBox.dataset.subscriptionSellingPlanId || '';
        }
        if (submitVariantElement) {
          submitVariantElement.value = defaultBox.dataset.originalVariant || defaultBox.dataset.variant;
        }

        const toggleIcon = defaultBox.querySelector('.toggle-icon');
        if (toggleIcon) toggleIcon.style.display = 'block';
      }

      const subscriptionButton = productActions.querySelector('.purchase-type .subscription');
      const buyOnceButton = productActions.querySelector('.purchase-type .buy-once');

      if (subscriptionButton && buyOnceButton) {
        subscriptionButton.classList.add('selected');
        buyOnceButton.classList.remove('selected');
      }

      if (defaultBox) {
        updateYotpoPointsWidget(defaultBox);
      }
    }

    function setupMutationObserver() {
      const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const targetBox = mutation.target.closest('.purchase-option-box');
            if (targetBox?.classList.contains('selected')) {
              adjustMaxHeight(targetBox);
            }
          }
        });
      });

      purchaseOptionBoxes.forEach(element => {
        observer.observe(element, { attributes: true, attributeFilter: ['class'] });
      });
    }

    productActions.addEventListener('click', (event) => {
      const purchaseBox = event.target.closest('.purchase-option-box');
      if (purchaseBox) togglePurchaseBox(purchaseBox);

      const purchaseTypeButton = event.target.closest('.purchase-type button');
      if (purchaseTypeButton) handlePurchaseTypeClick(event, purchaseTypeButton);

      const checkoutButton = event.target.closest('.submit-wrap subscription, .add-to-cart-button buy-once, .submit-wrap button.main-btn');
      if (checkoutButton) handleMainButtonClick(event, checkoutButton);
    });

		function handlePurchaseTypeClick(event, button) {
			event.stopPropagation();

			const productActions = document.querySelector('.product-actions');
			const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
			const submitVariantElement = productActions.querySelector('.submit-variant-id');
			const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');

			// Toggle button states
			productActions.querySelectorAll('.purchase-type button').forEach(btn => btn.classList.remove('selected'));
			button.classList.add('selected');

			const isSubscription = button.classList.contains('subscription');

			// Update data-purchase-type attribute for all variant boxes
			purchaseOptionBoxes.forEach(box => {
				box.setAttribute('data-purchase-type', isSubscription ? 'subscribe' : 'buyonce');
			});

			// Get currently selected box
			const selectedBox = productActions.querySelector('.purchase-option-box.selected');

			if (selectedBox) {
				// Update variant and selling plan based on the currently selected box
				if (submitVariantElement) {
					submitVariantElement.value = isSubscription ?
						selectedBox.dataset.originalVariant :
						selectedBox.dataset.variant;
				}

				if (submitSellingPlanElement) {
					submitSellingPlanElement.value = isSubscription ?
						selectedBox.dataset.subscriptionSellingPlanId :
						'';
				}

				console.log('Selected box data:', {
					originalVariant: selectedBox.dataset.originalVariant,
					variant: selectedBox.dataset.variant,
					sellingPlanId: selectedBox.dataset.subscriptionSellingPlanId,
					isSubscription: isSubscription
				});
			}

			// Update all variant boxes
			purchaseOptionBoxes.forEach(box => {
				const subscriptionContent = box.querySelectorAll('.subscription-content');
				const buyOnceContent = box.querySelectorAll('.buy-once-content');

				const currentContent = isSubscription ? buyOnceContent : subscriptionContent;
				const newContent = isSubscription ? subscriptionContent : buyOnceContent;

				// Fade out current content
				currentContent.forEach(el => {
					el.style.opacity = '0';
				});

				// Wait for fade out to complete before showing new content
				setTimeout(() => {
					currentContent.forEach(el => {
						el.style.display = 'none';
					});

					newContent.forEach(el => {
						el.style.display = 'block';
						el.style.opacity = '0';
					});

					requestAnimationFrame(() => {
						newContent.forEach(el => {
							el.style.opacity = '1';
						});
					});
				}, 300);

				// Handle inert state for subscription
				if (isSubscription) {
					const sellingPlanId = box.dataset.subscriptionSellingPlanId;
					if (!sellingPlanId || sellingPlanId === '0') {
						box.setAttribute('inert', '');
					} else {
						box.removeAttribute('inert');
					}
				} else {
					box.removeAttribute('inert');
				}

				// Handle per month display
				{% unless product.metafields.custom.is_price_per_month %}
					const perMonthElement = box.querySelector('.per-month');
					if (perMonthElement) {
						perMonthElement.style.display = isSubscription ? 'block' : 'none';
					}
				{% endunless %}

				// Update compared at price display
				const comparedAtPrice = box.querySelector('.compared-at-price');
				if (comparedAtPrice) {
					const itemPrice = parseFloat(box.dataset.itemPrice);
					const subscriptionItemPrice = parseFloat(box.dataset.subscriptionItemPrice);
					const originalItemCap = parseFloat(box.dataset.originalItemCap);
					const currentPrice = isSubscription ? subscriptionItemPrice : itemPrice;

					comparedAtPrice.style.opacity = '0';
					setTimeout(() => {
						if (originalItemCap > currentPrice) {
							comparedAtPrice.style.display = 'block';
							requestAnimationFrame(() => {
								comparedAtPrice.style.opacity = '1';
							});
						} else {
							comparedAtPrice.style.display = 'none';
						}
					}, 300);
				}
			});

			// Check if currently selected box becomes inert
			if (selectedBox && selectedBox.hasAttribute('inert')) {
				// Find first non-inert box
				const firstAvailableBox = Array.from(purchaseOptionBoxes).find(box => !box.hasAttribute('inert'));
				if (firstAvailableBox) {
					selectedBox.classList.remove('selected');
					selectedBox.style.maxHeight = '68px';
					const selectedToggleIcon = selectedBox.querySelector('.toggle-icon');
					if (selectedToggleIcon) selectedToggleIcon.style.display = 'none';

					firstAvailableBox.classList.add('selected');
					adjustMaxHeight(firstAvailableBox);
					const newToggleIcon = firstAvailableBox.querySelector('.toggle-icon');
					if (newToggleIcon) newToggleIcon.style.display = 'block';

					// Update form values for the new box
					if (submitSellingPlanElement) {
						submitSellingPlanElement.value = isSubscription ?
							firstAvailableBox.dataset.subscriptionSellingPlanId :
							'';
					}
					if (submitVariantElement) {
						submitVariantElement.value = isSubscription ?
							firstAvailableBox.dataset.originalVariant :
							firstAvailableBox.dataset.variant;
					}

					// Update radio button
					const radioInput = firstAvailableBox.querySelector("input[type='radio']");
					if (radioInput) radioInput.checked = true;

					// Update other UI elements
					updateYotpoPointsWidget(firstAvailableBox);
				}
			}

			// Update selected gift if any
			const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
			if (selectedGiftContainer) {
				const giftBorder = selectedGiftContainer.querySelector('.gift-option-border');
				const giftId = isSubscription ?
					giftBorder.getAttribute('data-gift-id-subscription') :
					giftBorder.getAttribute('data-gift-id');

				if (!giftId) {
					console.warn('No valid gift ID found for', isSubscription ? 'subscription' : 'one-time', 'purchase');
				}
			}
		}

    function adjustMaxHeight(element) {
      const openHeight = element.scrollHeight;
      element.style.maxHeight = `${openHeight}px`;
    }

    function togglePurchaseBox(element) {
      if (element.classList.contains('selected')) return;

      // Update previous selected box
      const previousSelected = productActions.querySelector('.purchase-option-box.selected');
      if (previousSelected) {
        previousSelected.classList.remove('selected');
        previousSelected.style.maxHeight = '68px';
        const toggleIcon = previousSelected.querySelector('.toggle-icon');
        if (toggleIcon) toggleIcon.style.display = 'none';
      }

      // Update new selected box
      element.classList.add('selected');
      element.style.maxHeight = `${element.scrollHeight}px`;

      const toggleIcon = element.querySelector('.toggle-icon');
      if (toggleIcon) toggleIcon.style.display = 'block';

      // Update form values based on subscription state
      const isSubscription = isSubscriptionSelected();

      // Get the appropriate selling plan ID and variant ID
      const sellingPlanId = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
      const variantId = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

      // Find and update the form elements
      const submitSellingPlanElement = productActions.querySelector('.submit-selling-plan-id');
      const submitVariantElement = productActions.querySelector('.submit-variant-id');

      // Update selling plan ID
      if (submitSellingPlanElement) {
        submitSellingPlanElement.value = sellingPlanId;
      }

      // Update variant ID
      if (submitVariantElement) {
        submitVariantElement.value = variantId;
      }

      // Update radio button
      const radioInput = element.querySelector("input[type='radio']");
      if (radioInput) radioInput.checked = true;

      // Update other UI elements
      updateYotpoPointsWidget(element);

      // {% if variantsAmount > 1 %}
      //   updateVariantImage(element);
      // {% endif %}
    }

    function updateYotpoPointsWidget(parentBox) {
      const price = isSubscriptionSelected()
        ? parentBox.dataset.subscriptionItemPrice
        : parentBox.dataset.itemPrice;

      const newPoints = Math.floor(Number(price) / 100);
      const pointsElement = productActions.querySelector('.reward-points-widget .current-price');
      if (pointsElement) pointsElement.textContent = newPoints;
    }

    // Define showError and hideError functions
    function showError(message) {
      const errorMessageWrapper = document.querySelector('.product-form__error-message-wrapper');
      const errorMessage = document.querySelector('.product-form__error-message');

      if (errorMessageWrapper && errorMessage) {
        errorMessage.textContent = message;
        errorMessageWrapper.hidden = false;
      }
    }

    function hideError() {
      const errorMessageWrapper = document.querySelector('.product-form__error-message-wrapper');
      if (errorMessageWrapper) {
        errorMessageWrapper.hidden = true;
      }
    }

    // Form submission handler replaced with button click handler
    const submitButton = document.getElementById('ProductSubmitButton-{{SID}}');

    // Pass cart data and product IDs into JavaScript variables using Liquid
    var cartData = {{ cart | json }};
    var currentProductId = {{ product.id }};
    // Assuming giftProd is defined in your Liquid code
    var giftProductId = {{ giftProd.id | default: 'null' }};

		submitButton.addEventListener('click', async function(event) {
	event.preventDefault();
	if (!productActions) return;
	toggleButtonLoading(submitButton, true);

	try {
		const variantIdInput = productActions.querySelector('.submit-variant-id');
		const sellingPlanIdInput = productActions.querySelector('.submit-selling-plan-id');
		const hasGiftOptions = document.querySelector('.gift-option-container') !== null;
		const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
		const giftOptionBorder = selectedGiftContainer?.querySelector('.gift-option-border');

		if (!variantIdInput) throw new Error('Variant ID input not found');

		const isSubscription = !!sellingPlanIdInput?.value;
		let giftId = null;

		if (giftOptionBorder) {
			giftId = isSubscription ?
				(giftOptionBorder.getAttribute('data-gift-id-subscription') || giftOptionBorder.getAttribute('data-gift-id')) :
				giftOptionBorder.getAttribute('data-gift-id');
		}

		const variantId = variantIdInput.value;
		if (!variantId) {
			showNotification('Missing variant ID', 'error');
			return;
		}

		const items = [{
			id: variantId,
			product_id: currentProductId,
			quantity: 1,
			...(sellingPlanIdInput?.value && { selling_plan: sellingPlanIdInput.value })
		}];

		if (hasGiftOptions) {
			if (!giftId) {
				showNotification('Please select a gift', 'error');
				return;
			}
			items.push({
				id: giftId,
				product_id: giftProductId,
				quantity: 1
			});
		}

		{% if buyType == "buy_now" and shop.name != "CuraLife Global" %}
			const cartDrawer = document.getElementById('upCart');
			if (cartDrawer) cartDrawer.remove();
			await fetch('/cart/clear.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' }
			});
		{% endif %}

		const result = await addValidItemsToCart(items);
		if (result.success) {
			{% if buyType == "buy_now" and shop.name != "CuraLife Global" %}
				window.location.href = '/checkout';
			{% endif %}
		} else if (result.error) {
			showNotification(result.error.message || 'Failed to add items to cart', 'error');
		}
	} catch (error) {
		showNotification(error.message || 'An unexpected error occurred', 'error');
	} finally {
		toggleButtonLoading(submitButton, false);
	}
});

async function addValidItemsToCart(items) {
	try {
		// 1. Fetch the current cart
		let cartResponse = await fetch('/cart.js');
		let currentCart = await cartResponse.json();

		// 2. Find the main item
		const mainItem = items.find(item => item.product_id === currentProductId);
		if (!mainItem) {
			throw new Error('Main product not found in items');
		}

		// Determine if new item is subscription
		const isSubscription = !!(mainItem.selling_plan && mainItem.selling_plan !== '' && mainItem.selling_plan !== '0');

		// Force subscription quantity to 1
		if (isSubscription) {
			mainItem.quantity = 1;
		} else {
			delete mainItem.selling_plan;
		}

		// 3. Check for existing line item
		let existingLineItem = currentCart.items.find(item => item.product_id === mainItem.product_id);

		if (existingLineItem) {
			// Always remove existing line item when adding new one of different type
			const updates = {};
			updates[existingLineItem.key] = 0;
			await fetch('/cart/update.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ updates })
			});

			// Allow time for removal to process
			await new Promise(resolve => setTimeout(resolve, 500));
		}

		// 4. Add the new item
		const addResponse = await fetch('/cart/add.js', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ items: [mainItem] })
		});

		if (!addResponse.ok) {
			const errorData = await addResponse.json();
			throw new Error(errorData.description);
		}

		// 5. Handle gift items
		const giftItems = items.filter(item => item.product_id !== currentProductId);
		if (giftItems.length > 0) {
			for (const giftItem of giftItems) {
				const giftResponse = await fetch('/cart/add.js', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ items: [giftItem] })
				});

				if (!giftResponse.ok) {
					const errorData = await giftResponse.json();
					throw new Error(errorData.description);
				}
			}
		}

		showNotification('Items added to cart successfully', 'success');
		return { success: true, addedItems: items };

	} catch (error) {
		console.error('Cart error:', error);
		showNotification(error.message || 'Error adding items to cart', 'error');
		return { success: false, error };
	}
}

async function validateCartItem(item, currentCart) {
		try {
				console.log('Validating item:', item);

				const productId = parseInt(item.product_id);
				if (!productId) {
						throw new Error(`Product ID is missing for variant ${item.id}`);
				}

				// Check for subscription/one-time conflict
				const isSubscription = !!item.selling_plan;
				const existingItems = currentCart.items.filter(cartItem =>
						cartItem.product_id === productId
				);

				if (existingItems.length > 0) {
						const hasSubscription = existingItems.some(cartItem => !!cartItem.selling_plan);
						const hasBuyOnce = existingItems.some(cartItem => !cartItem.selling_plan);

						if ((isSubscription && hasBuyOnce) || (!isSubscription && hasSubscription)) {
								return {
										isValid: false,
										error: {
												code: 'SUBSCRIPTION_CONFLICT',
												message: 'Cannot mix subscription and one-time purchases for the same product',
												type: 'error'
										}
								};
						}
				}

				// Check if this is a gift item
				const giftOptions = document.querySelectorAll('.gift-option-border');
				const isItemFree = Array.from(giftOptions).some(giftOption => {
						const giftId = isSubscriptionSelected()
								? giftOption.dataset.giftIdSubscription
								: giftOption.dataset.giftId;
						return giftId === item.id.toString();
				});

				if (isItemFree) {
						const currentFreeItems = currentCart.items.filter(cartItem => {
								return Array.from(giftOptions).some(giftOption => {
										const giftId = isSubscriptionSelected()
												? giftOption.dataset.giftIdSubscription
												: giftOption.dataset.giftId;
										return cartItem.variant_id.toString() === giftId;
								});
						});

						const bfcmDealCount = await countUniqueProductsWithTag(currentCart);

						if (currentFreeItems.length >= bfcmDealCount) {
								return {
										isValid: false,
										error: {
												code: 'FREE_ITEM_LIMIT',
												message: `You can have up to ${bfcmDealCount} free gift${bfcmDealCount !== 1 ? 's' : ''} (one for each BFCM deal in your cart).`,
												type: 'error'
										}
								};
						}
				}

				return { isValid: true };
		} catch (error) {
				console.error('Validation error:', error);
				return {
						isValid: false,
						error: {
								code: 'VALIDATION_ERROR',
								message: 'Unable to validate item. Please try again.',
								type: 'error'
						}
				};
		}
}

function findFailedValidationIndex(validationResults, invalidItemIndex) {
	let failedCount = 0;
	for (let i = 0; i < validationResults.length; i++) {
		if (!validationResults[i].isValid) {
			if (failedCount === invalidItemIndex) {
				return i;
			}
			failedCount++;
		}
	}
	return -1;
}

async function countUniqueProductsWithTag(cart) {
  try {
    // Use the product title to check for 'Holiday Week'
    const uniqueProducts = cart.items.reduce((acc, item) => {
      if (acc[item.product_id]) {
        return acc;
      }

      const hasBlackFridayWeek = item.title && item.title.includes('Holiday Sale');
      console.log('Checking item:', item.title, 'Has Holiday Sale:', hasBlackFridayWeek);

      acc[item.product_id] = hasBlackFridayWeek;
      return acc;
    }, {});

    const blackFridayWeekCount = Object.values(uniqueProducts).filter(Boolean).length;

    // Always allow at least one free gift
    return Math.max(blackFridayWeekCount, 1);
  } catch (error) {
    console.error('Error counting Holiday Sale Week products:', error);
    return 1; // Default to 1 if there's an error
  }
}

    function showNotification(message, type = 'error') {
      if (!{{ isCartNotifications | default: false }}) {
        return;
      }

      const notification = document.createElement('div');
      notification.className = `cart-notification ${type} fixed bottom-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg shadow-lg max-w-md z-50 transition-opacity duration-300 z-[2147483640]`;

      // Style based on type
      if (type === 'error') {
        notification.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
      } else if (type === 'success') {
        notification.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
      } else if (type === 'info') {
        notification.classList.add('bg-blue-100', 'border', 'border-blue-400', 'text-blue-700');
      }

      // Add content
      notification.innerHTML = `
        <div class="flex items-center">
          <div class="mr-3">
            ${type === 'error' ? '⚠️' : type === 'success' ? '✅' : 'ℹ️'}
          </div>
          <div class="text-sm font-medium">
            ${message}
          </div>
          <button class="hover:text-gray-500 ml-auto text-gray-400" onclick="this.parentElement.parentElement.remove()">
            ✕
          </button>
        </div>
      `;

      // Add to document
      document.body.appendChild(notification);

      // Remove after 5 seconds
      setTimeout(() => {
        notification.classList.add('opacity-0');
        setTimeout(() => notification.remove(), 300);
      }, 5000);
    }

		function toggleButtonLoading(buttonElement, isLoading) {
			if (!buttonElement) {
				console.error('Button element not found in toggleButtonLoading');
				return;
			}

			// Query for spinner and button text.
			const loader = buttonElement.querySelector('.loading-overlay__spinner');
			const buttonText = buttonElement.querySelector('.button-text, .submit-title');

			// If neither element exists, simply return.
			if (!loader && !buttonText) {
				console.warn('Neither loader nor buttonText found; skipping toggleButtonLoading.');
				return;
			}

			if (loader) {
				loader.style.display = isLoading ? 'block' : 'none';
			}
			if (buttonText) {
				buttonText.style.display = isLoading ? 'none' : 'block';
			}
		}

    function updateVariantImage(element) {
				if (!element || !element.dataset.variant) {
						console.warn('Invalid element or missing data-variant attribute');
						return;
				}

				const SID = window.SID || '';
				const sliderId = `productSliderAllInOne${SID}`;
				let slider = window[sliderId];
				const targetVariantId = element.dataset.variant;

				console.log("Updating variant image for variant ID:", targetVariantId);

				if (!slider || !slider.slides || !slider.slides.length) {
						return new Promise((resolve) => {
								const checkSlider = setInterval(() => {
										slider = window[sliderId];
										if (slider && slider.slides && slider.slides.length > 0) {
												clearInterval(checkSlider);
												performSlideUpdate(slider, targetVariantId);
												resolve();
										}
								}, 100);

								setTimeout(() => {
										clearInterval(checkSlider);
										console.warn('Slider initialization timed out');
										resolve();
								}, 5000);
						});
				}

				performSlideUpdate(slider, targetVariantId);
		}

		function performSlideUpdate(slider, targetVariantId) {
				try {
						if (!slider || !targetVariantId) {
								console.warn('Invalid slider or variant ID');
								return;
						}

						// Find the slide with matching variant ID
						const slideIndex = Array.from(slider.slides).findIndex(slide =>
								slide.getAttribute('data-variant-id') === targetVariantId
						);

						if (slideIndex !== -1) {
								slider.update();

								requestAnimationFrame(() => {
										slider.slideTo(slideIndex, 300);

										setTimeout(() => {
												slider.update();
										}, 350);
								});
						} else {
								console.warn(`No slide found with variant ID: ${targetVariantId}`);
						}
				} catch (error) {
						console.error('Error during slide update:', error);
				}
		}
  });
</script>

{% if giftsAmount > 0 %}
	<style>
		.gift-selector-wrap {
			margin: 1rem 0;
		}

		.gift-option-border {
			transition: all 0.3s ease;
			border: 2px solid #e5e7eb;
			background: #fff;
			width: 120px;
			aspect-ratio: 1/1;

			@media (width < 768px) {
				width: 100%;
				height: unset;
			}
		}

		.gift-option-border:hover {
			border-color: var(--primary-color-lighter);
		}

		.gift-option-container.selected .gift-option-border {
			border-color: var(--primary-color);
			background-color: rgba(var(--primary-color-rgb), 0.05);
		}

		.check-mark {
			transition: all 0.2s ease;
			margin-top: -4px;
			margin-left: 3px;
		}

		.check-mark.hidden {
			display: none;
		}

		.radio-indicator {
			transition: all 0.2s ease;
			display: flex;
			align-items: center;
			justify-content: center;
			font-size: 16px;
		}

		.gift-option-container.selected .radio-indicator {
			background-color: var(--primary-color);
		}

		@media (width < 768px) {
			.gift-content {
				font-size: 3.5vw;
			}
		}

		.sale-price {
			color: var(--primary-color-dark);
		}
	</style>
{% endif %}

<style>
	#cta-section-{{ SID }} .purchase-type button {
	  background-color: var(--primary-color);
	  color: black;
	  border-radius: 5px;
	  font-size: 16px;
	  min-width: 49%;
	  padding: 0.5rem;

	  &.selected {
	    color: white !important;
	  }

	  &:not(.selected) {
	    background: var(--primary-color-lighter);
	    border: 1px solid var(--primary-color);

	    .subscription-details {
	      color: var(--primary-color-dark);
	    }
	  }
	}

	#cta-section-{{ SID }} .purchase-option-box .radio-box input[type='radio'] {
	    display: none;
	}

	#cta-section-{{ SID }} .purchase-option-box .radio-box label {
	    cursor: pointer;
	    width: 19px;
	    height: 19px;
	    border: 1px solid var(--primary-color);
	    border-radius: 50%;
	    position: relative;
	}

	#cta-section-{{ SID }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
	    content: '\2713';
	    position: absolute;
	    top: -2px;
	    left: -2px;
	    width: 20px;
	    height: 20px;
	    border-radius: 50%;
	    background: var(--primary-color);
	    text-align: center;
	    line-height: 22px;
	    color: #fff;
	}

	#cta-section-{{ SID }} .product-actions {
	  grid-area: 2/2/3/3;
	  min-height: 415px;

	  @media (width < 768px) {
	    grid-area: unset;
	    grid-row: 3;
	    max-width: unset;
	    min-height: unset;
	  }
	}

	#cta-section-{{ SID }} .purchase-option-box {
	  background: #fff;
	  border: 1px solid #cbcbcb;
	  cursor: pointer;
	  filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
	  transition: max-height 0.5s ease-in-out;
	  border-radius: 10px;
	  border-color: var(--primary-color);
	  overflow: hidden;
	  padding: 0.75rem 1rem;
	max-height: 68px;
	will-change: max-height;
	contain: layout;

	  &:hover {
	    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
	  }

	  &.selected {
	    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
	    border-width: 3px;
	    max-height: max-content;
		max-height: 200px;
	  }

	  &[inert] {
	    max-height: 68px !important;
	    background: #ededed;
	    opacity: 0.6;

	    .option-title {
	      color: grey;
	    }
	  }

	  @media (width < 1270px) {
	    width: 100%;
	  }

	  @media (width < 768px) {
	    font-size: 4vw;
	  }

	  .radio-box {
	    align-items: center;
	    display: flex;

	    @media (width < 768px) {
	      padding: 3vw 0;
	    }
	  }

	  .price-wrapper {
	    .total-price {
	      color: var(--primary-color-dark);
	    }

	    .compared-at-price {
	      color: var(--primary-color-light);
	    }
	  }
	}

	.subscription-content,
	.buy-once-content,
	.subtitle.subscription,
	.subtitle.buy-once {
	  transition: opacity 0.3s ease-in-out;
	}

	/* Initial states */
	.subscription-content,
	.buy-once-content,
	.subtitle.subscription,
	.subtitle.buy-once {
	  opacity: 0;
	  display: none;
	}

	/* Active states */
	.subscription-content.active,
	.buy-once-content.active,
	.subtitle.subscription.active,
	.subtitle.buy-once.active {
	  opacity: 1;
	  display: block;
	}
</style>
