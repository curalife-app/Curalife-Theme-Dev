{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% if product.handle == 'curalin' or product.handle == 'curaslim' %}
	{% assign shippingPrice = 790 %}
{% else %}
	{% assign shippingPrice = 1000 %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% assign faqsAmount = value %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}

		{% when 'faq' %}
			{% assign faqsAmount = faqsAmount | plus: 1 %}
	{% endcase %}
{% endfor %}

<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}" data-gifts-amount="{{ giftsAmount }}">
	<div class="purchase-options flex flex-col gap-3 mb-3">
		<div class="font-semibold text-[18px]">{{ variantsTitle }}</div>

		<div class="variant-boxes flex justify-around gap-2">
			{% for block in blocks %}
				{% assign varPurchaseType = block.settings.purchase_type %}
				{% if block.type == 'variant' and varPurchaseType == 'subscribe' %}
					{% assign referenced_variant = blank %}
					{% if isGlobal %}
						{% assign blockVarID = block.settings.variant_id_global | plus: 0 %}
					{% else %}
						{% assign blockVarID = block.settings.variant_id | plus: 0 %}
					{% endif %}

					{% for vari in referenced_variant_product.variants %}
						{% assign currVarID = vari.id | plus: 0 %}

						{% if currVarID == blockVarID %}
							{% assign referenced_variant = vari %}
						{% endif %}
					{% endfor %}

					{% assign var = referenced_variant %}

					{% comment %} Core Variable Assignments {% endcomment %}
					{% assign variant_id = var.metafields.custom.reference_variant_id | default: var.id %}
					{% assign bottle_quantity = var.metafields.my_fields.pack_bottles_quantity %}

					{% comment %} Price Calculations {% endcomment %}
					{% assign original_item_price = var.metafields.custom.original_item.value.price %}
					{% assign original_item_cap = var.metafields.custom.original_item.value.compare_at_price | default: original_item_price %}
					{% assign original_item_cap_total = original_item_cap | times: bottle_quantity %}
					{% assign item_price = var.price | divided_by: bottle_quantity %}

					{% comment %} Savings Calculations {% endcomment %}
					{% assign subscription_save_money = original_item_cap | minus: subscription_item_price %}
					{% assign buy_once_save_money = original_item_cap | minus: item_price %}

					{% comment %} Selling Plan ID Logic {% endcomment %}
					{% if var.metafields.custom.referenced_variant_product_handle %}
						{% assign selling_plan_id = referenced_variant.metafields.subscription.selling_plan_id | default: variant.metafields.subscription.selling_plan_id %}
					{% elsif var.metafields.subscription.selling_plan_id %}
						{% assign selling_plan_id = var.metafields.subscription.selling_plan_id %}
					{% elsif var.selling_plan_allocations.size > 0 %}
						{% assign found_plan = false %}
						{% for allocation in var.selling_plan_allocations %}
							{% if allocation.selling_plan.name contains bottle_quantity %}
								{% assign selling_plan_id = allocation.selling_plan.id %}
								{% assign found_plan = true %}
								{% break %}
							{% endif %}
						{% endfor %}
						{% if found_plan == false %}
							{% assign selling_plan_id = var.selling_plan_allocations.first.selling_plan.id %}
						{% endif %}
					{% endif %}

					{% assign subscription_save_percents = 0 %}
					{% assign subscription_item_price = original_item_cap %}

					{% for allocation in var.selling_plan_allocations %}
						{% assign selling = selling_plan_id | minus: 0 %}
						{% if allocation.selling_plan.id == selling %}
							{% if allocation.compare_at_price %}
								{% assign original_price = allocation.compare_at_price %}
								{% assign discounted_price = allocation.price %}
								{% assign subscription_save_percents = original_price | minus: discounted_price | times: 100 | divided_by: original_price %}
								{% assign mod_5_remainder = subscription_save_percents | modulo: 5 %}
								{% if mod_5_remainder < 3 %}
									{% assign subscription_save_percents = subscription_save_percents | minus: mod_5_remainder %}
								{% else %}
									{% assign subscription_save_percents = subscription_save_percents | plus: 5 | minus: mod_5_remainder %}
								{% endif %}
								{% assign subscription_item_price = discounted_price | divided_by: bottle_quantity %}
							{% else %}
								{% assign subscription_save_percents = 0 %}
								{% assign subscription_item_price = allocation.price | divided_by: bottle_quantity %}
							{% endif %}
						{% endif %}
					{% endfor %}

					{% assign subscription_total_price = subscription_item_price | times: bottle_quantity %}

					{% assign firstMonthDiscount = block.settings.first_month_discount_percentage %}

					<div
						id="variant-box-{{ SID }}-{{ forloop.index }}"
						class="variant-box flex flex-col items-center variant-tab-style text-center w-full {% if forloop.index == 1 %}selected{% endif %} {{ varPurchaseType }}"
						data-variant="{{ blockVarID }}"
						data-product="{{ prod.id }}"
						data-original-variant="{{ var.id }}"
						data-subscription-selling-plan-id="{{ selling_plan_id }}"
						data-price="{{ var.price | money_without_currency | replace: ".00", "" }}"
						data-sku="{{ var.sku }}"
						data-index="{{ forloop.index }}"
						data-item-price="{{ item_price }}"
						data-subscription-price="{{ subscription_total_price }}"
						data-subscription-item-price="{{ subscription_item_price }}"
						data-original-item-cap="{{ original_item_cap }}"
						data-dc="{{ var.metafields.custom.discount_code | base64_encode }}"
						data-buy-once-discount="{{ var.metafields.custom.save_percents }}"
						data-subscription-discount="{{ subscription_save_percents }}"
						data-first-month-discount="{{ firstMonthDiscount }}"
						data-price-per="{{ pricePer }}"
						data-bottle-quantity="{{ bottle_quantity }}"
						data-purchase-type="{{ varPurchaseType }}"
						data-buy-type="{{ buyType }}"
						name="track:variant-box|variant-sku:{{ var.sku }}|purchase-type:{{ varPurchaseType }}">
						{% if product.handle == 'curalin' %}
							{% assign subscription_save_percents = var.metafields.subscription.save_percents %}
						{% endif %}
						{% if subscription_save_percents > 0 %}
							<div class="discount mbl:text-[3.5vw] text-white bg-[--primary-color] font-bold w-full text-[13px] p-1">{{ subscription_save_percents | plus: firstMonthDiscount }}% OFF</div>
						{% endif %}

						<!-- prettier-ignore -->
						<div class="title p-1">
							<span class="font-bold mbl:text-[4vw]">{{ bottle_quantity }} Bottle{% if bottle_quantity > 1 %}s{% endif %}</span>
							<span class="block text-[15px] mbl:text-[3.4vw]">every {{ bottle_quantity }} month{% if bottle_quantity > 1 %}s{% endif %}</span>
						</div>

						<style>
							@media (max-width: 767px) {
								.title .block {
									font-size: 3.4vw;
								}
							}
						</style>
					</div>
				{% endif %}
			{% endfor %}
		</div>

		<div class="price-display">
			<div class="gap-y-2 flex flex-wrap items-end gap-2">
					<div class="final-price flex items-center gap-2">
							<div class="main-price text-[--primary] flex items-end">
									{% if priceFormat == 'total' %}
											<span class="price font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_total_price | money }}</span>
									{% else %}
											<span class="price font-bold leading-none text-[30px] mbl:text-[6vw]">{{ subscription_item_price | money }}</span>
											<span class="per-text mt-1 text-[20px]">/bottle</span>
									{% endif %}
							</div>

							<span class="cap self-end text-gray-500 line-through">{{ original_item_cap | money }}</span>

							{% if priceFormat == 'total' and subscription_total_price != subscription_item_price %}
									<span class="discount-badge px-4 py-1 text-[16px] font-bold text-white bg-[--bronze] rounded-full">SAVE {{ subscription_save_money | money }}</span>
							{% endif %}
					</div>
			</div>

			{% if priceFormat == 'per_bottle' and subscription_total_price != subscription_item_price %}
					<div class="total-line mt-1 text-[16px] h-4">
							Total {{ subscription_total_price | money }}
							<span class="total-price-cap text-gray-500 line-through">{{ original_item_cap_total | money }}</span>
					</div>
			{% endif %}

			<div class="future-price-notice mt-2 text-[14px] text-gray-600"></div>
	</div>

	{% if variantsNotice != blank %}
		<div class="notice flex text-[--primary] my-4 gap-2" style="font-size:15px">
			<span>ⓘ</span>
			<span>{{ variantsNotice }}</span>
		</div>
	{% endif %}

	{% if faqsAmount > 0 %}
		<div class="faq-questions flex flex-col my-4">
			{% for block in blocks %}
				{% if block.type == 'faq' %}
					<div class="faq-question overflow-hidden bg-white">
						<div class="faq-question-header flex items-center justify-between p-4 cursor-pointer">
							<div class="faq-question-title text-[16px] font-semibold pr-8">{{ block.settings.question }}</div>
						</div>
						<div class="faq-answer-wrapper">
							<div class="faq-answer p-4 pt-0 text-gray-600 text-[16px]">
								{{ block.settings.answer }}
							</div>
						</div>
					</div>
				{% endif %}
			{% endfor %}
		</div>

		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const faqQuestions = document.querySelectorAll('.faq-question');

				faqQuestions.forEach(question => {
					const header = question.querySelector('.faq-question-header');
					const answerWrapper = question.querySelector('.faq-answer-wrapper');
					const answer = question.querySelector('.faq-answer');

					// Initially set height to 0
					answerWrapper.style.height = '0px';

					header.addEventListener('click', () => {
						const isOpen = question.classList.contains('open');

						// Close all other questions first
						faqQuestions.forEach(q => {
							if (q !== question && q.classList.contains('open')) {
								q.classList.remove('open');
								q.querySelector('.faq-answer-wrapper').style.height = '0px';
							}
						});

						// Toggle current question
						question.classList.toggle('open');

						if (!isOpen) {
							answerWrapper.style.height = answer.offsetHeight + 'px';
						} else {
							answerWrapper.style.height = '0px';
						}
					});
				});
			});
		</script>

		<style>
			.faq-question {
				transition: all 0.3s ease;
				border-top-width: 1px;
				border-color: var(--primary-color-light);

				&:last-child {
					border-bottom-width: 1px;
				}
			}

			.faq-answer-wrapper {
				transition: height 0.3s ease-in-out;
			}

			.faq-question-header {
				position: relative;
				color: var(--primary-color);
			}

			.faq-question-header::after {
				content: '+';
				position: absolute;
				right: 1rem;
				font-size: 2rem;
				transition: transform 0.3s;
				line-height: 1;
			}

			.faq-question.open .faq-question-header::after {
				transform: rotate(45deg);
			}

			.faq-answer p {
				margin: 0;
			}

			@media (max-width: 767px) {
				.faq-question-title {
					font-size: 4vw;
				}

				.faq-answer {
					font-size: 4vw;
				}
			}
		</style>
	{% endif %}

	{% if giftsAmount > 0 %}
		<div class="gift-selector-wrap flex flex-col gap-3 mb-3">
			<div class="gift-selector-title text-[18px] font-medium">Pick your free gift</div>

			<div class="gift-options flex flex-col gap-2">
				{% for block in blocks %}
					{% case block.type %}
						{% when 'gift' %}
							{% assign show_gift = false %}
							{% if block.settings.show_on == 'both' %}
								{% assign show_gift = true %}
							{% elsif block.settings.show_on == 'global' and isGlobal %}
								{% assign show_gift = true %}
							{% elsif block.settings.show_on == 'us' and isGlobal == false %}
								{% assign show_gift = true %}
							{% endif %}

							{% if show_gift %}
								{% assign giftProd = block.settings.gift_product %}
								{% assign giftVariant = giftProd.selected_or_first_available_variant %}
								{% assign giftProdSubscription = block.settings.gift_product_subscription | default: giftProd %}
								{% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
								{% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

								<div class="gift-box clickable block" name="track:gift|variant-sku:{{ giftVariant.sku }}">
									<div
										class="gift-option-border p-2 rounded-lg"
										data-gift-id="{{ giftVariant.id }}"
										data-gift-id-subscription="{{ giftVariantSubscription.id | default: giftVariant.id }}">
										<div class="flex items-center self-end gap-2 ml-auto" style="width:93%">
											<div class="gift-image-container flex-shrink-0">
												<img
													src="{{ giftThumb | image_url: width: 160, height: 160 }}"
													alt="{{ giftProd.title }}"
													class="object-contain w-full h-full">
											</div>

											<div class="gift-content flex-grow">
												<div class="flex items-center gap-2 mb-1">
													<div class="gift-name text-[16px] font-bold">{{ giftProd.title | replace: 'Free ', '' }} - FREE</div>
													<span class="text-gray-600 line-through">${{ giftVariantSubscription.compare_at_price | money_without_currency }}</span>
												</div>
												<div class="text-gray-600" style="font-size: 14px">{{ block.settings.variant_description | default: giftProd.metafields.custom.short_description }}</div>
											</div>

											<div class="check-indicator w-8 h-8 rounded-full border-2 border-[--primary-color] flex items-center justify-center">
												<svg class="check-mark w-5 h-5 text-[--primary-color]" viewBox="0 0 20 20" fill="currentColor">
													<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
												</svg>
											</div>
										</div>
									</div>
								</div>
							{% endif %}
					{% endcase %}
				{% endfor %}
			</div>
		</div>
	{% endif %}

	<div class="submit-wrap flex flex-col w-full">
		<div class="checkout-button">
			{% assign buttonSID = SID | append: '-checkout' %}
			{% if buyType == 'buy_now' %}{% assign ctaButtonTitle = 'Get Started' %}{% else %}{% assign ctaButtonTitle = 'Add To Cart' %}{% endif %}

			{% render 'buy-buttons-new-4',
				SID: buttonSID,
				product: prod,
				variant: '',
				buttonText: ctaButtonTitle,
				selling_plan_id: selling_plan_id,
				product_form_id: product_form_id,
				buyType: buyType,
				isBuyWithPrime: isBuyWithPrime,
				buyboxType: buyboxType,
				buyboxName: buyboxName
			%}
		</div>

		<div class="one-time-purchase-link mt-3 text-center">
			{% if isOneTimePurchaseLink %}
				{% assign firstVariant = prod.selected_or_first_available_variant %}
				<div
					id="one-time-add-to-cart"
					class="one-time-add-to-cart variant-box mb-2 text-[--primary-color] underline cursor-pointer"
					name="track:link-submit|buybox-type:{{ buyboxType }}|buybox-name:{{ buyboxName }}|variant-sku:{{ firstVariant.sku }}|purchase-type:buyonce"
					data-variant-id="{{ firstVariant.id }}"
					data-bottle-quantity="1"
					data-sku="{{ firstVariant.sku }}"
					data-purchase-type="buyonce">
					Buy Once for {{ firstVariant.price | money }} + {{ shippingPrice | money | replace: '.00', '' }} Shipping
				</div>
			{% endif %}
		</div>
	</div>
</div>

<style>
	.buy-box {
		grid-template-columns: 45% 40% !important;
		grid-column-gap: 5% !important;
		justify-content: center;
	}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
	const productActions       = document.querySelector('#cta-section-{{ SID }} .product-actions');
	if (!productActions) return;

	const purchaseOptionBoxes  = productActions.querySelectorAll('.variant-box');
	const submitButton         = productActions.querySelector('.checkout-button button');
	const submitSellingPlanId  = productActions.querySelector('.submit-selling-plan-id');
	const submitVariantId      = productActions.querySelector('.submit-variant-id');
	const giftOptionContainers = productActions.querySelectorAll('.gift-box');
	const oneTimeButton        = productActions.querySelector('.one-time-add-to-cart');

	// Liquid Data
	const SID         = '{{ SID }}';
	const buyType     = '{{ buyType }}';
	const priceFormat = '{{ priceFormat }}';

	// Component State
	const state = { selectedBox: null, isInitialLoad: true };

	// ~~~~~~~~~~~~~~~~~~~~~
	//    Utility Methods
	// ~~~~~~~~~~~~~~~~~~~~~
	function showNotification(msg, type = 'error') {
		const note = document.createElement('div');
		note.className = `
			cart-notification ${type}
			fixed bottom-4 left-1/2 transform -translate-x-1/2
			p-4 rounded-lg shadow-lg z-[2147483640]
			transition-opacity duration-300
		`.replace(/\s+/g, ' ');

		if (type === 'error') {
			note.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
		} else {
			note.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
		}

		note.innerHTML = `
			<div class="flex items-center">
				<div class="mr-3">${type === 'error' ? '⚠️' : '✅'}</div>
				<div class="text-sm font-medium">${msg}</div>
				<button
					class="hover:text-gray-500 ml-auto text-gray-400"
					onclick="this.parentElement.parentElement.remove()"
				>
					✕
				</button>
			</div>
		`;
		document.body.appendChild(note);
		setTimeout(() => {
			note.classList.add('opacity-0');
			setTimeout(() => note.remove(), 300);
		}, 5000);
	}

	async function getCart() {
		const res = await fetch('/cart.js');
		if (!res.ok) throw new Error('Failed to fetch cart');
		return res.json();
	}

	async function removeCartItem(key) {
		await fetch('/cart/update.js', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ updates: { [key]: 0 } })
		});
	}

	async function clearCart() {
		await fetch('/cart/clear.js', { method: 'POST' });
	}

	// Add items, remove any existing subscription for same product if needed
	async function addValidItemsToCart(items) {
		try {
			let cart = await getCart();
			const subItem = items.find(i => i.selling_plan);
			if (subItem) {
				const selectedBox = document.querySelector('.variant-box.selected');
				const productId   = selectedBox?.dataset?.product;
				if (productId) {
					const existingSub = cart.items.find(ci => (
						ci.product_id === parseInt(productId, 10) &&
						Boolean(ci.selling_plan_allocation)
					));
					if (existingSub) {
						await removeCartItem(existingSub.key);
						cart = await getCart();
					}
				}
			}

			const addRes = await fetch('/cart/add.js', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ items })
			});
			if (!addRes.ok) throw new Error('Failed to add items');

			showNotification(
				subItem && items.includes(subItem)
					? 'Subscription updated in your cart'
					: 'Items added to cart',
				'success'
			);
			return { success: true, addedItems: items };
		} catch (err) {
			console.error('addValidItemsToCart:', err);
			showNotification('Error adding items. Please try again.');
			return { success: false, addedItems: [] };
		}
	}

	// ~~~~~~~~~~~~~~~~~~~~~
	//     Gift Logic
	// ~~~~~~~~~~~~~~~~~~~~~
	function updateGiftSelection(container) {
		giftOptionContainers.forEach(c => {
			const mark = c.querySelector('.check-mark');
			const sel  = c === container;
			c.classList.toggle('selected', sel);
			if (mark) {
				mark.style.display = 'block';
				mark.style.opacity = sel ? '1' : '0';
			}
		});
	}

	function initGiftSelection() {
		if (giftOptionContainers.length > 0) {
			updateGiftSelection(giftOptionContainers[0]);
		}
		giftOptionContainers.forEach(c => {
			c.addEventListener('click', () => updateGiftSelection(c));
		});
	}

	// ~~~~~~~~~~~~~~~~~~~~~
	//   Price Updates
	// ~~~~~~~~~~~~~~~~~~~~~
	function updatePriceDisplay(el) {
			const priceEls = document.querySelectorAll('.price-display');

			// Get base prices and convert from cents to dollars
			const subItem = parseFloat(el.dataset.subscriptionItemPrice) / 100 || 0;
			const subPrice = parseFloat(el.dataset.subscriptionPrice) / 100 || 0;
			const origPerItem = parseFloat(el.dataset.originalItemCap) / 100 || 0;
			const bottles = parseInt(el.dataset.bottleQuantity, 10) || 1;

			// Calculate original total price
			const totalOrig = origPerItem * bottles;

			// Get subscription and first month discounts
			const subscriptionDiscount = parseFloat(el.dataset.subscriptionDiscount) || 0;
			const firstMonthDiscount = parseFloat(el.dataset.firstMonthDiscount) || 0;

			// Combine discounts for first month
			const totalFirstMonthDiscount = subscriptionDiscount + firstMonthDiscount;
			const firstMonthDiscountMultiplier = (100 - totalFirstMonthDiscount) / 100;

			// Calculate first month prices
			const firstMonthSubItem = origPerItem * firstMonthDiscountMultiplier;
			const firstMonthSubPrice = totalOrig * firstMonthDiscountMultiplier;

			// Regular subscription price for future months uses only subscription discount
			const regularDiscountMultiplier = (100 - subscriptionDiscount) / 100;
			const regularPrice = (priceFormat === 'total' ? totalOrig : origPerItem) * regularDiscountMultiplier;

			// Calculate savings amount based on price format
			const saveAmt = priceFormat === 'total'
					? (totalOrig - firstMonthSubPrice)
					: ((origPerItem - firstMonthSubItem) * bottles);

			priceEls.forEach(display => {
					const mainPrice = display.querySelector('.final-price');
					const discount = display.querySelector('.discount-badge');
					const totalLine = display.querySelector('.total-line');
					const futurePrice = display.querySelector('.future-price-notice');

					// Format price displays
					const newMain = `$${(priceFormat === 'total' ? firstMonthSubPrice : firstMonthSubItem).toFixed(2)}`;
					const newCompare = `$${(priceFormat === 'total' ? totalOrig : origPerItem).toFixed(2)}`;
					const regularPriceFormatted = `$${regularPrice.toFixed(2)}`;
					const flooredSave = Math.floor(saveAmt);

					// Skip animation if it's the initial load
					if (state.isInitialLoad) {
							if (mainPrice) {
									const pSpan = mainPrice.querySelector('.price');
									const cSpan = mainPrice.querySelector('.cap');
									if (pSpan) pSpan.textContent = newMain;
									if (cSpan) cSpan.textContent = newCompare;
							}

							if (discount && priceFormat === 'total') {
									discount.textContent = flooredSave > 0 ? `SAVE $${flooredSave}` : '';
							}

							if (totalLine && priceFormat === 'per_bottle') {
									if (flooredSave > 0 && firstMonthSubPrice != firstMonthSubItem) {
											totalLine.innerHTML = `Total $${firstMonthSubPrice.toFixed(2)} <span class="total-price-cap text-gray-500 line-through">$${totalOrig.toFixed(2)}</span>`;
									} else {
											totalLine.textContent = '';
									}
							}

							// Update future price notice
							if (futurePrice && firstMonthDiscount > 0) {
									futurePrice.textContent = `Special price for first order. Recurring order at ${regularPriceFormatted}${priceFormat === 'per_bottle' ? '/bottle' : ''}. `;
							}

							state.isInitialLoad = false;
							return;
					}

					// Animate price updates for subsequent changes
					const animate = () => {
							[mainPrice, discount, totalLine, futurePrice].forEach(el => {
									if (el) {
											el.style.transition = 'opacity 200ms ease-out';
											el.style.opacity = '0';
									}
							});

							setTimeout(() => {
									if (mainPrice) {
											const pSpan = mainPrice.querySelector('.price');
											const cSpan = mainPrice.querySelector('.cap');
											if (pSpan) pSpan.textContent = newMain;
											if (cSpan) cSpan.textContent = newCompare;
									}

									if (discount && priceFormat === 'total') {
											discount.textContent = flooredSave > 0 ? `SAVE $${flooredSave}` : '';
									}

									if (totalLine && priceFormat === 'per_bottle') {
											if (flooredSave > 0 && firstMonthSubPrice != firstMonthSubItem) {
													totalLine.innerHTML = `Total $${firstMonthSubPrice.toFixed(2)} <span class="total-price-cap text-gray-500 line-through">$${totalOrig.toFixed(2)}</span>`;
											} else {
													totalLine.textContent = ' ';
											}
									}

									// Update future price notice
									if (futurePrice && firstMonthDiscount > 0) {
											futurePrice.textContent = `Special price for first order. Recurring order at ${regularPriceFormatted}${priceFormat === 'per_bottle' ? '/bottle' : ''}. `;
									} else if (futurePrice) {
											futurePrice.textContent = '';
									}

									// Fade elements back in with staggered timing
									setTimeout(() => mainPrice && (mainPrice.style.opacity = '1'), 50);
									setTimeout(() => discount && (discount.style.opacity = '1'), 100);
									setTimeout(() => totalLine && (totalLine.style.opacity = '1'), 150);
									setTimeout(() => futurePrice && (futurePrice.style.opacity = '1'), 200);
							}, 200);
					};

					requestAnimationFrame(animate);
			});
	}

	// ~~~~~~~~~~~~~~~~~~~~~
	//  Image Slider
	// ~~~~~~~~~~~~~~~~~~~~~
	function performSlideUpdate(slider, variantId) {
		try {
			if (!slider || !variantId) return;
			const idx = Array.from(slider.slides).findIndex(s => s.dataset.variantId === variantId);
			if (idx !== -1) {
				slider.update();
				requestAnimationFrame(() => {
					slider.slideTo(idx, 300);
					setTimeout(() => slider.update(), 350);
				});
			}
		} catch (err) {
			console.error('Slide update:', err);
		}
	}

	function updateVariantImage(el) {
		const variantId = el.dataset.variant;
		if (!variantId) return;
		const sliderId = `productSliderAllInOne${SID}`;
		let slider     = window[sliderId];
		if (!slider?.slides?.length) {
			return new Promise(resolve => {
				const check = setInterval(() => {
					slider = window[sliderId];
					if (slider?.slides?.length) {
						clearInterval(check);
						performSlideUpdate(slider, variantId);
						resolve();
					}
				}, 100);
				setTimeout(() => {
					clearInterval(check);
					resolve();
				}, 5000);
			});
		}
		performSlideUpdate(slider, variantId);
	}

	function updateBuyButton(el) {
		if (!submitButton) return;
		const sku         = el.dataset.sku;
		const purchase    = el.dataset.purchaseType;

		// Update button's tracking name attribute
		const currName    = submitButton.getAttribute('name') || '';
		const parts       = currName.split('|');
		const params      = {};
		parts.slice(1).forEach(p => {
			const [k, v] = p.split(':');
			if (k) params[k] = v;
		});
		params['variant-sku']   = sku;
		params['purchase-type'] = purchase;
		const newName = `track:add|${Object.entries(params)
			.map(([k, v]) => `${k}:${v}`).join('|')}`;

		// Update button attributes
		submitButton.setAttribute('name', newName);
		submitButton.setAttribute('data-sku', sku);
		submitButton.setAttribute('data-purchase-type', purchase);
	}

	function togglePurchaseBox(el) {
		if (!el) return;
		purchaseOptionBoxes.forEach(box => {
			box.classList.remove('selected');
			const r = box.querySelector('input[type="radio"]');
			if (r) r.checked = false;
		});
		const isSub     = el.dataset.purchaseType === 'subscribe';
		const planId    = isSub ? el.dataset.subscriptionSellingPlanId : '';
		const variantId = el.dataset.variant;

		if (submitSellingPlanId) submitSellingPlanId.value = planId;
		if (submitVariantId)     submitVariantId.value     = variantId;

		el.classList.add('selected');
		const radio = el.querySelector('input[type="radio"]');
		if (radio) radio.checked = true;

		updateBuyButton(el);
		state.selectedBox = el;
		updatePriceDisplay(el);

		{% if isSlideVariant %}
			if (window.hasInitialImageUpdateHappened) {
				updateVariantImage(el);
			} else {
				window.hasInitialImageUpdateHappened = true;
			}
		{% endif %}
	}

	function initPurchaseOptions() {
		const defIdx   = parseInt(productActions.dataset.defaultVariantIndex, 10) || 0;
		const defBox   = purchaseOptionBoxes[defIdx - 1] || purchaseOptionBoxes[0];
		if (defBox) {
			togglePurchaseBox(defBox);
			updateBuyButton(defBox);
		}
		productActions.addEventListener('click', e => {
			const radio = e.target.closest('input[type="radio"]');
			const box   = e.target.closest('.variant-boxes .variant-box');
			if (radio) {
				e.preventDefault();
				const pb = radio.closest('.variant-box');
				if (pb) togglePurchaseBox(pb);
			} else if (box) {
				e.preventDefault();
				togglePurchaseBox(box);
			}
		});
	}

	// ~~~~~~~~~~~~~~~~~~~~~
	//   Cart/Checkout
	// ~~~~~~~~~~~~~~~~~~~~~
	async function handleBuyNowFlow(items) {
			try {
					// Remove cart popup if it exists
					const cartPopup = document.getElementById('upCart');
					if (cartPopup) cartPopup.remove();

					// Clear the cart
					try {
							await clearCart();
					} catch (clearErr) {
							console.error('Error clearing cart:', clearErr);
							throw new Error('Failed to clear cart');
					}

					// Add items to cart
					const addRes = await fetch('/cart/add.js', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ items })
					});

					if (!addRes.ok) {
							const errorData = await addRes.json();
							console.error('Cart add response:', errorData);
							throw new Error(errorData.description || 'Failed to add items to cart');
					}

					// If we get here, redirect to checkout
					window.location.href = '/checkout';
			} catch (err) {
					console.error('handleBuyNowFlow error:', err);
					throw err; // Re-throw to be handled by the caller
			}
	}

	function initSubmitButton() {
			if (!submitButton) return;
			submitButton.addEventListener('click', async e => {
					e.preventDefault();
					const box = productActions.querySelector('.variant-box.selected');
					const giftsAmount = parseInt(productActions.dataset.giftsAmount || '0', 10);

					if (!box) {
							showNotification('Please select a purchase option');
							return;
					}

					// Debug variant data
					console.log('Selected box data:', {
							variant: box.dataset.variant,
							originalVariant: box.dataset.originalVariant,
							product: box.dataset.product,
							purchaseType: box.dataset.purchaseType,
							sellingPlanId: box.dataset.subscriptionSellingPlanId
					});

					submitButton.disabled = true;
					const btnHTML = submitButton.innerHTML;
					submitButton.innerHTML = `<div class="button-spinner"></div>`;

					try {
							const isSub = box.dataset.purchaseType === 'subscribe';
							// Try originalVariant if variant is not available
							const variant = box.dataset.originalVariant || box.dataset.variant;

							if (!variant) {
									throw new Error('No valid variant ID found');
							}

							let items = [{
									id: parseInt(variant, 10), // Ensure variant ID is a number
									quantity: 1,
									selling_plan: isSub ? box.dataset.subscriptionSellingPlanId : undefined
							}];

							console.log('Items to add:', items); // Debug log

							if (giftsAmount > 0) {
									const giftEl = document.querySelector('.gift-box.selected');
									if (!giftEl?.querySelector('.gift-option-border')) {
											throw new Error('Please select a gift option');
									}
									const giftB = giftEl.querySelector('.gift-option-border');
									const giftID = isSub ? giftB?.dataset.giftIdSubscription : giftB?.dataset.giftId;
									if (!giftID) throw new Error('Invalid gift selection');

									items.push({ id: parseInt(giftID, 10), quantity: 1 });
							}

							if (buyType === 'buy_now') {
									await handleBuyNowFlow(items);
							} else {
									await addValidItemsToCart(items);
							}
					} catch (err) {
							console.error('Submit error:', err);
							showNotification(err.message || 'Error adding items to cart. Please try again.');
					} finally {
							submitButton.innerHTML = btnHTML;
							submitButton.disabled = false;
					}
			});
	}

	function initOneTimeButton() {
		if (!oneTimeButton) return;
		oneTimeButton.addEventListener('click', async e => {
			e.preventDefault();
			oneTimeButton.disabled    = true;
			const origText            = oneTimeButton.textContent;
			oneTimeButton.textContent = 'Adding...';

			try {
				const giftEl   = document.querySelector('.gift-box.selected');
				const giftB    = giftEl?.querySelector('.gift-option-border');
				const giftID   = giftB?.dataset.giftId;
				const variant1 = oneTimeButton.dataset.variantId;

				if (buyType === 'buy_now') {
					const cartPopup = document.getElementById('upCart');
					if (cartPopup) cartPopup.remove();
					await clearCart();
					const toAdd = [{ id: variant1, quantity: 1 }];
					{% if isOneTimeGift %}
						if (giftID) toAdd.push({ id: parseInt(giftID, 10), quantity: 1 });
					{% endif %}
					const res = await fetch('/cart/add.js', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ items: toAdd })
					});
					if (!res.ok) throw new Error('Failed to add items');
					window.location.href = '/checkout';
				} else {
					const toAdd = [{ id: variant1, quantity: 1 }];
					{% if isOneTimeGift %}
						if (giftID) toAdd.push({ id: parseInt(giftID, 10), quantity: 1 });
					{% endif %}
					const res = await fetch('/cart/add.js', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ items: toAdd })
					});
					if (!res.ok) throw new Error('Failed to add items');
					if (typeof window.updateCart === 'function') window.updateCart();
					oneTimeButton.textContent = 'Added!';
					setTimeout(() => {
						oneTimeButton.textContent = origText;
						oneTimeButton.disabled    = false;
					}, 2000);
				}
			} catch (err) {
				console.error('Error:', err);
				oneTimeButton.textContent = 'Error';
				setTimeout(() => {
					oneTimeButton.textContent = origText;
					oneTimeButton.disabled    = false;
				}, 2000);
			}
		});
	}

	function hideMonthTextIfNeeded() {
		document.querySelectorAll('.price-display').forEach(d => {
			const monthText = d.querySelector('.per-text');
			if (monthText && priceFormat === 'total') {
				monthText.style.display = 'none';
			}
		});
	}

	// ~~~~~~~~~~~~~~~~~~~~~
	//      Initialize
	// ~~~~~~~~~~~~~~~~~~~~~
	function init() {
		initGiftSelection();
		initPurchaseOptions();
		initSubmitButton();
		initOneTimeButton();
		hideMonthTextIfNeeded();
	}
	init();
});
</script>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		const ctasection = document.querySelector('#cta-section-{{ SID }}');
		if (!ctasection) return;

		const productActions = ctasection.querySelector('.product-actions');
		const giftSelectorWrap = productActions ? productActions.querySelector('.gift-selector-wrap') : null;
		const ctaText = ctasection.querySelector('.cta-text');
		const purchaseOptions = productActions ? productActions.querySelector('.purchase-options') : null;

		if (!productActions) return;

		if (window.innerWidth < 768 && ctaText) {
			productActions.insertAdjacentElement('afterbegin', ctaText);
		}
	});
</script>

<style>
	#cta-section-{{ SID }} {
			/* Core variables */
			--text-color: #4a5568;
			--border-color: #cbcbcb;
			--radio-size: 1em;
			--radio-size-mobile: 1em;
			--transition-speed: 0.2s;

			/* Variant Tab Styles */
			.variant-box.variant-tab-style {
					border-width: 2px;
					border-color: var(--primary-color);
					border-radius: 5px;
					cursor: pointer;
					align-content: center;
					transition: all 0.3s ease;

					&.selected {
							background-color: var(--primary-color);
							color: white;

							.discount {
									background-color: var(--orange);
									color: var(--primary-color);
									transition: all 0.3s ease;
							}
					}
			}

			/* Gift Selector Component */
			.gift-selector-wrap {
					.gift-box {
							.gift-option-border {
									position: relative;
									cursor: pointer;
									background-color: white;
									border: 1px solid var(--primary-color-light);
									transition: all 0.3s ease;

									&:hover {
											background-color: var(--primary-color-lighter);
									}

									/* Gift Option Layout */
									& > div.flex.items-center.gap-4 {
											padding-left: 3rem;
									}

									.gift-image-container {
											width: 80px;
											height: 80px;
											flex-shrink: 0;
									}

									/* Check Indicator */
									.check-indicator {
											position: absolute;
											left: 3%;
											top: 50%;
											transform: translateY(-50%);
											width: 20px;
											height: 20px;
											min-width: 20px;
											min-height: 20px;
											border: 1px solid var(--primary-color);
											border-radius: 9999px;
											display: flex;
											align-items: center;
											justify-content: center;
											background-color: transparent;

											svg.check-mark {
													width: 12px;
													height: 12px;
													min-width: 12px;
													min-height: 12px;
													color: white;
													stroke: var(--primary-color);
													stroke-width: 2;
													fill: none;
													opacity: 0;
													transition: opacity 0.3s ease;
											}
									}

									.gift-content {
											flex-grow: 1;
									}
							}

							/* Selected State */
							&.selected {
									.gift-option-border {
											background-color: var(--primary-color-lighter) !important;

											.check-indicator {
													background-color: var(--primary-color);

													svg.check-mark {
															opacity: 1;
															stroke: white;
													}
											}
									}
							}

							&:hover {
									.gift-option-border {
											background-color: var(--primary-color-lightest);
									}
							}
					}
			}

			/* Product Actions */
			.product-actions {
					grid-area: {% if isHideInfo %}1{% else %}2{% endif %}/2/3/3;
			}

			/* One Time Purchase Link */
			.one-time-purchase-link {
					a {
							transition: color 0.3s ease;
					}
			}

			/* Radio Input Styles */
			.radio-input {
					display: flex;
					align-items: center;
					justify-content: center;
					position: relative;

					input[type='radio'] {
							&:hover,
							.variant-box:hover & {
									transform: scale(1.1);
									cursor: pointer;
									transition: 0.1s all;
							}
					}
			}

			/* Price Display Component */
			.price-display {
					.price-content-transition,
					.description-transition {
							transition: opacity 400ms ease-in-out;
					}

					.flex.items-end,
					.mt-2 {
							will-change: opacity;
					}

					/* Price Elements */
					.main-price,
					.discount-badge,
					.total-line {
							transition: opacity 200ms ease-in-out;
							will-change: opacity;
							opacity: 1;
					}
			}

			/* Animation States */
			.fade-out {
					opacity: 0 !important;
			}

			.fade-in {
					opacity: 1 !important;
			}

			/* Responsive Styles */
			@media (max-width: 1269px) {
					.variant-box {
							width: 100%;
					}
			}

			@media (max-width: 767px) {
					.product-actions {
							grid-area: unset;
							grid-row: 3;
							max-width: unset;
							min-height: unset;
					}

					.gift-content {
							font-size: 4vw;
					}

					.variant-box {
							font-size: 4vw;

							&::before {
									font-size: 3vw;
									width: 23vw;
									height: 5vw;
									top: -5vw;
									padding: 0.75vw;
									border-radius: 2vw 2vw 0 0;
							}

							&.selected {
									max-height: none;
							}

							.top-wrapper {
									min-height: 9vw;
							}

							.left-wrapper {
									gap: 2vw;
							}

							.option-title {
									font-size: 3.9vw;
							}

							.price-wrapper {
									min-width: 17.7vw;

									.real-price {
											font-size: 4.5vw;
									}
							}

							.terms {
									margin-left: 5vw;

									.subtitle,
									.terms-title {
											font-size: 3.5vw;
									}
							}

							.radio-box {
									label {
											width: 3vw;
											height: 3vw;

											&:after {
													font-size: 2vw;
													width: 3vw !important;
													height: 3vw !important;
													top: -0.25vw !important;
													left: -0.25vw !important;
													display: flex;
													justify-content: center;
													align-items: center;
											}
									}
							}
					}

					.one-time-purchase-link {
							.one-time-add-to-cart {
									font-size: 4vw;
							}
					}
			}
	}

	.future-price-notice {
			transition: opacity 200ms ease-out;
			line-height: 1.4;
	}

	@media (max-width: 767px) {
			.future-price-notice {
					font-size: 12px;
			}
	}

	.button-spinner {
		display: inline-block;
		width: 1.5rem;
		height: 1.5rem;
		border: 2px solid rgba(0, 0, 0, 0.1);
		border-radius: 9999px;
		border-top-color: #000;
		animation: button-spinner 0.6s linear infinite;
		margin-right: 0.5rem; /* Some spacing before/after text, if desired */
	}

	@keyframes button-spinner {
		0%   { transform: rotate(0deg);   }
		100% { transform: rotate(360deg); }
	}
</style>
