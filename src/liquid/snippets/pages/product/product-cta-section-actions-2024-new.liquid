{% comment %} Short Section ID for JS Variables {% endcomment %}
{% assign sectionIDParts = section_id | split: '-' %}
{% assign shortSectionID = sectionIDParts[-1] %}

{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ section_id }}" class="product-actions">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex justify-center gap-2" aria-label="Subscribe & Save">Subscribe & Save{% render 'tooltip', section_id: section_id, linkTitle: '<i class="fa-duotone fa-circle-info text-[18px]"></i>', title: 'Subscription Details', description: 'Save on every order, guaranteed delivery, make changes any time, prompt VIP support & new subscriber gifts', features: tooltipFeatures %}</button>
      <button class="buy-once" aria-label="Buy Once">Buy Once</button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new', prod: product, var: var, index: forloop.index %}
    {% endfor %}

    {% if customer.email == 'yotam@curalife.com' and false %}
      {% for additionalVariant in product.metafields.custom.additional_variants.value %}
        {% assign variantsAmount = variantsAmount | plus: 1 %}
        {% render 'product-cta-section-actions-variant-2024-new', prod: additionalVariant.product, var: additionalVariant, index: variantsAmount %}
      {% endfor %}

      {% for block in blocks %}
        {% case block.type %}
          {% when 'variant' %}
            {% assign pathsToReveal = block.settings.reveal_on_paths | split: "," %}
            {% if pathsToReveal contains request.path or pathsToReveal == blank %}
              {% assign referenced_variant_product = block.settings.prod %}
              {% assign referenced_variant = blank %}
              {% assign blockVarID = block.settings.variant_id | plus: 0 %}
              {% for vari in referenced_variant_product.variants %}
                {% assign currVarID = vari.id | plus: 0 %}
                {% if currVarID == blockVarID %}
                  {% assign referenced_variant = vari %}
                {% endif %}
              {% endfor %}

              {% if referenced_variant != blank %}
                {% render 'product-cta-section-actions-variant-2024', prod: referenced_variant_product, var: referenced_variant %}
              {% endif %}
            {% endif %}
        {% endcase %}
      {% endfor %}
    {% endif %}

    <div class="submit-wrap flex flex-col w-full">
      {% comment %} <div class="add-to-cart-button buy-once hidden">{% render 'buy-buttons', product: product, variant: '', product_form_id: product_form_id, buyType: buyType, section_id: section.id %}</div> {% endcomment %}
      <div class="checkout-button subscription">{% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id , product_form_id: product_form_id, buyType: buyType, section_id: section.id %}</div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function() {
    const $productActions = $("#product-actions-{{ section_id }}");
    const $purchaseOptionBoxes = $productActions.find('.purchase-option-box');

    attachEventHandlers();
    initializePurchaseOptions();
    setupMutationObserver();

    function initializePurchaseOptions() {
      $purchaseOptionBoxes.each(function(index) {
        const box = $(this);
        box.find('input[type="radio"]').prop('checked', true);
        let isSubscriptionSelected = $('.purchase-type .subscription').hasClass('selected');
        togglePurchaseType(box, isSubscriptionSelected);
      });

      let urlParams = new URLSearchParams(window.location.search);
      let defaultVariant = urlParams.get('default-variant');

      if (defaultVariant) {
        $purchaseOptionBoxes.eq(defaultVariant - 1).trigger("click");
      } else {
        let initialBox = $purchaseOptionBoxes.{% if variantsAmount == 1 %}first(){% elsif defaultSelectionIndex %}eq({{ defaultSelectionIndex | minus: 1 }}){% else %}first(){% endif %};
        initialBox.addClass('selected');
        initialBox.find('input[type="radio"]').prop('checked', true);
        let isSubscriptionSelected = true;
        togglePurchaseType(initialBox, isSubscriptionSelected);
      }
    }

    function setupMutationObserver() {
      const observer = new MutationObserver(mutations => {
        mutations.forEach(({ target }) => {
          const targetBox = $(target).closest('.purchase-option-box');
          if (targetBox.hasClass('selected')) adjustMaxHeight(targetBox);
        });
      });

      $purchaseOptionBoxes.each((_, element) => observer.observe(element, { attributes: true, childList: true, subtree: true }));
    }

    function attachEventHandlers() {
      $productActions.on('click', '.purchase-option-box', event => togglePurchaseBox($(event.currentTarget)))
                      .on('click', '.purchase-type button', event => handlePurchaseTypeClick(event, $(event.currentTarget)))
                      .on('click', '.checkout-button.subscription', event => handleMainButtonClick(event, $(event.currentTarget)))
                      .on('click', '.add-to-cart-button.buy-once', event => handleMainButtonClick(event, $(event.currentTarget)));
    }

    function handlePurchaseTypeClick(event, button) {
      event.stopPropagation();
      const isSubscriptionSelected = button.hasClass('subscription');

      $('.purchase-type button').removeClass('selected');
      button.addClass('selected');

      togglePurchaseTypeAllVariants(isSubscriptionSelected);
    }

    function togglePurchaseTypeAllVariants(isSubscriptionSelected) {
      $purchaseOptionBoxes.each(function() {
        const parentBox = $(this);
        togglePurchaseType(parentBox, isSubscriptionSelected);
      });
    }

    function togglePurchaseType(parentBox, isSubscriptionSelected) {
      parentBox.find('.purchase-type button').removeClass('selected');
      parentBox.find(isSubscriptionSelected ? '.subscription' : '.buy-once').addClass('selected');

      if (isSubscriptionSelected) {
        {% unless product.metafields.custom.is_price_per_month %}parentBox.find('.per-month').show();{% endunless %}
        let sellingPlanId = parentBox.data('subscription-selling-plan-id');
        $('.submit-selling-plan-id').val(sellingPlanId);
      } else {
        {% unless product.metafields.custom.is_price_per_month %}parentBox.find('.per-month').hide();{% endunless %}
        $('.submit-selling-plan-id').val('');
      }

      updateYotpoPointsWidget(parentBox, isSubscriptionSelected);
      togglePriceDisplay(parentBox, isSubscriptionSelected);
      updateComparedAtPriceDisplay(parentBox);
    }

    function handleMainButtonClick(event, button) {
      event.stopPropagation();
      button.closest('form').submit();
    }

    function adjustMaxHeight(element) {
      var openHeight = $(element).get(0).scrollHeight;
      $(element).css('max-height', openHeight + 'px');
    }

    function updateComparedAtPriceDisplay(parentBox) {
      let isSubscriptionSelected = $('.purchase-type .subscription').hasClass('selected');

      let itemPrice = parseFloat(parentBox.data('item-price'));
      let subscriptionItemPrice = parseFloat(parentBox.data('subscription-item-price'));
      let originalItemCap = parseFloat(parentBox.data('original-item-cap'));

      let currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;

      let comparedAtPriceElement = parentBox.find('.compared-at-price');
      if (originalItemCap > currentPrice) {
        comparedAtPriceElement.fadeIn();
      } else {
        comparedAtPriceElement.fadeOut();
      }
    }

    function togglePurchaseBox(element) {
      var wasSelected = $(element).hasClass('selected');

      if (wasSelected) {
          return;
      }

      $('.purchase-option-box.selected').removeClass('selected').each(function() {
        $(this).css('max-height', '68px');
        $(this).find('.toggle-icon').hide();
      });

      $('.submit-selling-plan-id').val(element.data('subscription-selling-plan-id'));
      $('.submit-variant-id').val(element.data('variant'));

      $(element).addClass('selected');
      adjustMaxHeight(element);
      $(element).find("input[type='radio']").prop('checked', true);
      $(element).find('.toggle-icon').show(); // Show the 'v' icon in the expanded box

      let isSubscriptionSelected = $('.purchase-type .subscription').hasClass('selected');
      updateYotpoPointsWidget(element, isSubscriptionSelected);

      {% if variantsAmount > 1 %}
        {% if isSlideOnLoad %}
          updateVariantImage(element);
        {% else %}
          if (window.hasInitialImageUpdateHappened) {
            updateVariantImage(element);
          }

          window.hasInitialImageUpdateHappened = true
        {% endif %}
      {% endif %}
    }

    function togglePriceDisplay(parentBox, isSubscriptionSelected) {
      const subscriptionContent = parentBox.find('.subscription-content');
      const buyOnceContent = parentBox.find('.buy-once-content');
      const contentToShow = isSubscriptionSelected ? subscriptionContent : buyOnceContent;
      const contentToHide = isSubscriptionSelected ? buyOnceContent : subscriptionContent;

      subscriptionContent.stop();
      buyOnceContent.stop();

      contentToHide.fadeOut('fast', function() {
        contentToShow.fadeIn('fast');
      });
    }

    function updateYotpoPointsWidget(parentBox, isSubscriptionSelected) {
      var newPoints = isSubscriptionSelected
        ? Math.floor(Number(parentBox.data('subscription-item-price')) / 100)
        : Math.floor(Number(parentBox.data('item-price')) / 100);

      $('#product-actions-{{ section_id }} .reward-points-widget .current-price').html(newPoints);
    }

    function updateSelection(element) {
      let container = $("#product-actions-{{ section_id }}");
      container.find(".purchase-option-box").removeClass("selected");
      container.find(".purchase-option-box input[type='radio']").prop('checked', false);
      $(element).addClass("selected").find('input').prop('checked', true);
    }

    function updateVariantImage(element) {
      let slideIndex = window.productSliderAllInOne{{ shortSectionID }}.slides.length - ({{ variantsAmount | plus: 1 }} - $(element).attr('data-index'));
      window.productSliderAllInOne{{ shortSectionID }}.slideTo(slideIndex);
    }

    function buyButtonHandler(variant_id, subscription_selling_plan_id, buttonElement) {
      toggleButtonLoading(buttonElement, true);
      if (isSubscriptionSelected() || true) {
        buySubscription(variant_id, 1, subscription_selling_plan_id);
      } else {
        let dc = $(buttonElement).closest('.purchase-option-box').data('dc');
        let giftProductID = buttonElement.parent().siblings('.gifts').attr('data-bundle-product-id');

        redirectToCheckout(variant_id, dc);
      }
    }

    function isSubscriptionSelected() {
      return $('#product-actions-{{ section_id }} .purchase-type .subscription.selected').length > 0;
    }

    function redirectToCheckout(variant_id, dc) {
      let checkoutLink = `https://${location.hostname}/cart/${variant_id}:1`
      if (dc) {checkoutLink += "?discount=" + atob(dc);}
      window.location.href = checkoutLink;
    }

    function toggleButtonLoading(buttonElement, isLoading) {
      let loader = $(buttonElement).closest('.purchase-option-box').find('.loader');
      let buttonText = $(buttonElement).find('.button-text');

      if (loader.length === 0) {
        console.error("Loader element not found");
        return;
      }

      if (isLoading) {
        loader.show();
        buttonText.hide();
      } else {
        loader.hide();
        buttonText.show();
      }
    }

    function clearCart(callback) {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/clear.js',
        success: function() {
          console.log('Cart cleared');
          callback();
        },
        error: function() {
          console.log('Failed to clear cart');
        }
      });
    }

    function buySubscription(variant_id, qty, selling_plan) {
      clearCart(function() {
        data = {
          "id": variant_id,
          "quantity": qty,
          "selling_plan": selling_plan
        }

        jQuery.ajax({
          type: 'POST',
          url: '/cart/add.js',
          data: data,
          dataType: 'json',
          success: function() {
            console.log('success');
            window.location.href = '/checkout';
          },
          error: function() {
            console.log('Failed to add item to cart');
          }
        });
      });
    }
  });
</script>

<style>
  .purchase-type button {
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.5rem;

    &:not(.selected) {
      background: var(--light-blue);
      border: 1px solid var(--blue);
      color: var(--blue);
    }
  }
</style>

<style>
  .cta-section-{{ section_id }} .purchase-option-box .radio-box input[type='radio'] {
      display: none;
  }

  .cta-section-{{ section_id }} .purchase-option-box .radio-box label {
      cursor: pointer;
      width: 19px;
      height: 19px;
      border: 1px solid var(--blue);
      border-radius: 50%;
      position: relative;
  }

  /* This will only apply the style when the variant box is selected and the radio button is checked */
  .cta-section-{{ section_id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
      content: '\2713';
      position: absolute;
      top: -2px;
      left: -2px;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--blue);
      text-align: center;
      line-height: 22px;
      color: #fff;
  }
</style>

<style>
  .cta-section-{{ section_id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;

    @media (width < 768px) {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }
  }

  .cta-section-{{ section_id }} .purchase-option-box {
    background: #fff;
    border: 1px solid #cbcbcb;
    cursor: pointer;
    max-height: 68px;
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out;
    border-radius: 10px;
    border-color: var(--blue);
    overflow: hidden;
    padding: 0.75rem 1rem;

    &:hover {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    }

    &.selected {
      filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      border-width: 3px;
      max-height: max-content;
    }

    @media (width < 1270px) {
      width: 100%;
    }

    @media (width < 768px) {
      font-size: 4vw;
    }

    .radio-box {
      align-items: center;
      display: flex;

      @media (width < 768px) {
        padding: 3vw 0;
      }
    }
  }
</style>

<style>
  .cta-section-{{ section_id }} .lds-ellipsis {
    display: inline-block;
    position: relative;
    width: 80px;
    top: -10px;

    div {
      position: absolute;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #fff;
      animation-timing-function: cubic-bezier(0, 1, 1, 0);

      &:nth-child(1) {
        left: 8px;
        animation: lds-ellipsis1 0.6s infinite;
      }

      &:nth-child(2) {
        left: 8px;
        animation: lds-ellipsis2 0.6s infinite;
      }

      &:nth-child(3) {
        left: 32px;
        animation: lds-ellipsis2 0.6s infinite;
      }

      &:nth-child(4) {
        left: 56px;
        animation: lds-ellipsis3 0.6s infinite;
      }
    }
  }

  @keyframes lds-ellipsis1 {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }

  @keyframes lds-ellipsis3 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0);
    }
  }

  @keyframes lds-ellipsis2 {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(24px, 0);
    }
  }
</style>