{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}
	{% endcase %}
{% endfor %}

<div class="product-actions" data-default-variant-index="{{ defaultSelectionIndex }}">
	<div class="purchase-options flex flex-col gap-2">
		{% comment %}Duration Selection Tabs{% endcomment %}
		<div class="variant-boxes flex justify-around gap-2 mb-8">
			{% for block in blocks %}
				{% if block.type == 'variant' and block.settings.purchase_type == 'subscribe' %}
					{% assign referenced_variant = blank %}
					{% assign blockVarID = block.settings.variant_id | plus: 0 %}
					{% for vari in referenced_variant_product.variants %}
						{% assign currVarID = vari.id | plus: 0 %}
						{% if currVarID == blockVarID %}
							{% assign referenced_variant = vari %}
						{% endif %}
					{% endfor %}

					{% assign var = referenced_variant %}

					{% comment %} Core Variable Assignments {% endcomment %}
					{% assign variant_id = var.metafields.custom.reference_variant_id | default: var.id %}
					{% assign bottle_quantity = var.metafields.my_fields.pack_bottles_quantity %}

					{% comment %} Price Calculations {% endcomment %}
					{% assign original_item_price = var.metafields.custom.original_item.value.price %}
					{% assign original_item_cap = var.metafields.custom.original_item.value.compare_at_price | default: original_item_price %}
					{% assign original_item_cap_total = original_item_cap | times: bottle_quantity %}
					{% assign item_price = var.price | divided_by: bottle_quantity %}

					{% comment %} Subscription-specific Calculations {% endcomment %}
					{% assign subscription_save_percents = var.metafields.subscription.save_percents %}
					{% assign subscription_item_price_save = original_item_cap | times: subscription_save_percents | divided_by: 100 %}
					{% assign subscription_item_price = original_item_cap | minus: subscription_item_price_save %}
					{% assign subscription_total_price = subscription_item_price | times: bottle_quantity %}

					{% comment %} Savings Calculations {% endcomment %}
					{% assign subscription_save_money = original_item_cap | minus: subscription_item_price %}
					{% assign buy_once_save_money = original_item_cap | minus: item_price %}

					{% comment %} Selling Plan ID Logic {% endcomment %}
					{% if var.metafields.custom.referenced_variant_product_handle %}
						{% assign prod = all_products[var.metafields.custom.referenced_variant_product_handle] %}
						{% assign referenced_variant = prod.variants | where: 'id', variant_id | first %}
						{% assign selling_plan_id = referenced_variant.metafields.subscription.selling_plan_id | default: variant.metafields.subscription.selling_plan_id %}
					{% elsif var.metafields.subscription.selling_plan_id %}
						{% assign selling_plan_id = var.metafields.subscription.selling_plan_id %}
					{% elsif var.selling_plan_allocations.size > 0 %}
						{% for allocation in var.selling_plan_allocations %}
							{% if allocation.selling_plan.name contains bottle_quantity %}
								{% assign selling_plan_id = allocation.selling_plan.id %}
							{% endif %}
						{% endfor %}
					{% else %}
						<script>
							console.log("Didn't find selling plan for the variant");
						</script>
					{% endif %}

					<div
						id="variant-box-{{ SID }}-{{ forloop.index }}"
						class="variant-box text-center font-bold w-full {% if forloop.index == 1 %}selected{% endif %} {{ block.settings.purchase_type }}"
						data-variant="{{ block.settings.variant_id }}"
						data-product="{{ prod.id }}"
						data-original-variant="{{ var.id }}"
						data-subscription-selling-plan-id="{{ selling_plan_id }}"
						data-price="{{ var.price | money_without_currency | replace: ".00", "" }}"
						data-sku="{{ var.sku }}"
						data-index="{{ forloop.index }}"
						data-item-price="{{ item_price }}"
						data-subscription-item-price="{{ subscription_item_price }}"
						data-original-item-cap="{{ original_item_cap }}"
						data-dc="{{ var.metafields.custom.discount_code | base64_encode }}"
						data-buy-once-discount="{{ var.metafields.custom.save_percents }}"
						data-subscription-discount="{{ var.metafields.subscription.save_percents }}"
						data-price-per="{{ pricePer }}"
						data-bottle-quantity="{{ bottle_quantity }}"
						data-purchase-type="{{ block.settings.purchase_type }}"
						data-buy-type="{{ buyType }}"
						name="variant-box-{{ var.sku }}-{{ purchase_type }}">
						{{ block.settings.title | default: var.title }}
					</div>
				{% endif %}
			{% endfor %}
		</div>

		<div class="price-display mb-8">
			<div class="flex items-baseline gap-4">
				<span class="font-bold text-teal-700">${{ subscription_item_price | divided_by: 100.00 }}</span>
				<span class="">/mo</span>
				<span class="text-gray-500 line-through">${{ original_item_cap | divided_by: 100.00 }}</span>
				<span class="px-4 py-1 text-white bg-[--bronze] rounded-md">{{ subscription_save_percents }}% OFF</span>
			</div>
			<p class="mt-2 text-lg text-gray-700">Total of ${{ subscription_total_price | divided_by: 100.00 }} payable every {{ bottle_quantity }} months for {{ bottle_quantity }} bottles.</p>
		</div>

		{% if giftsAmount > 0 %}
			<div class="gift-selector-wrap">
				<div class="gift-selector-title mb-2">Your free gift:</div>

				<div class="gift-options flex-nowrap flex justify-start gap-4">
					{% for block in blocks %}
						{% case block.type %}
							{% when 'gift' %}
								{% assign show_gift = false %}
								{% if block.settings.show_on == 'both' %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'global' and isGlobal %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'us' and isGlobal == false %}
									{% assign show_gift = true %}
								{% endif %}

								{% if show_gift %}
									{% assign giftProd = block.settings.gift_product %}
									{% assign giftVariant = giftProd.selected_or_first_available_variant %}
									{% assign giftProdSubscription = block.settings.gift_product_subscription | default: giftProd %}
									{% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
									{% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

									<div class="gift-option-container flex flex-col items-center">
										<div
											class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer"
											data-gift-id="{{ giftVariant.id }}"
											data-gift-id-subscription="{{ giftVariantSubscription.id | default: giftVariant.id }}">
											<div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 rounded-full">
												<div class="check-mark hidden w-4 h-4 font-bold text-white rounded-full">✓</div>
											</div>
											<div class="gift-image-container flex justify-center">
												<img
													src="{{ giftThumb | image_url }}"
													alt="{{ giftProd.title }}"
													class="object-contain w-24 h-24">
											</div>
										</div>

										<div class="gift-content text-center">
											<div class="gift-name mb-1 font-medium">{{ giftProd.title | replace: 'Free ', '' }}</div>
											<div class="gift-price flex items-center justify-center gap-2">
												<span class="original-price text-gray-500 line-through">
													{{- giftVariantSubscription.compare_at_price | money_with_currency -}}
												</span>
												<span class="sale-price font-bold">FREE</span>
											</div>
										</div>
									</div>
								{% endif %}
						{% endcase %}
					{% endfor %}
				</div>
			</div>
		{% endif %}

		<div class="subscription-benefits mb-8">
			<h2 class="mb-4 text-2xl font-semibold text-teal-700">Subscription benefits:</h2>
			<ul class="space-y-4">
				<li class="flex items-center gap-2">
					<svg class="w-6 h-6 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
					<span class="text-lg text-gray-700">Pause, update, or cancel anytime</span>
				</li>
				<li class="flex items-center gap-2">
					<svg class="w-6 h-6 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
					<span class="text-lg text-gray-700">90-day money-back guarantee</span>
				</li>
				<li class="flex items-center gap-2">
					<svg class="w-6 h-6 text-teal-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
					<span class="text-lg text-gray-700">Free shipping and delivery protection</span>
				</li>
			</ul>
		</div>

		<div class="submit-wrap flex flex-col w-full">
			<div class="checkout-button">
				{% assign buttonSID = SID | append: '-checkout' %}
				{% if buyType == 'buy_now' %}
					{% assign ctaButtonTitle = 'Buy Now' %}
				{% else %}
					{% assign ctaButtonTitle = 'Add To Cart' %}
				{% endif %}

				{% render 'buy-buttons-new-4',
					SID: buttonSID,
					product: prod,
					variant: '',
					buttonText: ctaButtonTitle,
					selling_plan_id: selling_plan_id,
					product_form_id: product_form_id,
					buyType: buyType,
					isBuyWithPrime: isBuyWithPrime
				%}
			</div>
			<div class="one-time-purchase-link mt-3 text-center">
				{% if isOneTimePurchaseLink %}
					{% assign firstVariant = prod.selected_or_first_available_variant %}
					<div
						id="one-time-add-to-cart"
						class="one-time-add-to-cart hover:text-gray-800 mb-2 text-sm font-bold text-gray-600 underline cursor-pointer"
						data-variant-id="{{ firstVariant.id }}">
						Buy Once for {{ firstVariant.price | money }}
					</div>
				{% endif %}
				<p class="text-[14px] italic max-w-[80%] m-auto">For best results, use daily for 3-6 months. Clinical study shows up to 30% reduction in HbA1c.*</p>
			</div>
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
		if (!productActions) return;

		const purchaseOptionBoxes = productActions.querySelectorAll('.variant-box');
		const submitButton = productActions.querySelector('.checkout-button button');
		const submitSellingPlanIdInput = document.querySelector('.submit-selling-plan-id');
		const submitVariantIdInput = document.querySelector('.submit-variant-id');
		const giftOptionContainers = document.querySelectorAll('.gift-option-container');
		const SID = '{{ SID }}';
		window.SID = SID;
		const buyType = '{{ buyType }}';

		const state = {
			selectedBox: null
		};

		// Move CTA text for mobile if needed
		const ctaText = document.querySelector('#cta-section-{{ SID }} .cta-text');
		const purchaseOptions = document.querySelector('#cta-section-{{ SID }} .purchase-options');
		if (ctaText && purchaseOptions && window.innerWidth < 768) {
			purchaseOptions.insertAdjacentElement('beforebegin', ctaText);
			ctaText.classList.add('mbl:mt-0', 'mbl:mb-8');
		}

		// Gift selection functionality
		function updateRadioIndicator(selectedContainer) {
			giftOptionContainers.forEach(container => {
				const checkMark = container.querySelector('.check-mark');
				if (checkMark) {
					if (container === selectedContainer) {
						checkMark.classList.remove('hidden');
					} else {
						checkMark.classList.add('hidden');
					}
				}
			});
		}

		giftOptionContainers.forEach(container => {
			container.addEventListener('click', () => {
				giftOptionContainers.forEach(gift => gift.classList.remove('selected'));
				container.classList.add('selected');
				updateRadioIndicator(container);
			});
		});

		// Initialize first gift as selected
		if (giftOptionContainers.length > 0) {
			const firstGift = giftOptionContainers[0];
			firstGift.classList.add('selected');
			updateRadioIndicator(firstGift);
		}

		async function addValidItemsToCart(items) {
			try {
				const cartResponse = await fetch('/cart.js');
				if (!cartResponse.ok) throw new Error('Failed to fetch current cart');
				let currentCart = await cartResponse.json();
				let itemsToAdd = [...items];

				// Handle subscription replacement
				const subscriptionItem = items.find(item => item.selling_plan);
				if (subscriptionItem) {
					const selectedBox = document.querySelector('.variant-box.selected');
					const productId = selectedBox?.getAttribute('data-product');

					if (productId) {
						const existingSubscription = currentCart.items.find(cartItem => {
							const isSameProduct = cartItem.product_id === parseInt(productId);
							const isSubscription = Boolean(cartItem.selling_plan_allocation);
							return isSameProduct && isSubscription;
						});

						if (existingSubscription) {
							await fetch('/cart/update.js', {
								method: 'POST',
								headers: { 'Content-Type': 'application/json' },
								body: JSON.stringify({ updates: { [existingSubscription.key]: 0 } })
							});
							currentCart = await (await fetch('/cart.js')).json();
						}
					}
				}

				const response = await fetch('/cart/add.js', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ items: itemsToAdd })
				});

				if (!response.ok) throw new Error('Failed to add items to cart');

				if (subscriptionItem && itemsToAdd.includes(subscriptionItem)) {
					showNotification('Subscription has been updated in your cart', 'success');
				} else {
					showNotification('Items added to cart successfully', 'success');
				}

				return { success: true, addedItems: itemsToAdd };
			} catch (error) {
				console.error('Error in addValidItemsToCart:', error);
				showNotification('An error occurred while adding items to cart. Please try again.');
				return { success: false, addedItems: [] };
			}
		}

		async function countUniqueProductsWithTag(cart) {
			try {
				const uniqueProducts = cart.items.reduce((acc, item) => {
					if (acc[item.product_id]) return acc;
					const hasBlackFridayWeek = item.title && item.title.includes('Black Friday Week');
					acc[item.product_id] = hasBlackFridayWeek;
					return acc;
				}, {});

				const blackFridayWeekCount = Object.values(uniqueProducts).filter(Boolean).length;
				return Math.max(blackFridayWeekCount, 1);
			} catch (error) {
				console.error('Error counting Black Friday Week products:', error);
				return 1;
			}
		}

		function showNotification(message, type = 'error') {
			const notification = document.createElement('div');
			notification.className = `cart-notification ${type} fixed bottom-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg shadow-lg z-[2147483640] transition-opacity duration-300`;

			if (type === 'error') {
				notification.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
			} else if (type === 'success') {
				notification.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
			}

			notification.innerHTML = `
				<div class="flex items-center">
					<div class="mr-3">${type === 'error' ? '⚠️' : '✅'}</div>
					<div class="text-sm font-medium">${message}</div>
					<button class="hover:text-gray-500 ml-auto text-gray-400" onclick="this.parentElement.parentElement.remove()">✕</button>
				</div>
			`;

			document.body.appendChild(notification);
			setTimeout(() => {
				notification.classList.add('opacity-0');
				setTimeout(() => notification.remove(), 300);
			}, 5000);
		}

		function updatePriceDisplay(element) {
			// Get all price displays (there might be multiple)
			const priceDisplays = document.querySelectorAll('.price-display');

			// Get values from the variant box
			const subscriptionItemPrice = parseFloat(element.getAttribute('data-subscription-item-price')) / 100;
			const originalItemCap = parseFloat(element.getAttribute('data-original-item-cap')) / 100;
			const subscriptionDiscount = parseFloat(element.getAttribute('data-subscription-discount'));
			const bottleQuantity = parseInt(element.getAttribute('data-bottle-quantity'));

			// Calculate total subscription price
			const subscriptionTotalPrice = subscriptionItemPrice * bottleQuantity;

			// Update all price displays
			priceDisplays.forEach(priceDisplay => {
				// Add the transition class if not present
				if (!priceDisplay.classList.contains('price-transition')) {
					priceDisplay.classList.add('price-transition');
				}

				// Fade out
				priceDisplay.style.opacity = '0';

				setTimeout(() => {
					// Update all prices while faded out
					const mainPrices = priceDisplay.querySelectorAll('.text-5xl, .font-bold');
					mainPrices.forEach(price => {
						price.textContent = `$${subscriptionItemPrice.toFixed(2)}`;
					});

					const comparePrices = priceDisplay.querySelectorAll('.text-gray-500.line-through');
					comparePrices.forEach(price => {
						price.textContent = `$${originalItemCap.toFixed(2)}`;
					});

					const discountBadges = priceDisplay.querySelectorAll('.bg-red-400, .bg-\\[\\-\\-bronze\\]');
					discountBadges.forEach(badge => {
						badge.textContent = `${subscriptionDiscount}% OFF`;
					});

					const totalPrices = priceDisplay.querySelectorAll('.text-lg.text-gray-700');
					totalPrices.forEach(totalPrice => {
						totalPrice.textContent = `Total of $${subscriptionTotalPrice.toFixed(2)} payable every ${bottleQuantity} months for ${bottleQuantity} bottles.`;
					});

					// Fade back in
					priceDisplay.style.opacity = '1';
				}, 300);
			});
		}

		function togglePurchaseBox(element) {
			if (!element) return;

			purchaseOptionBoxes.forEach(box => {
				box.classList.remove('selected');
				const radio = box.querySelector('input[type="radio"]');
				if (radio) radio.checked = false;
			});

			const isSubscription = element.getAttribute('data-purchase-type') === 'subscribe';
			const subscriptionPlanID = isSubscription ? element.getAttribute('data-subscription-selling-plan-id') : '';
			const variantID = element.getAttribute('data-variant');

			if (submitSellingPlanIdInput) {
				submitSellingPlanIdInput.value = subscriptionPlanID;
			}
			if (submitVariantIdInput) {
				submitVariantIdInput.value = variantID;
			}

			element.classList.add('selected');
			const radioInput = element.querySelector('input[type="radio"]');
			if (radioInput) {
				radioInput.checked = true;
			}

			state.selectedBox = element;
			updatePriceDisplay(element);

			if (window.hasInitialImageUpdateHappened) {
				updateVariantImage(element);
			} else {
				window.hasInitialImageUpdateHappened = true;
			}
		}

		function updateVariantImage(element) {
			if (!element?.dataset?.variant) return;

			const sliderId = `productSliderAllInOne${SID}`;
			let slider = window[sliderId];
			const targetVariantId = element.dataset.variant;

			if (!slider?.slides?.length) {
				return new Promise(resolve => {
					const checkSlider = setInterval(() => {
						slider = window[sliderId];
						if (slider?.slides?.length > 0) {
							clearInterval(checkSlider);
							performSlideUpdate(slider, targetVariantId);
							resolve();
						}
					}, 100);

					setTimeout(() => {
						clearInterval(checkSlider);
						resolve();
					}, 5000);
				});
			}

			performSlideUpdate(slider, targetVariantId);
		}

		function performSlideUpdate(slider, targetVariantId) {
			try {
				if (!slider || !targetVariantId) return;

				const slideIndex = Array.from(slider.slides).findIndex(slide => slide.getAttribute('data-variant-id') === targetVariantId);

				if (slideIndex !== -1) {
					slider.update();
					requestAnimationFrame(() => {
						slider.slideTo(slideIndex, 300);
						setTimeout(() => slider.update(), 350);
					});
				}
			} catch (error) {
				console.error('Error during slide update:', error);
			}
		}

		// Event Listeners
		productActions.addEventListener('click', event => {
			const radioInput = event.target.closest('input[type="radio"]');
			const purchaseOptionBox = event.target.closest('.variant-box');

			if (radioInput) {
				event.preventDefault();
				const parentBox = radioInput.closest('.variant-box');
				if (parentBox) togglePurchaseBox(parentBox);
			} else if (purchaseOptionBox) {
				event.preventDefault();
				togglePurchaseBox(purchaseOptionBox);
			}
		});

		if (submitButton) {
			submitButton.addEventListener('click', async event => {
				event.preventDefault();

				const selectedBox = productActions.querySelector('.variant-box.selected');
				const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
				const giftOptionBorder = selectedGiftContainer?.querySelector('.gift-option-border');

				if (!selectedBox) {
					showNotification('Please select a purchase option');
					return;
				}

				if (!giftOptionBorder) {
					showNotification('Please select a gift option');
					return;
				}

				submitButton.disabled = true;

				try {
					const isSubscription = selectedBox.getAttribute('data-purchase-type') === 'subscribe';
					const variantId = selectedBox.getAttribute('data-variant');
					const giftId = isSubscription ? giftOptionBorder.dataset.giftIdSubscription : giftOptionBorder.dataset.giftId;

					if (!variantId || !giftId) {
						throw new Error('Invalid product or gift selection');
					}

					const items = [
						{
							id: variantId,
							quantity: 1,
							selling_plan: isSubscription ? selectedBox.getAttribute('data-subscription-selling-plan-id') : undefined
						},
						{
							id: giftId,
							quantity: 1
						}
					];

					if (buyType === 'buy_now') {
						const cartPopup = document.getElementById('upCart');
						if (cartPopup) cartPopup.remove();

						await fetch('/cart/clear.js', { method: 'POST' });
						await fetch('/cart/add.js', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ items })
						});
						window.location.href = '/checkout';
					} else {
						await addValidItemsToCart(items);
					}
				} catch (error) {
					console.error('Error:', error);
					showNotification(error.message || 'Failed to add items to cart');
				} finally {
					submitButton.disabled = false;
				}
			});
		}

		const oneTimePurchaseButton = productActions.querySelector('.one-time-add-to-cart');
		if (oneTimePurchaseButton) {
			oneTimePurchaseButton.addEventListener('click', async event => {
				event.preventDefault();

				oneTimePurchaseButton.disabled = true;
				const originalText = oneTimePurchaseButton.textContent;
				oneTimePurchaseButton.textContent = 'Adding...';

				try {
					const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
					const giftOptionBorder = selectedGiftContainer?.querySelector('.gift-option-border');
					const giftId = giftOptionBorder?.dataset.giftId;
					const firstVariantID = oneTimePurchaseButton.getAttribute('data-variant-id');

					if (buyType === 'buy_now') {
						await fetch('/cart/clear.js', { method: 'POST' });

						const cartPopup = document.getElementById('upCart');
						if (cartPopup) cartPopup.remove();

						const itemsToAdd = [
							{
								id: firstVariantID,
								quantity: 1
							}
						];

						if (giftId) {
							itemsToAdd.push({
								id: parseInt(giftId),
								quantity: 1
							});
						}

						const response = await fetch('/cart/add.js', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ items: itemsToAdd })
						});

						if (!response.ok) throw new Error('Failed to add items to cart');

						window.location.href = '/checkout';
					} else {
						const itemsToAdd = [
							{
								id: firstVariantID,
								quantity: 1
							}
						];

						if (giftId) {
							itemsToAdd.push({
								id: parseInt(giftId),
								quantity: 1
							});
						}

						const response = await fetch('/cart/add.js', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ items: itemsToAdd })
						});

						if (!response.ok) throw new Error('Failed to add items to cart');

						if (typeof window.updateCart === 'function') {
							window.updateCart();
						}

						oneTimePurchaseButton.textContent = 'Added!';
						setTimeout(() => {
							oneTimePurchaseButton.textContent = originalText;
							oneTimePurchaseButton.disabled = false;
						}, 2000);
					}
				} catch (error) {
					console.error('Error:', error);
					oneTimePurchaseButton.textContent = 'Error occurred';
					setTimeout(() => {
						oneTimePurchaseButton.textContent = originalText;
						oneTimePurchaseButton.disabled = false;
					}, 2000);
				}
			});
		}

		function initializePurchaseOptions() {
			const defaultVariantIndex = parseInt(productActions.getAttribute('data-default-variant-index')) || 0;
			const defaultBox = purchaseOptionBoxes[defaultVariantIndex - 1] || purchaseOptionBoxes[0];
			if (defaultBox) togglePurchaseBox(defaultBox);
		}

		initializePurchaseOptions();
	});
</script>

<style>
	#cta-section-{{ SID }} {
		--text-color: #4a5568;
		--border-color: #cbcbcb;
		--radio-size: 1em;
		--radio-size-mobile: 1em;
		--transition-speed: 0.2s;

		.product-container {
			grid-template-columns: 54% 42% !important;
		}

		.variant-box {
			border-width: 2px;
			border-color: var(--primary-color);
			pointer: cursor;
			transition: all 0.3s ease;
			padding: 0.5rem;
			border-radius: 10px;

			&:hover, &.selected {
				background-color: var(--primary-color);
				color: white;
			}
		}

		.gift-option-container {
			&.selected {
				.gift-option-border {
					border-color: var(--primary-color);
					background-color: rgba(var(--primary-color-rgb), 0.05);
				}

				.radio-indicator {
					background-color: var(--primary-color);
					transition: background-color 0.3s ease;
				}

				.check-mark {
					display: flex;
				}
			}

			.gift-option-border {
				transition: all 0.3s ease;
				border: 2px solid #e5e7eb;
				background: #fff;
				width: 120px;
				height: 120px;

				&:hover {
					border-color: var(--primary-color-lighter);
					box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				}
			}
		}

		.product-actions {
			grid-area: 2/2/3/3;
			min-height: 415px;
		}

		.one-time-purchase-link {
			a {
				transition: color 0.3s ease;
			}
		}

		.radio-input {
			display: flex;
			align-items: center;
			justify-content: center;
			position: relative;

			input[type='radio'] {
				&:hover,
				.variant-box:hover & {
					transform: scale(1.1);
					cursor: pointer;
					transition: 0.1s all;
				}
			}
		}

		@media (max-width: 1269px) {
			.variant-box {
				width: 100%;
			}
		}

		@media (max-width: 767px) {
			.product-actions {
				grid-area: unset;
				grid-row: 3;
				max-width: unset;
				min-height: unset;
			}

			.variant-box {
				font-size: 4vw;
				padding: 3vw;
				max-height: 16vw;

				&::before {
					font-size: 3vw;
					width: 23vw;
					height: 5vw;
					top: -5vw;
					padding: 0.75vw;
					border-radius: 2vw 2vw 0 0;
				}

				&.selected {
					max-height: none;
				}

				.top-wrapper {
					min-height: 9vw;
				}

				.left-wrapper {
					gap: 2vw;
				}

				.option-title {
					font-size: 3.9vw;
				}

				.price-wrapper {
					min-width: 17.7vw;

					.real-price {
						font-size: 4.5vw;
					}
				}

				.terms {
					margin-left: 5vw;

					.subtitle,
					.terms-title {
						font-size: 3.5vw;
					}
				}

				.radio-box {
					label {
						width: 3vw;
						height: 3vw;

						&:after {
							font-size: 2vw;
							width: 3vw !important;
							height: 3vw !important;
							top: -0.25vw !important;
							left: -0.25vw !important;
							display: flex;
							justify-content: center;
							align-items: center;
						}
					}
				}

				&.selected {
					max-height: max-content;
				}

				&[inert] {
					max-height: 16vw !important;
				}
			}

			.one-time-purchase-link {
				font-size: 3.5vw;
			}
		}
	}

	.price-display {
			transition: opacity 0.3s ease-in-out;
	}
</style>
