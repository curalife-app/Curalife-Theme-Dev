{% assign variantsAmount = prod.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in prod.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: prod, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, saveFormat: saveFormat, index: forloop.index %}
    {% endfor %}

    {% render 'subscription-benefits-popup' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% if prod != blank %}
          {% render 'buy-buttons', product: prod, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
        {% endif %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.65rem;
    transition: background-color 0.3s, color 0.3s;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid var(--border-color);
    cursor: pointer;
    max-height: 72px; /* Start all boxes collapsed */
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    border-width: 3px;
    max-height: max-content; /* Allow selected box to expand */
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-options .purchase-type {
    font-weight: 600px;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    min-height: 36px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }

    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
      padding: 3vw;
      max-height: 16vw;

      &.selected {
        max-height: none;
      }

      .top-wrapper {
        min-height: 9vw;
      }

      .left-wrapper {
        gap: 2vw;
      }

      .option-title {
        font-size: 3.5vw;
      }

      .price-wrapper {
        min-width: 17.7vw;

        .real-price {
          font-size: 4.5vw;
        }
      }

      .subscription-terms {
        .subtitle, .terms-title {
          font-size: 3.5vw;
        }
      }

      .radio-box {
        label {
          width: 3vw;
          height: 3vw;

          &:after {
            font-size: 2vw;
            width: 3vw !important;
            height: 3vw !important;
            top: -0.25vw !important;
            left: -0.25vw !important;
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }
      }
    }

    #cta-section-{{ section.id }} .purchase-option-box.selected {
      max-height: max-content;
    }

    #cta-section-{{ section.id }} .purchase-option-box[inert] {
      max-height: 16vw !important;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const productActions = document.querySelector('[id^="product-actions-"]');
    const SID = productActions ? productActions.id.split('-').pop() : '';

    if (!productActions || !SID) {
      console.error('Product actions element not found or SID not available');
      return;
    }

    const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
    const enableToggleAnimation = typeof isVariantBoxToggle !== 'undefined' ? isVariantBoxToggle : false;

    const state = {
      isSubscriptionSelected: false,
      selectedBox: null,
    };

    function getClosedHeight() {
      return window.innerWidth <= 767 ? '16vw' : '72px';
    }

    function formatPrice(cents) {
      return (cents / 100).toFixed(2);
    }

    function isSubscriptionSelected() {
      const subscriptionButton = productActions.querySelector('.purchase-type button.subscription');
      return subscriptionButton ? subscriptionButton.classList.contains('selected') : false;
    }

    function safelySetStyle(element, property, value) {
      if (element && element.style) {
        element.style[property] = value;
      }
    }

    function safelySetDisplay(element, value) {
      safelySetStyle(element, 'display', value);
    }

    function safelyAddClass(element, className) {
      if (element && element.classList) {
        element.classList.add(className);
      }
    }

    function safelyRemoveClass(element, className) {
      if (element && element.classList) {
        element.classList.remove(className);
      }
    }

    function initializePurchaseOptions() {
      const urlParams = new URLSearchParams(window.location.search);
      const defaultVariant = parseInt(urlParams.get('default-variant')) || (typeof defaultSelectionIndex !== 'undefined' ? defaultSelectionIndex : 1);

      const subscriptionButton = productActions.querySelector('.purchase-type .subscription');
      if (subscriptionButton) {
        subscriptionButton.classList.add('selected');
        state.isSubscriptionSelected = true;
      }

      const initialDefaultVariant = defaultVariant ? defaultVariant - 1 : 0;
      if (purchaseOptionBoxes[initialDefaultVariant]) {
        purchaseOptionBoxes[initialDefaultVariant].classList.add('selected');
        const radio = purchaseOptionBoxes[initialDefaultVariant].querySelector("input[type='radio']");
        if (radio) {
          radio.checked = true;
        }
      }

      purchaseOptionBoxes.forEach((box, index) => {
        if (index !== initialDefaultVariant) {
          safelySetStyle(box, 'maxHeight', getClosedHeight());
          updatePriceDisplay(box, state.isSubscriptionSelected, false);
        }
      });
    }

    function togglePurchaseType(isSubscription) {
      purchaseOptionBoxes.forEach((box, index) => {
        const subscriptionElements = box.querySelectorAll('.subscription');
        const buyOnceElements = box.querySelectorAll('.buy-once');
        const comparedAtPriceElement = box.querySelector('.compared-at-price');
        const perMonthElement = box.querySelector('.per-month');
        const saveTagSubscription = box.querySelector('.save-title.subscription');
        const saveTagBuyOnce = box.querySelector('.save-title.buy-once');

        if (isSubscription) {
          // Show subscription-related elements
          safelySetDisplay(perMonthElement, 'inline-block');
          fadeOutThenIn(buyOnceElements, subscriptionElements);

          // Show the subscription save tag and hide the buy-once save tag
          safelySetDisplay(saveTagSubscription, 'inline-block');
          safelySetDisplay(saveTagBuyOnce, 'none');

          const sellingPlanId = box.dataset.subscriptionSellingPlanId;
          if (parseInt(sellingPlanId) > 0) {
            box.removeAttribute('inert');
          } else {
            box.setAttribute('inert', '');
            safelyRemoveClass(box, 'selected');
          }
        } else {
          // Show buy-once related elements
          safelySetDisplay(perMonthElement, 'none');
          fadeOutThenIn(subscriptionElements, buyOnceElements);

          // Show the buy-once save tag and hide the subscription save tag
          safelySetDisplay(saveTagBuyOnce, 'inline-block');
          safelySetDisplay(saveTagSubscription, 'none');

          box.removeAttribute('inert');
        }

        updatePriceDisplay(box, isSubscription, true);

        if (box.classList.contains('selected')) {
          adjustMaxHeight(box, isSubscription);
        } else {
          safelySetStyle(box, 'maxHeight', getClosedHeight());
        }
      });

      if (!productActions.querySelector('.purchase-option-box.selected')) {
        const firstNonInertBox = productActions.querySelector('.purchase-option-box:not([inert])');
        if (firstNonInertBox) {
          firstNonInertBox.click();
        }
      }
    }

    function toggleElementVisibility(element, show) {
      if (!element) return;

      if (show) {
        element.classList.remove('hidden');
        element.style.display = '';
      } else {
        element.classList.add('hidden');
        element.style.display = 'none';
      }
    }

    function fadeOutThenIn(elementsToHide, elementsToShow) {
      elementsToHide.forEach(el => fadeOut(el, () => {
        elementsToShow.forEach(el => fadeIn(el));
      }));
    }

    function fadeOut(element, callback, duration = 200) {
      if (!element || element.classList.contains('hidden')) {
        if (callback) callback();
        return;
      }

      let opacity = 1;
      const step = 10 / duration; // Adjust the step size to make the animation faster

      function animate() {
        opacity -= step;
        if (opacity <= 0) {
          element.style.opacity = '';
          if (callback) callback();
        } else {
          element.style.opacity = opacity.toString();
          requestAnimationFrame(animate);
        }
      }
      animate();
    }

    function fadeIn(element, display = 'inline-block', duration = 200) {
      if (!element || element.classList.contains('hidden')) return;

      let opacity = 0;
      element.style.opacity = '0';
      element.style.display = display;
      const step = 10 / duration; // Adjust the step size to make the animation faster

      function animate() {
        opacity += step;
        if (opacity >= 1) {
          element.style.opacity = '';
        } else {
          element.style.opacity = opacity.toString();
          requestAnimationFrame(animate);
        }
      }
      animate();
    }

    function updatePriceDisplay(box, isSubscriptionSelected, animate = true) {
      const itemPrice = parseInt(box.dataset.itemPrice) || 0;
      const subscriptionItemPrice = parseInt(box.dataset.subscriptionItemPrice) || 0;
      const bottleQuantity = parseInt(box.dataset.bottleQuantity) || 1;
      const originalItemCap = parseInt(box.dataset.originalItemCap) || 0;

      const currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;
      const totalPrice = currentPrice * bottleQuantity;

      const pricePer = box.dataset.pricePer || 'total';

      const subscriptionPriceElement = box.querySelector('.real-price.subscription');
      const buyOncePriceElement = box.querySelector('.real-price.buy-once');
      const totalPriceElement = box.querySelector(`.total-price${isSubscriptionSelected ? '.subscription' : '.buy-once'}`);
      const comparedAtPriceElement = box.querySelector('.compared-at-price');
      const saveTag = box.querySelector('.save-title');

      const updateContent = () => {
        const displayPrice = pricePer === 'month' ? currentPrice : totalPrice;

        if (subscriptionPriceElement) {
          toggleElementVisibility(subscriptionPriceElement.closest('.real-price.subscription'), isSubscriptionSelected);
        }
        if (buyOncePriceElement) {
          toggleElementVisibility(buyOncePriceElement.closest('.real-price.buy-once'), !isSubscriptionSelected);
        }
        if (totalPriceElement) {
          toggleElementVisibility(totalPriceElement, true);
        }

        const comparedAtPrice = pricePer === 'month' ? originalItemCap : (originalItemCap * bottleQuantity);

        const shouldShowComparedPrice = comparedAtPrice > displayPrice && (!isSubscriptionSelected || pricePer !== 'month');

        if (comparedAtPriceElement) {
          comparedAtPriceElement.textContent = '$' + formatPrice(comparedAtPrice);
          toggleElementVisibility(comparedAtPriceElement, shouldShowComparedPrice);
        }

        if (saveTag) {
          const subscriptionSaveTag = saveTag.querySelector('.subscription');
          const buyOnceSaveTag = saveTag.querySelector('.buy-once');

          if (subscriptionSaveTag) {
            toggleElementVisibility(subscriptionSaveTag, isSubscriptionSelected);
          }
          if (buyOnceSaveTag) {
            toggleElementVisibility(buyOnceSaveTag, !isSubscriptionSelected);
          }
        }

        const perMonthElement = box.querySelector('.per-month');
        if (perMonthElement) {
          toggleElementVisibility(perMonthElement, pricePer === 'month' && isSubscriptionSelected);
        }
      };

      if (animate) {
        fadeOut(isSubscriptionSelected ? subscriptionPriceElement : buyOncePriceElement, () => {
          updateContent();
          fadeIn(isSubscriptionSelected ? subscriptionPriceElement : buyOncePriceElement);
        });
        if (totalPriceElement) {
          fadeOut(totalPriceElement, () => fadeIn(totalPriceElement));
        }
      } else {
        updateContent();
      }
    }

    function adjustMaxHeight(element, isSubscriptionSelected) {
      if (enableToggleAnimation) {
        if (isSubscriptionSelected && element.classList.contains('selected')) {
          const openHeight = element.scrollHeight;
          safelySetStyle(element, 'maxHeight', openHeight + 'px');
        } else {
          safelySetStyle(element, 'maxHeight', getClosedHeight());
        }
      } else {
        safelySetStyle(element, 'maxHeight', 'none');
      }
    }

    function togglePurchaseBox(element) {
      if (!element) return;

      const isSubscription = isSubscriptionSelected();
      const wasSelected = element.classList.contains('selected');
      const subscriptionPlanID = isSubscription ? element.dataset.subscriptionSellingPlanId : '';
      const variantID = isSubscription ? element.dataset.originalVariant : element.dataset.variant;

      if (wasSelected) {
        return;
      }

      purchaseOptionBoxes.forEach(box => {
        safelyRemoveClass(box, 'selected');
        safelySetStyle(box, 'maxHeight', getClosedHeight());
      });

      const submitSellingPlanId = productActions.querySelector('.submit-selling-plan-id');
      const submitVariantId = productActions.querySelector('.submit-variant-id');
      if (submitSellingPlanId) submitSellingPlanId.value = subscriptionPlanID;
      if (submitVariantId) submitVariantId.value = variantID;

      safelyAddClass(element, 'selected');
      const radio = element.querySelector("input[type='radio']");
      if (radio) radio.checked = true;

      updatePriceDisplay(element, isSubscription, false);
      updateVariantImage(element);

      if (enableToggleAnimation && isSubscription) {
        const openHeight = element.scrollHeight;
        safelySetStyle(element, 'maxHeight', openHeight + 'px');
      }
    }

    function updateVariantImage(element) {
      if (typeof variantsAmount !== 'undefined' && variantsAmount > 1 && window.productSliderAllInOne && window.productSliderAllInOne[SID]) {
        if (typeof isSlideOnLoad !== 'undefined' && isSlideOnLoad) {
          let slideIndex = window.productSliderAllInOne[SID].slides.length - (variantsAmount + 1 - parseInt(element.dataset.index));
          window.productSliderAllInOne[SID].slideTo(slideIndex);
        } else {
          if (window.hasInitialImageUpdateHappened) {
            let slideIndex = window.productSliderAllInOne[SID].slides.length - (variantsAmount + 1 - parseInt(element.dataset.index));
            window.productSliderAllInOne[SID].slideTo(slideIndex);
          }
          window.hasInitialImageUpdateHappened = true;
        }
      }
    }

    productActions.addEventListener('click', (event) => {
      const purchaseTypeButton = event.target.closest('.purchase-type button');
      const purchaseOptionBox = event.target.closest('.purchase-option-box');

      if (purchaseTypeButton) {
        event.preventDefault();
        const isSubscription = purchaseTypeButton.classList.contains('subscription');

        productActions.querySelectorAll('.purchase-type button').forEach(btn => safelyRemoveClass(btn, 'selected'));
        safelyAddClass(purchaseTypeButton, 'selected');

        togglePurchaseType(isSubscription);
      } else if (purchaseOptionBox) {
        event.preventDefault();
        togglePurchaseBox(purchaseOptionBox);
      }
    });

    window.addEventListener('resize', () => {
      purchaseOptionBoxes.forEach(box => {
        if (!box.classList.contains('selected')) {
          safelySetStyle(box, 'maxHeight', getClosedHeight());
        }
      });
    });

    initializePurchaseOptions();
  });
</script>