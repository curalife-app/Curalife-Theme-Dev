{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ SID }}" class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}">
  <div class="purchase-options flex flex-col gap-2">
    <div class="purchase-type flex-nowrap flex w-full gap-2">
      <button class="subscription selected flex items-center justify-center gap-2" aria-label="Subscribe & Save">
        <span>
          Subscribe <div class="desktop">& Save</div>
        </span>
      </button>
      <button class="buy-once z-0" aria-label="Buy Once"><span>Buy Once</span></button>
    </div>

    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024-new-3', SID: SID, prod: product, var: var, buyBoxColor: buyBoxColor, pricePer: pricePer, saveFormat: saveFormat, index: forloop.index %}
    {% endfor %}

    {% render 'subscription-benefits-popup' %}

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% render 'buy-buttons', product: product, variant: '', selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 80%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
  }

  #cta-section-{{ section.id }} .product-actions {
    grid-area: 2/2/3/3;
    max-width: 410px;
    min-height: 415px;
  }

  #cta-section-{{ section.id }} .purchase-type button {
    background-color: var(--primary-color);
    color: black;
    border-radius: 5px;
    font-size: 16px;
    min-width: 49%;
    padding: 0.65rem;
    transition: background-color 0.3s, color 0.3s;
  }

  #cta-section-{{ section.id }} .purchase-type button.selected {
    color: white !important;
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) {
    background: var(--primary-color-light);
    border: 1px solid var(--primary-color);
  }

  #cta-section-{{ section.id }} .purchase-type button:not(.selected) .subscription-details {
    color: var(--primary-color-dark);
  }

  #cta-section-{{ section.id }} .purchase-option-box {
    background: #fff;
    border: 1px solid var(--border-color);
    cursor: pointer;
    max-height: 72px; /* Start all boxes collapsed */
    filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
    transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
    border-radius: 10px;
    border-color: var(--primary-color);
    overflow: hidden;
    padding: 1rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box:hover {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected {
    filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
    background-color: #EBF1F3;
    border-width: 3px;
    max-height: max-content; /* Allow selected box to expand */
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] {
    max-height: 72px !important;
    background: #ededed;
    opacity: 0.6;
  }

  #cta-section-{{ section.id }} .purchase-options .purchase-type {
    font-weight: 600px;
  }

  #cta-section-{{ section.id }} .purchase-option-box[inert] .option-title {
    color: grey;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box {
    align-items: center;
    display: flex;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box input[type='radio'] {
    display: none;
  }

  #cta-section-{{ section.id }} .purchase-option-box .radio-box label {
    cursor: pointer;
    width: 19px;
    height: 19px;
    border: 1px solid var(--primary-color);
    border-radius: 50%;
    position: relative;
  }

  #cta-section-{{ section.id }} .purchase-option-box.selected .radio-box input[type='radio']:checked + label:after {
    content: '\2713';
    position: absolute;
    top: -2px;
    left: -2px;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--primary-color);
    text-align: center;
    line-height: 22px;
    color: #fff;
  }

  #cta-section-{{ section.id }} .purchase-option-box .save-title {
    background-color: var(--orange);
    font-weight: bold;
  }

  #cta-section-{{ section.id }} .purchase-option-box .top-wrapper {
    min-height: 36px;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper {
    min-width: 5rem;
  }

  #cta-section-{{ section.id }} .purchase-option-box .price-wrapper .total-price {
    color: {{ buyBoxColor | default: 'var(--primary-color-dark)'}};
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box {
    max-height: none !important;
    transition: none !important;
  }

  #cta-section-{{ section.id }} .product-actions:not(.with-animation) .purchase-option-box .toggle-icon {
    display: none !important;
  }

  @media (max-width: 1269px) {
    #cta-section-{{ section.id }} .purchase-option-box {
      width: 100%;
    }
  }

  @media (max-width: 767px) {
    #cta-section-{{ section.id }} .product-actions {
      grid-area: unset;
      grid-row: 3;
      max-width: unset;
      min-height: unset;
    }

    #cta-section-{{ section.id }} .purchase-option-box {
      font-size: 4vw;
      padding: 3vw;
      max-height: 16vw;

      &.selected {
        max-height: none;
      }

      .top-wrapper {
        min-height: 9vw;
      }

      .left-wrapper {
        gap: 2vw;
      }

      .option-title {
        font-size: 3.5vw;
      }

      .price-wrapper {
        min-width: 17.7vw;

        .real-price {
          font-size: 4.5vw;
        }
      }

      .subscription-terms {
        .subtitle, .terms-title {
          font-size: 3.5vw;
        }
      }

      .radio-box {
        label {
          width: 3vw;
          height: 3vw;

          &:after {
            font-size: 2vw;
            width: 3vw !important;
            height: 3vw !important;
            top: -0.25vw !important;
            left: -0.25vw !important;
            display: flex;
            justify-content: center;
            align-items: center;
          }
        }
      }
    }

    #cta-section-{{ section.id }} .purchase-option-box.selected {
      max-height: max-content;
    }

    #cta-section-{{ section.id }} .purchase-option-box[inert] {
      max-height: 16vw !important;
    }
  }
</style>


<script>
  $(document).ready(function() {
    const $productActions = $("#product-actions-{{ SID }}");
    const $purchaseOptionBoxes = $productActions.find('.purchase-option-box');
    const enableToggleAnimation = {{ isVariantBoxToggle | default: false }};

    function isSubscriptionSelected() {
      return $('#product-actions-{{ SID }} .purchase-type button.subscription').hasClass('selected');
    }

    function initializePurchaseOptions() {
      const urlParams = new URLSearchParams(window.location.search);
      const defaultVariant = urlParams.get('default-variant') ? parseInt(urlParams.get('default-variant')) : {{ defaultSelectionIndex | default: 1 }};

      $('#product-actions-{{ SID }} .purchase-type .subscription').trigger('click');

      const initialDefaultVariant = defaultVariant ? defaultVariant - 1 : 0;
      $purchaseOptionBoxes.eq(initialDefaultVariant).trigger('click').find("input[type='radio']").prop('checked', true);

      $purchaseOptionBoxes.not(':eq(' + initialDefaultVariant + ')').each(function() {
        $(this).css('max-height', getClosedHeight());
        $(this).find('.toggle-icon').hide();
        $(this).find('.subscription-terms').hide();
      });
    }

    function getClosedHeight() {
      return window.innerWidth <= 767 ? '16vw' : '72px';
    }

    function togglePurchaseType(isSubscriptionSelected) {
      $purchaseOptionBoxes.each(function() {
        const parentBox = $(this);
        const subscriptionContent = parentBox.find('.subscription');
        const buyOnceContent = parentBox.find('.buy-once');
        const bwpButton = $('#product-actions-{{ SID }} .bwp-button');
        const subscriptionTerms = parentBox.find('.subscription-terms');

        if (isSubscriptionSelected) {
          parentBox.find('.per-month').show();
          bwpButton.hide();
          buyOnceContent.hide();
          subscriptionContent.show();
          subscriptionTerms.show();

          const sellingPlanId = parentBox.data('subscription-selling-plan-id');
          if (sellingPlanId > 0) {
            parentBox.removeAttr('inert');
          } else {
            parentBox.attr('inert', '');
            parentBox.removeClass('selected');
          }
        } else {
          parentBox.find('.per-month').hide();
          bwpButton.show();
          parentBox.removeAttr('inert');
          subscriptionContent.hide();
          buyOnceContent.show();
          subscriptionTerms.hide();
        }

        updatePriceDisplay(parentBox, isSubscriptionSelected);

        if (parentBox.hasClass('selected')) {
          adjustMaxHeight(parentBox, isSubscriptionSelected);
        } else {
          parentBox.css('max-height', getClosedHeight());
          parentBox.find('.toggle-icon').hide();
        }
      });

      if (!$purchaseOptionBoxes.filter('.selected').length) {
        $purchaseOptionBoxes.filter(':not([inert])').first().trigger('click');
      }
    }

    function updatePriceDisplay(parentBox, isSubscriptionSelected) {
      const itemPrice = parseInt(parentBox.data('item-price'));
      const subscriptionItemPrice = parseInt(parentBox.data('subscription-item-price'));
      const bottleQuantity = parseInt(parentBox.data('bottle-quantity') || 1);
      const originalItemCap = parseInt(parentBox.data('original-item-cap'));

      const currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;
      const totalPrice = currentPrice * bottleQuantity;

      const pricePer = parentBox.data('price-per') || 'total';

      const priceElement = parentBox.find('.real-price' + (isSubscriptionSelected ? '.subscription' : '.buy-once') + ' .floor');
      const totalPriceElement = parentBox.find('.total-price' + (isSubscriptionSelected ? '.subscription' : '.buy-once') + ' .floor');
      const comparedAtPriceElement = parentBox.find('.compared-at-price');

      const displayPrice = pricePer === 'month' ? currentPrice : totalPrice;
      priceElement.text('$' + formatPrice(displayPrice));

      if (totalPriceElement.length) {
        totalPriceElement.text('$' + formatPrice(totalPrice));
      }

      if (originalItemCap > currentPrice) {
        const comparedAtPrice = pricePer === 'month' ? originalItemCap : (originalItemCap * bottleQuantity);
        comparedAtPriceElement.text('$' + formatPrice(comparedAtPrice)).show();
      } else {
        comparedAtPriceElement.hide();
      }

      const saveTag = parentBox.find('.save-title' + (isSubscriptionSelected ? '.subscription' : '.buy-once'));
      saveTag.show().siblings('.save-title').hide();

      parentBox.find('.per-month').toggle(pricePer === 'month');
    }

    function formatPrice(cents) {
      return (cents / 100).toFixed(2);
    }

    function adjustMaxHeight(element, isSubscriptionSelected) {
      if (enableToggleAnimation) {
        if (isSubscriptionSelected && element.hasClass('selected')) {
          const openHeight = element.get(0).scrollHeight;
          element.css('max-height', openHeight + 'px');
          element.find('.toggle-icon').show();
        } else {
          element.css('max-height', getClosedHeight());
          element.find('.toggle-icon').hide();
        }
      } else {
        element.css('max-height', 'none');
      }
    }

    function togglePurchaseBox(element) {
      const isSubscription = isSubscriptionSelected();
      const wasSelected = element.hasClass('selected');
      const subscriptionPlanID = isSubscription ? element.data('subscription-selling-plan-id') : '';
      const variantID = isSubscription ? element.data('original-variant') : element.data('variant');

      if (wasSelected) {
        return;
      }

      $purchaseOptionBoxes.removeClass('selected').each(function() {
        $(this).css('max-height', getClosedHeight());
        $(this).find('.toggle-icon').hide();
        $(this).find('.subscription-terms').hide();
      });

      $('#product-actions-{{ SID }} .submit-selling-plan-id').val(subscriptionPlanID);
      $('#product-actions-{{ SID }} .submit-variant-id').val(variantID);

      element.addClass('selected');
      element.find("input[type='radio']").prop('checked', true);

      togglePurchaseType(isSubscription);
      updateVariantImage(element);

      if (enableToggleAnimation && isSubscription) {
        const openHeight = element.get(0).scrollHeight;
        element.css('max-height', openHeight + 'px');
        element.find('.toggle-icon').show();
      }
    }

    function updateVariantImage(element) {
      {% if variantsAmount > 1 %}
        {% if isSlideOnLoad %}
          let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
          window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
        {% else %}
          if (window.hasInitialImageUpdateHappened) {
            let slideIndex = window.productSliderAllInOne{{ SID }}.slides.length - ({{ variantsAmount | plus: 1 }} - element.attr('data-index'));
            window.productSliderAllInOne{{ SID }}.slideTo(slideIndex);
          }
          window.hasInitialImageUpdateHappened = true;
        {% endif %}
      {% endif %}
    }

    $productActions.on('click', '.purchase-type button', function(event) {
      event.preventDefault();
      const isSubscription = $(this).hasClass('subscription');

      $('#product-actions-{{ SID }} .purchase-type button').removeClass('selected');
      $(this).addClass('selected');

      togglePurchaseType(isSubscription);
    });

    $productActions.on('click', '.purchase-option-box', function(event) {
      event.preventDefault();
      togglePurchaseBox($(this));
    });

    $(window).on('resize', function() {
      $purchaseOptionBoxes.not('.selected').css('max-height', getClosedHeight());
    });

    initializePurchaseOptions();
  });
</script>