{% comment %} Short Section ID for JS Variables {% endcomment %}
{% assign sectionIDParts = section_id | split: '-' %}
{% assign shortSectionID = sectionIDParts[-1] %}

{% assign variantsAmount = product.variants.size %}

<div id="product-actions-{{ section_id }}" class="product-actions">
  <div class="purchase-options md:p-2 flex flex-col gap-2">
    {% for var in product.variants %}
      {% render 'product-cta-section-actions-variant-2024', prod: product, var: var, index: forloop.index %}
    {% endfor %}

    {% if customer.email == 'ana@curalife.com' or customer.email == 'yotam@curalife.com' %}
      {% for additionalVariant in product.metafields.custom.additional_variants.value %}
        {% assign variantsAmount = variantsAmount | plus: 1 %}
        {% render 'product-cta-section-actions-variant-2024', prod: additionalVariant.product, var: additionalVariant, index: variantsAmount %}
      {% endfor %}

      {% for block in blocks %}
        {% case block.type %}
          {% when 'variant' %}
            {% assign pathsToReveal = block.settings.reveal_on_paths | split: "," %}
            {% if pathsToReveal contains request.path or pathsToReveal == blank %}
              {% assign referenced_variant_product = block.settings.prod %}
              {% assign referenced_variant = blank %}
              {% assign blockVarID = block.settings.variant_id | plus: 0 %}
              {% for vari in referenced_variant_product.variants %}
                {% assign currVarID = vari.id | plus: 0 %}
                {% if currVarID == blockVarID %}
                  {% assign referenced_variant = vari %}
                {% endif %}
              {% endfor %}

              {% if referenced_variant != blank %}
                {% render 'product-cta-section-actions-variant-2024', prod: referenced_variant_product, var: referenced_variant %}
              {% endif %}
            {% endif %}
        {% endcase %}
      {% endfor %}
    {% endif %}
  </div>
</div>

{% comment %} {% if product.handle == 'curalin-gifts' %}
  <script>
    // Function to colorize text after the '+' character
    function colorizeAfterPlus(inputString) {
      const plusIndex = inputString.indexOf('+');
      if (plusIndex !== -1) {
        const beforePlus = inputString.substring(0, plusIndex);
        const afterPlus = inputString.substring(plusIndex);
        return `${beforePlus}<span class="text-[--bronze]">${afterPlus}</span>`;
      }
      return inputString;
    }

    const optionTitles = document.querySelectorAll('.option-title');
    optionTitles.forEach((element) => {
      element.innerHTML = colorizeAfterPlus(element.textContent);
    });
  </script>
{% endif %} {% endcomment %}

<script>
  $(document).ready(function() {
    const productActions = $("#product-actions-{{ section_id }}");
    const purchaseOptionBoxes = productActions.find('.purchase-option-box');

    // handleGiftSelection();
    attachEventHandlers();
    initializePurchaseOptions();
    setupMutationObserver();

    function initializePurchaseOptions() {
      purchaseOptionBoxes.each(function(index) {
        const box = $(this);
        togglePurchaseType(box, box.find('.purchase-type .subscription').hasClass('selected'));
        box.css('max-height', '54px').find('input[type="radio"]').prop('checked', true);
      });

      let urlParams = new URLSearchParams(window.location.search);
      let defaultVariant = urlParams.get('default-variant');

      if (defaultVariant) {
        purchaseOptionBoxes.eq(defaultVariant - 1).trigger("click");
      }
      else {
        purchaseOptionBoxes.{% if variantsAmount == 1 %}first(){% elsif defaultSelectionIndex %}eq({{ defaultSelectionIndex | minus: 1 }}){% else %}first(){% endif %}.trigger( "click" );
      }
    }

    // function handleGiftSelection() {
    //   const productActions = $("#product-actions-{{ section_id }}");
    //   productActions.on('click', '.gift-product', function() {
    //     console.log('Gift product clicked');
    //     const giftsElement = $(this).closest('.gifts');
    //     const currentlySelectedGifts = giftsElement.find('.gift-product.selected');

    //     $(this).siblings('.selected').removeClass('selected');
    //     $(this).addClass('selected');

    //     let selectableGiftsProductIDs = giftsElement.find('.gift-product.selected').map(function() {
    //       return $(this).attr('data-product-id');
    //     }).get();

    //     console.log('Selectable Gifts Product IDs:', selectableGiftsProductIDs);

    //     const singleSelectionMapping = {
    //       "7896199463063": "43685308366999",
    //       "7896197660823": "43685309743255",
    //       "8009619243159": "43685309022359",
    //       "7911564345495": "43685305188503"
    //     };

    //     const handleTwoSelections = (ids) => {
    //       console.log('Handling two selections with IDs:', ids);
    //       const combinations = {
    //         "7896199463063_7896197660823": "43680615202967",
    //         "7896199463063_8009619243159": "43680725139607",
    //         "7896199463063_7911564345495": "43680725401751",
    //         "7896197660823_8009619243159": "43680726319255",
    //         "7896197660823_7911564345495": "43680726024343",
    //         "8009619243159_7911564345495": "43680726450327",
    //         "7896199463063_7896199463063": "43685308465303",
    //         "7896197660823_7896197660823": "43685309841559",
    //         "8009619243159_8009619243159": "43685309120663",
    //         "7911564345495_7911564345495": "43685305286807"
    //       };

    //       // Generate both possible keys
    //       const key1 = `${ids[0]}_${ids[1]}`;
    //       const key2 = `${ids[1]}_${ids[0]}`;

    //       // Check for existence and return the bundleProductID
    //       if (combinations[key1]) {
    //         return combinations[key1];
    //       } else if (combinations[key2]) {
    //         return combinations[key2];
    //       }
    //     };

    //     if (selectableGiftsProductIDs.length === 1) {
    //       console.log('Single selection processing');
    //       const bundleProductID = singleSelectionMapping[selectableGiftsProductIDs[0]];
    //       console.log('Bundle Product ID for single selection:', bundleProductID);
    //       if (bundleProductID) {
    //         giftsElement.attr('data-bundle-product-id', bundleProductID);
    //       }
    //     } else if (selectableGiftsProductIDs.length === 2) {
    //       console.log('Two selections processing');
    //       const bundleProductID = handleTwoSelections(selectableGiftsProductIDs);
    //       console.log('Bundle Product ID for two selections:', bundleProductID);
    //       if (bundleProductID) {
    //         giftsElement.attr('data-bundle-product-id', bundleProductID);
    //       }
    //     }
    //   });
    // }

    function setupMutationObserver() {
      const observer = new MutationObserver(mutations => {
        mutations.forEach(({ target }) => {
          const targetBox = $(target).closest('.purchase-option-box');
          if (targetBox.hasClass('selected')) adjustMaxHeight(targetBox);
        });
      });

      purchaseOptionBoxes.each((_, element) => observer.observe(element, { attributes: true, childList: true, subtree: true }));
    }

    function attachEventHandlers() {
      productActions.on('click', '.purchase-option-box', event => togglePurchaseBox($(event.currentTarget)))
                    .on('click', '.purchase-type button', event => handlePurchaseTypeClick(event, $(event.currentTarget)))
                    .on('click', '.main-btn', event => handleMainButtonClick(event, $(event.currentTarget)));
    }

    function handlePurchaseTypeClick(event, button) {
      event.stopPropagation();
      const parentBox = button.closest('.purchase-option-box');
      const isSubscriptionSelected = button.hasClass('subscription');
      togglePurchaseType(parentBox, isSubscriptionSelected);
    }

    function handleMainButtonClick(event, button) {
      event.stopPropagation();
      const parentBox = button.closest('.purchase-option-box');
      buyButtonHandler(parentBox.data('variant'), parentBox.data('subscription-selling-plan-id'), button);
    }

    function adjustMaxHeight(element) {
      var openHeight = $(element).get(0).scrollHeight;
      $(element).css('max-height', openHeight + 'px');
    }

    function updateComparedAtPriceDisplay(parentBox) {
      let isSubscriptionSelected = parentBox.find('.purchase-type .subscription').hasClass('selected');

      let itemPrice = parseFloat(parentBox.data('item-price'));
      let subscriptionItemPrice = parseFloat(parentBox.data('subscription-item-price'));
      let originalItemCap = parseFloat(parentBox.data('original-item-cap'));

      let currentPrice = isSubscriptionSelected ? subscriptionItemPrice : itemPrice;

      let comparedAtPriceElement = parentBox.find('.compared-at-price');
      if (originalItemCap > currentPrice) {
        comparedAtPriceElement.fadeIn();
      } else {
        comparedAtPriceElement.fadeOut();
      }
    }

    function togglePurchaseBox(element) {
      var wasSelected = $(element).hasClass('selected');

      if (wasSelected) {
          return;
      }

      $('.purchase-option-box.selected').removeClass('selected').each(function() {
        $(this).css('max-height', '54px');
        $(this).find('.toggle-icon').hide();
      });

      $(element).addClass('selected');
      adjustMaxHeight(element);
      $(element).find("input[type='radio']").prop('checked', true);
      $(element).find('.toggle-icon').show(); // Show the 'v' icon in the expanded box

      {% if variantsAmount > 1 %}
        if (window.isFirstToggle) {
          updateVariantImage(element);
        }
      {% endif %}

      window.isFirstToggle = true
    }

    function togglePurchaseType(parentBox, isSubscriptionSelected) {
      parentBox.find('.purchase-type button').removeClass('selected');
      parentBox.find(isSubscriptionSelected ? '.subscription' : '.buy-once').addClass('selected');

      // Toggle subscription info
      if (isSubscriptionSelected) {
        parentBox.find('.subscription-info').slideDown('fast');
        {% unless product.metafields.custom.is_price_per_month %}parentBox.find('.per-month').show();{% endunless %}
        parentBox.find('.checkout-button').show();
        parentBox.find('.add-to-cart-button').hide();
      } else {
        parentBox.find('.subscription-info').slideUp('fast');
        {% unless product.metafields.custom.is_price_per_month %}parentBox.find('.per-month').hide();{% endunless %}
        parentBox.find('.add-to-cart-button').show();
        parentBox.find('.checkout-button').hide();
      }

      updateYotpoPointsWidget(parentBox, isSubscriptionSelected);
      toggleOptionSubtitles(parentBox, isSubscriptionSelected);
      togglePriceDisplay(parentBox, isSubscriptionSelected);
      adjustMaxHeight(parentBox);
      updateComparedAtPriceDisplay(parentBox);
    }

    function toggleOptionSubtitles(parentBox, isSubscriptionSelected) {
      var optionSubtitleToHide = isSubscriptionSelected ? '.option-subtitle.buy-once' : '.option-subtitle.subscription';
      var optionSubtitleToShow = isSubscriptionSelected ? '.option-subtitle.subscription' : '.option-subtitle.buy-once';

      parentBox.find(optionSubtitleToHide).fadeOut('fast', function() {
        parentBox.find(optionSubtitleToShow).fadeIn('fast');
      });
    }

    function togglePriceDisplay(parentBox, isSubscriptionSelected) {
      parentBox.find('.real-price, .total-price').stop().fadeOut('fast', function() {
        if (isSubscriptionSelected) {
          parentBox.find('.real-price.subscription, .total-price.subscription').fadeIn('fast');
          parentBox.find('.real-price.buy-once, .total-price.buy-once').hide();
        } else {
          parentBox.find('.real-price.buy-once, .total-price.buy-once').fadeIn('fast');
          parentBox.find('.real-price.subscription, .total-price.subscription').hide();
        }
      });
    }

    function updateYotpoPointsWidget(parentBox, isSubscriptionSelected) {
      var newPoints = isSubscriptionSelected
        ? Math.floor(Number(parentBox.data('subscription-item-price')) / 100)
        : Math.floor(Number(parentBox.data('item-price')) / 100);

      parentBox.find('.reward-points-widget .current-price').html(newPoints);
    }

    function updateSelection(element) {
      let container = $("#product-actions-{{ section_id }}");
      container.find(".purchase-option-box").removeClass("selected");
      container.find(".purchase-option-box input[type='radio']").prop('checked', false);
      $(element).addClass("selected").find('input').prop('checked', true);
    }

    function updateVariantImage(element) {
      let slideIndex = window.productSliderAllInOne{{ shortSectionID }}.slides.length - ({{ variantsAmount | plus: 1 }} - $(element).attr('data-index'));
      window.productSliderAllInOne{{ shortSectionID }}.slideTo(slideIndex);
    }

    function buyButtonHandler(variant_id, subscription_selling_plan_id, buttonElement) {
      toggleButtonLoading(buttonElement, true);
      if (isSubscriptionSelected() || true) {
        buySubscription(variant_id, 1, subscription_selling_plan_id);
      } else {
        let dc = $(buttonElement).closest('.purchase-option-box').data('dc');
        let giftProductID = buttonElement.parent().siblings('.gifts').attr('data-bundle-product-id');

        if (giftProductID){
          redirectToCheckout(giftProductID, dc);
        }
        else {
          redirectToCheckout(variant_id, dc);
        }
      }
    }

    function isSubscriptionSelected() {
      return $('#product-actions-{{ section_id }} .purchase-option-box.selected').find('.purchase-type .subscription.selected').length > 0;
    }

    function redirectToCheckout(variant_id, dc) {
      let checkoutLink = "https://" + location.hostname + "/cart/" + variant_id + ":1"
      if (dc) {checkoutLink += "?discount=" + atob(dc);}
      window.location.href = checkoutLink;
    }

    function toggleButtonLoading(buttonElement, isLoading) {
      let loader = $(buttonElement).closest('.purchase-option-box').find('.loader');
      let buttonText = $(buttonElement).find('.button-text');

      if (loader.length === 0) {
          console.error("Loader element not found");
          return;
      }

      if (isLoading) {
          loader.show();
          buttonText.hide();
      } else {
          loader.hide();
          buttonText.show();
      }
    }

    function clearCart(callback) {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/clear.js',
        success: function() {
          console.log('Cart cleared');
          callback();
        },
        error: function() {
          console.log('Failed to clear cart');
        }
      });
    }

    function buySubscription(variant_id, qty, selling_plan) {
      clearCart(function() {
        data = {
          "id": variant_id,
          "quantity": qty,
          "selling_plan": selling_plan
        }

        jQuery.ajax({
          type: 'POST',
          url: '/cart/add.js',
          data: data,
          dataType: 'json',
          success: function() {
            console.log('success');
            window.location.href = '/checkout';
          },
          error: function() {
            console.log('Failed to add item to cart');
          }
        });
      });
    }
  });
</script>