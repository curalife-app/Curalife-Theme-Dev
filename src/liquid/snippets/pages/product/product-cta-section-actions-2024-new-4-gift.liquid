{% assign isGlobal = false %}
{% if shop.name contains 'Global' %}
	{% assign isGlobal = true %}
{% endif %}

{% assign referenced_variant_product = prod %}

{% assign giftsAmount = 0 %}
{% for block in blocks %}
	{% case block.type %}
		{% when 'gift' %}
			{% assign show_gift = false %}
			{% if block.settings.show_on == 'both' %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'global' and isGlobal %}
				{% assign show_gift = true %}
			{% elsif block.settings.show_on == 'us' and isGlobal == false %}
				{% assign show_gift = true %}
			{% endif %}

			{% if show_gift %}
				{% assign giftsAmount = giftsAmount | plus: 1 %}
			{% endif %}
	{% endcase %}
{% endfor %}

<div class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}" data-default-variant-index="{{ defaultSelectionIndex }}">
	<div class="purchase-options flex flex-col gap-2">
		{% for block in blocks %}
			{% if block.type == 'variant' %}
				{% assign referenced_variant = blank %}
				{% assign blockVarID = block.settings.variant_id | plus: 0 %}
				{% for vari in referenced_variant_product.variants %}
					{% assign currVarID = vari.id | plus: 0 %}
					{% if currVarID == blockVarID %}
						{% assign referenced_variant = vari %}
					{% endif %}
				{% endfor %}

				{% render 'product-cta-section-actions-variant-2024-new-4',
					SID: SID,
					prod: referenced_variant_product,
					var: referenced_variant,
					pricePer: pricePer,
					saveFormat: saveFormat,
					saveText: block.settings.save_text,
					badgeText: block.settings.badge_text,
					variantTitle: block.settings.title,
					variantDescription: block.settings.variant_description,
					variantSecondDescription: block.settings.variant_second_description,
					index: forloop.index,
					purchase_type: block.settings.purchase_type,
					buyType: buyType
				%}
			{% endif %}
		{% endfor %}

		{% if giftsAmount > 0 %}
			<div class="gift-selector-wrap">
				<div class="gift-selector-title mb-2">Your free gift:</div>

				<div class="gift-options flex-nowrap flex justify-start gap-4">
					{% for block in blocks %}
						{% case block.type %}
							{% when 'gift' %}
								{% assign show_gift = false %}
								{% if block.settings.show_on == 'both' %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'global' and isGlobal %}
									{% assign show_gift = true %}
								{% elsif block.settings.show_on == 'us' and isGlobal == false %}
									{% assign show_gift = true %}
								{% endif %}

								{% if show_gift %}
									{% assign giftProd = block.settings.gift_product %}
									{% assign giftVariant = giftProd.selected_or_first_available_variant %}
									{% assign giftProdSubscription = block.settings.gift_product_subscription | default: giftProd %}
									{% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
									{% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

									<div class="gift-option-container flex flex-col items-center">
										<div
											class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer"
											data-gift-id="{{ giftVariant.id }}"
											data-gift-id-subscription="{{ giftVariantSubscription.id | default: giftVariant.id }}">
											<div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 rounded-full">
												<div class="check-mark hidden w-4 h-4 font-bold text-white rounded-full">✓</div>
											</div>
											<div class="gift-image-container flex justify-center">
												<img
													src="{{ giftThumb | image_url: width: 80, height: 80 }}"
													alt="{{ giftProd.title }}"
													class="object-contain w-24 h-24">
											</div>
										</div>

										<div class="gift-content text-center">
											<div class="gift-name mb-1 font-medium">{{ giftProd.title | replace: 'Free ', '' }}</div>
											<div class="gift-price flex items-center justify-center gap-2">
												<span class="original-price text-gray-500 line-through">
													{{- giftVariantSubscription.compare_at_price | money_with_currency -}}
												</span>
												<span class="sale-price font-bold">FREE</span>
											</div>
										</div>
									</div>
								{% endif %}
						{% endcase %}
					{% endfor %}
				</div>
			</div>
		{% endif %}

		<div class="submit-wrap flex flex-col w-full">
			<div class="checkout-button">
				{% assign buttonSID = SID | append: '-checkout' %}
				{% if buyType == 'buy_now' %}
					{% assign ctaButtonTitle = 'Buy Now' %}
				{% else %}
					{% assign ctaButtonTitle = 'Add To Cart' %}
				{% endif %}

				{% render 'buy-buttons-new-4',
					SID: buttonSID,
					product: prod,
					variant: '',
					buttonText: ctaButtonTitle,
					selling_plan_id: selling_plan_id,
					product_form_id: product_form_id,
					buyType: buyType,
					isBuyWithPrime: isBuyWithPrime
				%}
			</div>
			<div class="one-time-purchase-link mt-3 text-center">
				{% if isOneTimePurchaseLink %}
					{% assign firstVariant = prod.selected_or_first_available_variant %}
					<div
						id="one-time-add-to-cart"
						class="one-time-add-to-cart hover:text-gray-800 mb-2 text-sm font-bold text-gray-600 underline cursor-pointer"
						data-variant-id="{{ firstVariant.id }}">
						Buy Once for {{ firstVariant.price | money }}
					</div>
				{% endif %}
				<p class="text-[14px] italic max-w-[80%] m-auto">For best results, use daily for 3-6 months. Clinical study shows up to 30% reduction in HbA1c.*</p>
			</div>
		</div>
	</div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
		const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
		const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
		const submitButton = productActions.querySelector('.checkout-button button');
		const submitSellingPlanIdInput = document.querySelector('.submit-selling-plan-id');
		const submitVariantIdInput = document.querySelector('.submit-variant-id');
		const giftOptionContainers = document.querySelectorAll('.gift-option-container');
		const SID = '{{ SID }}';
    window.SID = SID;
		const buyType = '{{ buyType }}';

		const submitButtons = productActions.querySelectorAll('.checkout-button button');
		// console.log('Number of submit buttons:', submitButtons.length);
		// console.log('buyType:', buyType);

		giftOptionContainers.forEach(container => {
			container.addEventListener('click', function(event) {
				giftOptionContainers.forEach(gift => gift.classList.remove('selected'));
				container.classList.add('selected');
				updateRadioIndicator(container);
			});
		});

		function updateRadioIndicator(selectedContainer) {
			giftOptionContainers.forEach(container => {
				const checkMark = container.querySelector('.check-mark');
				if (container === selectedContainer) {
					checkMark.classList.remove('hidden');
				} else {
					checkMark.classList.add('hidden');
				}
			});
		}

		// Initialize the first gift as selected by default
		if (giftOptionContainers.length > 0) {
			const firstGift = giftOptionContainers[0];
			firstGift.classList.add('selected');
			updateRadioIndicator(firstGift);
		}

		const state = {
			selectedBox: null,
		};

		const ctaText = document.querySelector('#cta-section-{{ SID }} .cta-text');
		const purchaseOptions = document.querySelector('#cta-section-{{ SID }} .purchase-options');
		if (ctaText && purchaseOptions && window.innerWidth < 768) {
			purchaseOptions.insertAdjacentElement('beforebegin', ctaText);
			ctaText.classList.add('mbl:mt-0');
			ctaText.classList.add('mbl:mb-8');
		}

		async function addValidItemsToCart(items) {
			try {
				const cartResponse = await fetch('/cart.js');
				if (!cartResponse.ok) throw new Error('Failed to fetch current cart');
				let currentCart = await cartResponse.json();
				let itemsToAdd = [...items];

				// Handle subscription replacement
				const subscriptionItem = items.find(item => item.selling_plan);
				if (subscriptionItem) {
					const selectedBox = document.querySelector('.purchase-option-box.selected');
					const productId = selectedBox.getAttribute('data-product');

					if (productId) {
						const existingSubscription = currentCart.items.find(cartItem => {
							const isSameProduct = cartItem.product_id === parseInt(productId);
							const isSubscription = Boolean(cartItem.selling_plan_allocation);
							return isSameProduct && isSubscription;
						});

						if (existingSubscription) {
							const updates = { [existingSubscription.key]: 0 };
							await fetch('/cart/update.js', {
								method: 'POST',
								headers: { 'Content-Type': 'application/json' },
								body: JSON.stringify({ updates })
							});
							currentCart = await (await fetch('/cart.js')).json();
						}
					}
				}

				// Check free gift limits
				const giftItem = items.find(item => {
					const giftOptions = document.querySelectorAll('.gift-option-border');
					return Array.from(giftOptions).some(giftOption => {
						const giftId = subscriptionItem
							? giftOption.dataset.giftIdSubscription
							: giftOption.dataset.giftId;
						return item.id.toString() === giftId;
					});
				});

				if (giftItem) {
					const giftOptions = document.querySelectorAll('.gift-option-border');
					const currentFreeItems = currentCart.items.filter(cartItem =>
						Array.from(giftOptions).some(giftOption => {
							const giftId = cartItem.selling_plan_allocation
								? giftOption.dataset.giftIdSubscription
								: giftOption.dataset.giftId;
							return cartItem.variant_id.toString() === giftId;
						})
					);

					const bfcmDealCount = await countUniqueProductsWithTag(currentCart);

					if (currentFreeItems.length >= bfcmDealCount) {
						itemsToAdd = items.filter(item => item !== giftItem);
						showNotification(`You can have up to ${bfcmDealCount} free gift${bfcmDealCount !== 1 ? 's' : ''} (one for each BFCM deal in your cart).`, 'error');
					}
				}

				if (itemsToAdd.length === 0) {
					return { success: false, addedItems: [], failedItems: items };
				}

				const response = await fetch('/cart/add.js', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({ items: itemsToAdd })
				});

				if (!response.ok) throw new Error('Failed to add items to cart');

				const addResult = await response.json();
				console.log('Add items response:', addResult);

				if (subscriptionItem && itemsToAdd.includes(subscriptionItem)) {
					showNotification('Subscription has been updated in your cart', 'success');
				} else {
					showNotification('Items added to cart successfully', 'success');
				}

				return {
					success: true,
					addedItems: itemsToAdd,
					failedItems: items.filter(item => !itemsToAdd.includes(item))
				};

			} catch (error) {
				console.error('Error in addValidItemsToCart:', error);
				showNotification('An error occurred while adding items to cart. Please try again.');
				return { success: false, addedItems: [], failedItems: items };
			}
		}

		async function countUniqueProductsWithTag(cart) {
			try {
				// Use the product title to check for 'Black Friday Week'
				const uniqueProducts = cart.items.reduce((acc, item) => {
					if (acc[item.product_id]) {
						return acc;
					}

					const hasBlackFridayWeek = item.title && item.title.includes('Black Friday Week');
					console.log('Checking item:', item.title, 'Has BF Week:', hasBlackFridayWeek);

					acc[item.product_id] = hasBlackFridayWeek;
					return acc;
				}, {});

				const blackFridayWeekCount = Object.values(uniqueProducts).filter(Boolean).length;
				console.log('Unique products:', uniqueProducts);
				console.log('Black Friday Week Count:', blackFridayWeekCount);

				// Always allow at least one free gift
				return Math.max(blackFridayWeekCount, 1);
			} catch (error) {
				console.error('Error counting Black Friday Week products:', error);
				return 1; // Default to 1 if there's an error
			}
		}

		// Helper function to find the corresponding failed validation result
		function findFailedValidationIndex(validationResults, invalidItemIndex) {
			let failedCount = 0;
			for (let i = 0; i < validationResults.length; i++) {
				if (!validationResults[i].isValid) {
					if (failedCount === invalidItemIndex) {
						return i;
					}
					failedCount++;
				}
			}
			return -1;
		}

		function isSubscriptionSelected() {
			const productActions = document.querySelector('.product-actions');
			const selectedBox = productActions?.querySelector('.purchase-option-box.selected');
			return selectedBox?.getAttribute('data-purchase-type') === 'subscribe';
		}

		function showNotification(message, type = 'error') {
			if (!{{ isCartNotifications }}) return;
			const notification = document.createElement('div');
			notification.className = `cart-notification ${type} fixed bottom-4 left-1/2 transform -translate-x-1/2 p-4 rounded-lg shadow-lg max-w-md z-50 transition-opacity duration-300 z-[2147483640]`;

			// Style based on type
			if (type === 'error') {
				notification.classList.add('bg-red-100', 'border', 'border-red-400', 'text-red-700');
			} else if (type === 'success') {
				notification.classList.add('bg-green-100', 'border', 'border-green-400', 'text-green-700');
			} else if (type === 'info') {
				notification.classList.add('bg-blue-100', 'border', 'border-blue-400', 'text-blue-700');
			}

			// Add content
			notification.innerHTML = `
				<div class="flex items-center">
					<div class="mr-3">
						${type === 'error' ? '⚠️' : type === 'success' ? '✅' : 'ℹ️'}
					</div>
					<div class="text-sm font-medium">
						${message}
					</div>
					<button class="hover:text-gray-500 ml-auto text-gray-400" onclick="this.parentElement.parentElement.remove()">
						✕
					</button>
				</div>
			`;

			// Add to document
			document.body.appendChild(notification);

			// Remove after 5 seconds
			setTimeout(() => {
				notification.classList.add('opacity-0');
				setTimeout(() => notification.remove(), 300);
			}, 5000);
		}

		function togglePurchaseBox(element) {
			if (!element) return;

			purchaseOptionBoxes.forEach(box => {
				box.classList.remove('selected');
				const radio = box.querySelector('input[type="radio"]');
				if (radio) {
					radio.checked = false;
				}
			});

			const isSubscription = element.getAttribute('data-purchase-type') === 'subscribe';
			const subscriptionPlanID = isSubscription ? element.getAttribute('data-subscription-selling-plan-id') : '';
			const variantID = element.getAttribute('data-variant');
			const buyType = element.getAttribute('data-buy-type');

			if (submitSellingPlanIdInput) {
				submitSellingPlanIdInput.value = subscriptionPlanID;
			}
			if (submitVariantIdInput) {
				submitVariantIdInput.value = variantID;
			}

			element.classList.add('selected');
			const radioInput = element.querySelector('input[type="radio"]');
			if (radioInput) {
				radioInput.checked = true;
			}

			state.selectedBox = element;

			if (window.hasInitialImageUpdateHappened) {
				updateVariantImage(element);
			}
			else {
				window.hasInitialImageUpdateHappened = true;
			}
		}

		function initializePurchaseOptions() {
			const defaultVariantIndex = parseInt(productActions.getAttribute('data-default-variant-index')) || 0;
			const defaultBox = purchaseOptionBoxes[defaultVariantIndex - 1] || purchaseOptionBoxes[0];

			if (defaultBox) {
				togglePurchaseBox(defaultBox);
			}
		}

		// Event listeners for purchase options
		productActions.addEventListener('click', (event) => {
			const radioInput = event.target.closest('input[type="radio"]');
			const purchaseOptionBox = event.target.closest('.purchase-option-box');

			if (radioInput) {
				const parentBox = radioInput.closest('.purchase-option-box');
				if (parentBox) {
					event.preventDefault();
					togglePurchaseBox(parentBox);
				}
			} else if (purchaseOptionBox) {
				event.preventDefault();
				togglePurchaseBox(purchaseOptionBox);
			}
		});

		// Radio input change handler
		productActions.addEventListener('change', (event) => {
			if (event.target.type === 'radio') {
				const parentBox = event.target.closest('.purchase-option-box');
				if (parentBox) {
					togglePurchaseBox(parentBox);
				}
			}
		});

		submitButton.addEventListener('click', async function(event) {
			event.preventDefault();

			const selectedBox = productActions.querySelector('.purchase-option-box.selected');
			const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
			const giftOptionBorder = selectedGiftContainer?.querySelector('.gift-option-border');

			if (!selectedBox) {
				showNotification('Please select a purchase option', 'error');
				return;
			}

			if (!giftOptionBorder) {
				showNotification('Please select a gift option', 'error');
				return;
			}

			submitButton.disabled = true;

			try {
				const isSubscription = selectedBox.getAttribute('data-purchase-type') === 'subscribe';
				const variantId = selectedBox.getAttribute('data-variant');
				const giftId = isSubscription ? giftOptionBorder.dataset.giftIdSubscription : giftOptionBorder.dataset.giftId;

				if (!variantId || !giftId) {
					throw new Error('Invalid product or gift selection');
				}

				const items = [
					{
						id: variantId,
						quantity: 1,
						selling_plan: isSubscription ? selectedBox.getAttribute('data-subscription-selling-plan-id') : undefined
					},
					{
						id: giftId,
						quantity: 1
					}
				];

				if (buyType === 'buy_now') {
					const cartPopup = document.getElementById('upCart');
					if (cartPopup) {
						cartPopup.remove();
					}

					await fetch('/cart/clear.js', { method: 'POST' });
					await fetch('/cart/add.js', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({ items })
					});
					window.location.href = '/checkout';
				} else {
					await addValidItemsToCart(items);
				}
			} catch (error) {
				console.error('Error:', error);
				showNotification(error.message || 'Failed to add items to cart', 'error');
				submitButton.disabled = false;
			}
		});

		// One-time purchase button handler
		const oneTimePurchaseButton = productActions.querySelector('.one-time-add-to-cart');
		if (oneTimePurchaseButton) {
			oneTimePurchaseButton.addEventListener('click', async (event) => {
				event.preventDefault();

				oneTimePurchaseButton.disabled = true;
				const originalText = oneTimePurchaseButton.textContent;
				oneTimePurchaseButton.textContent = 'Adding...';

				try {
					const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
					const giftOptionBorder = selectedGiftContainer?.querySelector('.gift-option-border');
					const giftId = giftOptionBorder?.dataset.giftId;

					const firstVariantID = oneTimePurchaseButton.getAttribute('data-variant-id');

					{% if buyType == "buy_now" %}
						// Clear the cart
						const clearResponse = await fetch('/cart/clear.js', { method: 'POST' });
						if (!clearResponse.ok) throw new Error('Failed to clear cart');

						const cartPopup = document.getElementById('upCart');
						if (cartPopup) {
							cartPopup.remove();
						}

						// Wait until the cart is actually empty
						let cartIsEmpty = false;
						for (let i = 0; i < 5; i++) { // Try up to 5 times
							const cartResponse = await fetch('/cart.js');
							if (!cartResponse.ok) throw new Error('Failed to fetch cart');

							const cartData = await cartResponse.json();
							if (cartData.item_count === 0) {
								cartIsEmpty = true;
								break;
							}
							// Wait for 200 milliseconds before checking again
							await new Promise(resolve => setTimeout(resolve, 200));
						}

						if (!cartIsEmpty) {
							throw new Error('Cart is not empty after clearing');
						}

						const itemsToAdd = [
							{
								id: firstVariantID,
								quantity: 1
							}
						];

						if (giftId) {
							itemsToAdd.push({
								id: parseInt(giftId),
								quantity: 1
							});
						}

						const response = await fetch('/cart/add.js', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ items: itemsToAdd })
						});

						if (!response.ok) throw new Error('Failed to add items to cart');

						// Redirect to checkout
						window.location.href = '/checkout';
					{% else %}
						const itemsToAdd = [
							{
								id: firstVariantID,
								quantity: 1
							}
						];

						if (giftId) {
							itemsToAdd.push({
								id: parseInt(giftId),
								quantity: 1
							});
						}

						const response = await fetch('/cart/add.js', {
							method: 'POST',
							headers: { 'Content-Type': 'application/json' },
							body: JSON.stringify({ items: itemsToAdd })
						});

						if (!response.ok) throw new Error('Failed to add items to cart');

						// Update the cart UI if necessary
						if (typeof window.updateCart === 'function') {
							window.updateCart();
						}

						oneTimePurchaseButton.textContent = 'Added!';
						setTimeout(() => {
							oneTimePurchaseButton.textContent = originalText;
							oneTimePurchaseButton.disabled = false;
						}, 2000);
					{% endif %}
				} catch (error) {
					console.error('Error:', error);
					oneTimePurchaseButton.textContent = 'Something went wrong! Please contact us.';
					setTimeout(() => {
						oneTimePurchaseButton.textContent = originalText;
						oneTimePurchaseButton.disabled = false;
					}, 2000);
				}
			});
		}

    function updateVariantImage(element) {
				if (!element || !element.dataset.variant) {
						console.warn('Invalid element or missing data-variant attribute');
						return;
				}

				const SID = window.SID || '';
				const sliderId = `productSliderAllInOne${SID}`;
				let slider = window[sliderId];
				const targetVariantId = element.dataset.variant;

				// console.log("sliderId:", sliderId);
				// console.log("Updating variant image for variant ID:", targetVariantId);

				if (!slider || !slider.slides || !slider.slides.length) {
						return new Promise((resolve) => {
								const checkSlider = setInterval(() => {
										slider = window[sliderId];
										if (slider && slider.slides && slider.slides.length > 0) {
												clearInterval(checkSlider);
												performSlideUpdate(slider, targetVariantId);
												resolve();
										}
								}, 100);

								setTimeout(() => {
										clearInterval(checkSlider);
										console.warn('Slider initialization timed out');
										resolve();
								}, 5000);
						});
				}

				performSlideUpdate(slider, targetVariantId);
		}

		function performSlideUpdate(slider, targetVariantId) {
				try {
						if (!slider || !targetVariantId) {
								console.warn('Invalid slider or variant ID');
								return;
						}

						// Find the slide with matching variant ID
						const slideIndex = Array.from(slider.slides).findIndex(slide =>
								slide.getAttribute('data-variant-id') === targetVariantId
						);

						if (slideIndex !== -1) {
								slider.update();

								requestAnimationFrame(() => {
										slider.slideTo(slideIndex, 300);

										setTimeout(() => {
												slider.update();
										}, 350);
								});
						} else {
								console.warn(`No slide found with variant ID: ${targetVariantId}`);
						}
				} catch (error) {
						console.error('Error during slide update:', error);
				}
		}

		initializePurchaseOptions();
	});
</script>

<style>
	#cta-section-{{ SID }} {
		--text-color: #4a5568;
		--border-color: #cbcbcb;
		--radio-size: 1em;
		--radio-size-mobile: 1em;
		--transition-speed: 0.2s;

		.product-container {
			grid-template-columns: 54% 42% !important;
		}

		.cta-text {
			font-size: 16px !important;
		}

		.gift-option-container {
			&.selected {
				.gift-option-border {
					border-color: var(--primary-color);
					background-color: rgba(var(--primary-color-rgb), 0.05);
				}

				.radio-indicator {
					background-color: var(--primary-color);
					transition: background-color 0.3s ease;
				}

				.check-mark {
					display: flex;
				}
			}

			.gift-option-border {
				transition: all 0.3s ease;
				border: 2px solid #e5e7eb;
				background: #fff;
				width: 120px;
				height: 120px;

				&:hover {
					border-color: var(--primary-color-lighter);
					box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
				}
			}
		}

		.product-actions {
			grid-area: 2/2/3/3;
			min-height: 415px;

			&:not(.with-animation) {
				.purchase-option-box {
					position: relative;
					gap: 1rem;
					max-height: none !important;
					transition: none !important;
				}
			}
		}

		.one-time-purchase-link {
			a {
				transition: color 0.3s ease;
			}
		}

		.radio-input {
			display: flex;
			align-items: center;
			justify-content: center;
			position: relative;

			input[type='radio'] {
				&:hover,
				.purchase-option-box:hover & {
					transform: scale(1.1);
					cursor: pointer;
					transition: 0.1s all;
				}
			}
		}

		.purchase-type {
			button {
				background-color: var(--primary-color);
				color: black;
				border-radius: 5px;
				font-size: 16px;
				min-width: 49%;
				padding: 0.65rem;
				transition: background-color 0.3s, color 0.3s;
				font-weight: 600;

				&.selected {
					color: white !important;
				}

				&:not(.selected) {
					background: var(--primary-color-light);
					border: 1px solid var(--primary-color);

					.subscription-details {
						color: var(--primary-color-dark);
					}
				}
			}
		}

		.purchase-option-box {
			--box-padding: 1rem;
			--box-max-height: 72px;
			background: #fff;
			border: 1px solid var(--border-color);
			cursor: pointer;
			max-height: var(--box-max-height);
			filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
			transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
			border-radius: 10px;
			border-color: var(--primary-color);
			padding: var(--box-padding);

			&:hover {
				filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
			}

			&.selected {
				filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
				background-color: var(--primary-color-light);
				max-height: max-content;
			}

			&[inert] {
				max-height: var(--box-max-height) !important;
				background: #ededed;
				opacity: 0.6;

				.option-title {
					color: grey;
				}
			}

			.radio-box {
				align-items: center;
				display: flex;
			}

			.save-title {
				background-color: var(--orange);
				font-weight: bold;
			}

			.terms {
				margin-left: 26px;
			}

			.price-wrapper {
				min-width: 5rem;

				.total-price {
					color: var(--primary-color);
				}
			}
		}

		@media (max-width: 1269px) {
			.purchase-option-box {
				width: 100%;
			}
		}

		@media (max-width: 767px) {
			.product-actions {
				grid-area: unset;
				grid-row: 3;
				max-width: unset;
				min-height: unset;
			}

			.purchase-option-box {
				font-size: 4vw;
				padding: 3vw;
				max-height: 16vw;

				&::before {
					font-size: 3vw;
					width: 23vw;
					height: 5vw;
					top: -5vw;
					padding: 0.75vw;
					border-radius: 2vw 2vw 0 0;
				}

				&.selected {
					max-height: none;
				}

				.top-wrapper {
					min-height: 9vw;
				}

				.left-wrapper {
					gap: 2vw;
				}

				.option-title {
					font-size: 3.9vw;
				}

				.price-wrapper {
					min-width: 17.7vw;

					.real-price {
						font-size: 4.5vw;
					}
				}

				.terms {
					margin-left: 5vw;

					.subtitle,
					.terms-title {
						font-size: 3.5vw;
					}
				}

				.radio-box {
					label {
						width: 3vw;
						height: 3vw;

						&:after {
							font-size: 2vw;
							width: 3vw !important;
							height: 3vw !important;
							top: -0.25vw !important;
							left: -0.25vw !important;
							display: flex;
							justify-content: center;
							align-items: center;
						}
					}
				}

				&.selected {
					max-height: max-content;
				}

				&[inert] {
					max-height: 16vw !important;
				}
			}

			.one-time-purchase-link {
				font-size: 3.5vw;
			}
		}
	}
</style>
