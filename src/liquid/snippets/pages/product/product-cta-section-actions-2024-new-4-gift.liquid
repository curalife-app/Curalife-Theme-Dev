{% assign referenced_variant_product = prod %}


<div class="product-actions {% if isVariantBoxToggle %}with-animation{% endif %}" data-default-variant-index="{{ defaultSelectionIndex }}">
  <div class="purchase-options flex flex-col gap-2">
    {% for block in blocks %}
      {% assign referenced_variant = blank %}
      {% assign blockVarID = block.settings.variant_id | plus: 0 %}
      {% for vari in referenced_variant_product.variants %}
        {% assign currVarID = vari.id | plus: 0 %}
        {% if currVarID == blockVarID %}
          {% assign referenced_variant = vari %}
        {% endif %}
      {% endfor %}

      {% if block.type == 'variant' %}
          {% render 'product-cta-section-actions-variant-2024-new-4',
            SID: SID,
            prod: referenced_variant_product,
            var: referenced_variant,
            buyBoxColor: block.settings.box_color,
            pricePer: pricePer,
            saveFormat: saveFormat,
            saveText: block.settings.save_text,
            badgeText: block.settings.badge_text,
            variantTitle: block.settings.title,
            variantDescription: block.settings.variant_description,
            variantSecondDescription: block.settings.variant_second_description,
            index: forloop.index,
            purchase_type: block.settings.purchase_type,
            buyType: buyType,
          %}
      {% endif %}
    {% endfor %}

    <div class="gift-selector-wrap">
      <div class="gift-selector-title mb-2">Choose your free gift:</div>

      <div class="gift-options flex-nowrap flex justify-start gap-4">
        {% for block in blocks %}
          {% case block.type %}
            {% when 'gift' %}
              {% assign show_gift = false %}
              {% if block.settings.show_on == 'both' %}
                {% assign show_gift = true %}
              {% elsif block.settings.show_on == 'global' and isGlobal %}
                {% assign show_gift = true %}
              {% elsif block.settings.show_on == 'us' and isGlobal == false %}
                {% assign show_gift = true %}
              {% endif %}

              {% if show_gift %}
                {% assign giftProd = block.settings.gift_product %}
                {% assign giftVariant = giftProd.selected_or_first_available_variant %}
                {% assign giftProdSubscription = block.settings.gift_product_subscription %}
                {% assign giftVariantSubscription = giftProdSubscription.selected_or_first_available_variant %}
                {% assign giftThumb = block.settings.gift_thumbnail | default: giftProdSubscription.featured_image | default: giftProd.featured_image %}

                <div class="gift-option-container flex flex-col items-center">
                  <div class="gift-option-border relative w-full p-2 mb-3 border rounded-lg cursor-pointer" data-gift-id="{{ giftVariant.id }}" data-gift-id-subscription="{{ giftVariantSubscription.id }}">
                    <div class="radio-indicator top-2 right-2 absolute flex items-center justify-center w-6 h-6 rounded-full">
                      <div class="check-mark hidden w-4 h-4 font-bold text-white rounded-full">âœ“</div>
                    </div>
                    <div class="gift-image-container flex justify-center">
                      <img
                        src="{{ giftThumb | image_url }}"
                        alt="{{ giftProd.title }}"
                        class="object-contain w-24 h-24"
                      >
                    </div>
                  </div>
                  <div class="gift-content text-center">
                    <div class="gift-name mb-1 font-medium">{{ giftProd.title | replace: "Free ","" }}</div>
                    <div class="gift-price flex items-center justify-center gap-2">
                      <span class="original-price text-gray-500 line-through">{{ giftVariantSubscription.compare_at_price | money_with_currency }}</span>
                      <span class="sale-price font-bold">FREE</span>
                    </div>
                  </div>
                </div>
              {% endif %}
          {% endcase %}
        {% endfor %}
      </div>
    </div>

    <div class="submit-wrap flex flex-col w-full">
      <div class="checkout-button">
        {% assign buttonSID = SID | append: '-checkout' %}
        {% render 'buy-buttons-new-4', SID: buttonSID, product: prod, variant: '', buttonText: "Add To Cart", selling_plan_id: selling_plan_id, product_form_id: product_form_id, buyType: buyType, isBuyWithPrime: isBuyWithPrime %}
      </div>
      <div class="one-time-purchase-link mt-3 text-center">
        {% if isOneTimePurchaseLink %}
          <div class="one-time-add-to-cart hover:text-gray-800 mb-2 text-sm font-bold text-gray-600 underline cursor-pointer">Buy Once for $59.90</div>
        {% endif %}
        <p class="text-[14px] italic max-w-[80%] m-auto">For best results, use daily for 3-6 months. Clinical study shows up to 30% reduction in HbA1c.*</p>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const productActions = document.querySelector('#cta-section-{{ SID }} .product-actions');
  const SID = productActions.id.split('-').pop();
  const purchaseOptionBoxes = productActions.querySelectorAll('.purchase-option-box');
  const submitButton = productActions.querySelector('.checkout-button button');
  const submitSellingPlanIdInput = document.querySelector('.submit-selling-plan-id');
  const submitVariantIdInput = document.querySelector('.submit-variant-id');

  // Gift selection logic
  const giftOptionContainers = document.querySelectorAll('.gift-option-container');

  giftOptionContainers.forEach(container => {
    container.addEventListener('click', function(event) {
      giftOptionContainers.forEach(gift => gift.classList.remove('selected'));
      container.classList.add('selected');
      updateRadioIndicator(container);
    });
  });

  function updateRadioIndicator(selectedContainer) {
    giftOptionContainers.forEach(container => {
      const checkMark = container.querySelector('.check-mark');
      if (container === selectedContainer) {
        checkMark.classList.remove('hidden');
      } else {
        checkMark.classList.add('hidden');
      }
    });
  }

  // Initialize the first gift as selected by default
  if (giftOptionContainers.length > 0) {
    const firstGift = giftOptionContainers[0];
    firstGift.classList.add('selected');
    updateRadioIndicator(firstGift);
  }

  const state = {
    selectedBox: null,
  };

  const ctaText = document.querySelector('#cta-section-{{ SID }} .cta-text');
  const purchaseOptions = document.querySelector('#cta-section-{{ SID }} .purchase-options');
  if (ctaText && purchaseOptions && window.innerWidth < 768) {
    purchaseOptions.insertAdjacentElement('beforebegin', ctaText);
    ctaText.classList.add('mbl:mt-0');
    ctaText.classList.add('mbl:mb-8');
  }

  function togglePurchaseBox(element) {
    if (!element) return;

    purchaseOptionBoxes.forEach(box => {
      box.classList.remove('selected');
      const radio = box.querySelector('input[type="radio"]');
      if (radio) {
        radio.checked = false;
      }
    });

    const isSubscription = element.getAttribute('data-purchase-type') === 'subscribe';
    const subscriptionPlanID = isSubscription ? element.getAttribute('data-subscription-selling-plan-id') : '';
    const variantID = element.getAttribute('data-variant');
    const buyType = element.getAttribute('data-buy-type');

    if (submitSellingPlanIdInput) {
      submitSellingPlanIdInput.value = subscriptionPlanID;
    }
    if (submitVariantIdInput) {
      submitVariantIdInput.value = variantID;
    }

    element.classList.add('selected');
    const radioInput = element.querySelector('input[type="radio"]');
    if (radioInput) {
      radioInput.checked = true;
    }

    state.selectedBox = element;
  }

  function initializePurchaseOptions() {
    const defaultVariantIndex = parseInt(productActions.getAttribute('data-default-variant-index')) || 0;
    const defaultBox = purchaseOptionBoxes[defaultVariantIndex - 1] || purchaseOptionBoxes[0];

    if (defaultBox) {
      togglePurchaseBox(defaultBox);
    }
  }

  // Event listeners for purchase options
  productActions.addEventListener('click', (event) => {
    const radioInput = event.target.closest('input[type="radio"]');
    const purchaseOptionBox = event.target.closest('.purchase-option-box');

    if (radioInput) {
      const parentBox = radioInput.closest('.purchase-option-box');
      if (parentBox) {
        event.preventDefault();
        togglePurchaseBox(parentBox);
      }
    } else if (purchaseOptionBox) {
      event.preventDefault();
      togglePurchaseBox(purchaseOptionBox);
    }
  });

  // Radio input change handler
  productActions.addEventListener('change', (event) => {
    if (event.target.type === 'radio') {
      const parentBox = event.target.closest('.purchase-option-box');
      if (parentBox) {
        togglePurchaseBox(parentBox);
      }
    }
  });

  // Submit button handler
  submitButton.addEventListener('click', async function(event) {
    event.preventDefault();

    const selectedBox = productActions.querySelector('.purchase-option-box.selected');
    const selectedGiftContainer = document.querySelector('.gift-option-container.selected');
    const giftOptionBorder = selectedGiftContainer?.querySelector('.gift-option-border');

    const isSubscription = selectedBox?.getAttribute('data-purchase-type') === 'subscribe';
    const giftId = giftOptionBorder ? (isSubscription ? giftOptionBorder.dataset.giftIdSubscription : giftOptionBorder.dataset.giftId) : null;

    if (!selectedBox || !giftId) {
      console.error('Missing required selection');
      return;
    }

    const items = [
      {
        id: submitVariantIdInput.value,
        quantity: 1,
        selling_plan: submitSellingPlanIdInput.value || undefined
      },
      {
        id: giftId,
        quantity: 1
      }
    ];

    try {
      {% if buyType == "buy_now" %}
        const cartDrawer = document.getElementById('upCart');
        if (cartDrawer) {
          cartDrawer.remove();
        }

        await fetch('/cart/clear.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          }
        });
      {% endif %}

      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ items })
      });

      if (!response.ok) {
        throw new Error('Failed to add items to cart');
      }

      {% if buyType == "buy_now" %}
        window.location.href = '/checkout';
      {% endif %}

    } catch (error) {
      console.error('Error:', error);
    }
  });

  // One-time purchase button handler
  const oneTimePurchaseButton = productActions.querySelector('.one-time-add-to-cart');
  if (oneTimePurchaseButton) {
    oneTimePurchaseButton.addEventListener('click', async (event) => {
      event.preventDefault();

      oneTimePurchaseButton.disabled = true;
      const originalText = oneTimePurchaseButton.textContent;
      oneTimePurchaseButton.textContent = 'Adding...';

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            items: [{
              id: 42865141121175,
              quantity: 1
            }]
          })
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        if (typeof window.updateCart === 'function') {
          window.updateCart();
        }

        oneTimePurchaseButton.textContent = 'Added!';
        setTimeout(() => {
          oneTimePurchaseButton.textContent = originalText;
          oneTimePurchaseButton.disabled = false;
        }, 2000);

      } catch (error) {
        console.error('Error:', error);
        oneTimePurchaseButton.textContent = 'Something went wrong! Please contact us.';
        setTimeout(() => {
          oneTimePurchaseButton.textContent = originalText;
          oneTimePurchaseButton.disabled = false;
        }, 2000);
      }
    });
  }

  initializePurchaseOptions();
});
</script>

<style>
  /* Product Actions Styles */
  #cta-section-{{ SID }} {
    --primary-color: {{ buyBoxColor }};
    --primary-color-dark: color-mix(in srgb, var(--primary-color), black 20%);
    --primary-color-light: color-mix(in srgb, var(--primary-color), white 90%);
    --text-color: #4a5568;
    --border-color: #cbcbcb;
    --radio-size: 1em;
    --radio-size-mobile: 1em;
    --transition-speed: 0.2s;

    /* Grid Layout */
    .product-container {
      grid-template-columns: 54% 42% !important;
    }

		.gift-option-container.selected {
  .gift-option-border {
    border-color: var(--primary-color);
    background-color: rgba(var(--primary-color-rgb), 0.05);
  }

  .radio-indicator {
    background-color: var(--primary-color);
    transition: background-color 0.3s ease;
  }

  .check-mark {
    display: flex;
  }
}

.gift-option-border {
  transition: all 0.3s ease;
  border: 2px solid #e5e7eb;
  background: #fff;
  width: 120px;
  height: 120px;

  &:hover {
    border-color: var(--primary-color-lighter);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
}

    .product-actions {
      grid-area: 2/2/3/3;
      min-height: 415px;

      &:not(.with-animation) .purchase-option-box {
				gap: 1rem;
        max-height: none !important;
        transition: none !important;
      }
    }

    /* One Time Purchase Link */
    .one-time-purchase-link a {
      transition: color 0.3s ease;
    }

    /* Radio Input Component */
    .radio-input {
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;

      input[type='radio'] {
        &:hover,
        .purchase-option-box:hover & {
          transform: scale(1.1);
          cursor: pointer;
					transition: 0.1s all;
        }
      }
    }

    /* Purchase Type Buttons */
    .purchase-type {
      button {
        background-color: var(--primary-color);
        color: black;
        border-radius: 5px;
        font-size: 16px;
        min-width: 49%;
        padding: 0.65rem;
        transition: background-color 0.3s, color 0.3s;
        font-weight: 600;

        &.selected {
          color: white !important;
        }

        &:not(.selected) {
          background: var(--primary-color-light);
          border: 1px solid var(--primary-color);

          .subscription-details {
            color: var(--primary-color-dark);
          }
        }
      }
    }

    /* Purchase Option Box */
    .purchase-option-box {
      --box-padding: 1rem;
      --box-max-height: 72px;

      background: #fff;
      border: 1px solid var(--border-color);
      cursor: pointer;
      max-height: var(--box-max-height);
      filter: drop-shadow(0px 4px 4px rgba(47, 47, 47, 0.1));
      transition: max-height 0.5s ease-in-out, filter 0.3s, background-color 0.3s, border-width 0.3s;
      border-radius: 10px;
      border-color: var(--primary-color);
      padding: var(--box-padding);

      &:hover {
        filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
      }

      &.selected {
        filter: drop-shadow(0px 4px 4px rgba(77, 53, 98, 0.3));
        background-color: var(--primary-color-light);
        max-height: max-content;
      }

      &[inert] {
        max-height: var(--box-max-height) !important;
        background: #ededed;
        opacity: 0.6;

        .option-title {
          color: grey;
        }
      }

      .radio-box {
        align-items: center;
        display: flex;
      }

      /* Price and Terms Styling */
      .save-title {
        background-color: var(--orange);
        font-weight: bold;
      }

      .terms {
        margin-left: 26px;
      }

      .price-wrapper {
        min-width: 5rem;

        .total-price {
          color: {{ buyBoxColor | default: 'var(--primary-color-dark)' }};
        }
      }
    }

    /* Responsive Styles */
    @media (max-width: 1269px) {
      .purchase-option-box {
        width: 100%;
      }
    }

    @media (max-width: 767px) {
      .product-actions {
        grid-area: unset;
        grid-row: 3;
        max-width: unset;
        min-height: unset;
      }

      .purchase-option-box {
        font-size: 4vw;
        padding: 3vw;
        max-height: 16vw;

				&::before {
					font-size: 3vw;
					width: 23vw;
					height: 5vw;
					top: -5vw;
					padding: 0.75vw;
					border-radius: 2vw 2vw 0 0;
				}

        &.selected {
          max-height: none;
        }

        .top-wrapper {
          min-height: 9vw;
        }

        .left-wrapper {
          gap: 2vw;
        }

        .option-title {
          font-size: 3.9vw;
        }

        .price-wrapper {
          min-width: 17.7vw;

          .real-price {
            font-size: 4.5vw;
          }
        }

        .terms {
          margin-left: 5vw;

          .subtitle,
          .terms-title {
            font-size: 3.5vw;
          }
        }

        .radio-box {
          label {
            width: 3vw;
            height: 3vw;

            &:after {
              font-size: 2vw;
              width: 3vw !important;
              height: 3vw !important;
              top: -0.25vw !important;
              left: -0.25vw !important;
              display: flex;
              justify-content: center;
              align-items: center;
            }
          }
        }

        &.selected {
          max-height: max-content;
        }

        &[inert] {
          max-height: 16vw !important;
        }
      }

      .one-time-purchase-link {
        font-size: 3.5vw;
      }
    }
  }
</style>