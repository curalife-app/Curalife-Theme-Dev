<div id="faq-{{ section_id }}" class="faq flex flex-col gap-4">
  {% for faqItem in faqItems %}
    <div class="faq-item last:border-b-0 flex flex-col px-4 py-6 rounded-lg">
      {% assign question = faqItem.question | default: faqItem | split: ":" | first %}
      {% assign answer = faqItem.answer | default: faqItem | split: ":" | last %}

      <h3 class="question h5 relative flex items-center m-0 cursor-pointer">
        {{ question | trim }}
      </h3>
      <div class="answer">
        {{ answer | trim }}
      </div>
    </div>
  {% endfor %}
</div>

<style>
  #faq-{{ section_id }} .faq-item {
    {% if closed_bg_color %}background-color: {{ closed_bg_color }};{% endif %}
    {% if seperator_color %}border-bottom: 2px solid {{ seperator_color }};{% endif %}
    transition: background-color 0.2s ease-out;
  }

  #faq-{{ section_id }} .faq-item.active {
    {% if opened_bg_color %}background-color: {{ opened_bg_color }};{% endif %}
  }

  #faq-{{ section_id }} .question {
    {% if titles_color %}color: {{ titles_color }};{% endif %}
    display: flex;
    justify-content: space-between;
    align-items: center;

    p {
      margin: 0;
    }
  }

  #faq-{{ section_id }} .question::after {
    content: "+";
    font-size: 2rem;
    transition: transform 0.3s;
  }

  #faq-{{ section_id }} .faq-item.active .question::after {
    transform: rotate(45deg);
  }

  #faq-{{ section_id }} .answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.2s ease-out, margin-top 0.2s ease-out;
    font-size: 20px;
    line-height: 1.3;
  }

  #faq-{{ section_id }} .faq-item.active .answer {
    margin-top: 1rem;
  }

  @media screen and (max-width: 768px) {
    #faq-{{ section_id }} .question {
      font-size: 5vw;
    }

    #faq-{{ section_id }} .answer {
      font-size: 4vw;
      line-height: 1.5;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const faqSection = document.getElementById('faq-{{ section_id }}');
    const accordionItems = faqSection.querySelectorAll('.faq-item');

    accordionItems.forEach(item => {
      const question = item.querySelector('.question');
      const answer = item.querySelector('.answer');

      question.addEventListener('click', () => {
        const isActive = item.classList.contains('active');

        {% if is_allow_one_open %}
          accordionItems.forEach(otherItem => {
            if (otherItem !== item && otherItem.classList.contains('active')) {
              otherItem.classList.remove('active');
              otherItem.querySelector('.answer').style.maxHeight = '0';
            }
          });
        {% endif %}

        item.classList.toggle('active');

        if (!isActive) {
          answer.style.maxHeight = answer.scrollHeight + 'px';
        } else {
          answer.style.maxHeight = '0';
        }

        // Tracking (assuming Woopra is properly set up)
        if (typeof woopra !== 'undefined') {
          woopra.track('Open FAQ', {
            question_display_text: question.textContent.trim(),
            question_order: Array.from(accordionItems).indexOf(item) + 1
          });
        }
      });
    });
  });
</script>

<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "mainEntity": [
    {% for faqItem in faqItems %}
      {
        "@type": "Question",
        "name": "{{ faqItem.question | default: faqItem | split: ':' | first | strip | escape }}",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "{{ faqItem.answer | default: faqItem | split: ':' | last | strip | escape }}"
        }
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ]
}
</script>