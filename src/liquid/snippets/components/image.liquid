{%- comment -%}
    It creates a style tag and it restricts an image from growing larger than its max resolution.

    Dependencies:
    - Lazysizes plugin (https://github.com/aFarkas/lazysizes) which enable responsive image with faster load time and better performance.
    - Lazysizes Responsive Images as a Service (https://github.com/aFarkas/lazysizes/tree/gh-pages/plugins/rias) To load the correct image size with our CDN
    - Lazysizes Bgset (https://github.com/aFarkas/lazysizes/tree/gh-pages/plugins/bgset) To use responsive images on background-image (CSS)

    Accepts:
    - max_width: {Number} Max width of the image container
    - max_height: {Number} Max height of the image container
    - image: {Object} Image object
    - image_class: {String} class name of the <img />
    - image_attributes: {String}  additional HTML attributes of the <img />
    - wrapper_class: {String} class name of the <div> wrapper
    - wrapper_attributes: {String} additional HTML attributes of the <div> wrapper

    Usage:
    In your liquid template file, copy the following line
    - {% include 'responsive-image' with image: featured_image, image_class: "css-class", wrapper_class: "wrapper-css-class", max_width: 700, max_height: 800 %}
{%- endcomment -%}

{%- comment -%} Added incremental number to avoid conflict styling code when the same images are using this snippet {%- endcomment -%}
{%- capture responsive_image_counter %}{% increment responsive_image_counter %}{% endcapture -%}

  <style>
    {%- comment -%}
      The image aspect ratio tells us the orientation of the image:
      - less than 1.0 is portrait
      - exactly 1.0 is square
      - greater than 1.0 is landscape
    {%- endcomment -%}
    {%- if image.aspect_ratio <= 1 -%}
      {%- assign max_height_image = image.height | at_most: max_height -%}
      {%- assign max_width_image = max_height_image | times: image.aspect_ratio -%}
    {%- else -%}
      {%- assign max_width_image = image.width | at_most: max_width -%}
      {%- assign max_height_image = max_width_image | divided_by: image.aspect_ratio -%}
    {%- endif -%}

    #Image-{{ image.id }}-{{ responsive_image_counter }} {
      max-width: {{ max_width_image }}px;
      max-height: {{ max_height_image }}px;
    }
    #ImageWrapper-{{ image.id }}-{{ responsive_image_counter }} {
      max-width: {{ max_width_image }}px;
    }

    #ImageWrapper-{{ image.id }}-{{ responsive_image_counter }}::before {
      {%- comment -%}
        When you change the window screen width, we want to make sure that the container's size is proportionally calculated.
        Note regarding padding percentage: The percentage is calculated with respect to the width of the generated box's containing block (source: http://www.w3.org/TR/2011/REC-CSS2-20110607/box.html#padding-properties)
      {%- endcomment -%}
      padding-top:{{ max_height_image | divided_by: max_width_image | times: 100}}%;
    }
  </style>

  {%- assign img_url = image | img_url: '1x1' | replace: '_1x1.', '_{width}x.' -%}

  {%- comment -%} Limit image widths to valid options based on image.width {%- endcomment -%}
  {%- assign image_widths = '180,360,540,720,900,1080,1296,1512,1728,1944,2160,2376,2592,2808,3024' | split: ',' -%}
  {%- capture image_widths -%}
    {%- for width in image_widths -%}
      {%- comment -%} Check if image width is less or equal to width {%- endcomment -%}
      {%- assign width_num = width | plus: 0 | round -%}
      {%- if image.width >= width_num -%}{{ width_num }},{%- endif -%}
    {%- endfor -%}
    {{ image.width }}
  {%- endcapture -%}
  {%- assign image_widths = image_widths | strip -%}

  <div id="ImageWrapper-{{ image.id }}-{{ responsive_image_counter }}" data-image-id="{{ image.id }}" class="responsive-image__wrapper {{ wrapper_class }}" {{ wrapper_attributes }}>
    <img id="Image-{{ image.id }}-{{ responsive_image_counter }}"
      class="responsive-image__image lazyload {{ image_class }}"
      src="{{ image | img_url: '300x' }}"
      data-src="{{ img_url }}"
      data-widths="[{{ image_widths }}]"
      data-aspectratio="{{ image.aspect_ratio }}"
      data-sizes="auto"
      tabindex="-1"
      alt="{{ image.alt | escape }}"
      {{ image_attributes }}
    >
  </div>

  <noscript>
    <img class="{{ image_class }}" src="{{ image | img_url: '2048x2048' }}" alt="{{ image.alt | escape }}">
  </noscript>




  {% comment %}
  A VERSION WITHOUT LAZYSIZES
  Responsive Image with Native Lazy Loading and Vanilla JavaScript
  This solution uses native lazy loading, IntersectionObserver for more precise lazy loading,
  and dynamic `srcset` generation to replicate Lazysizes functionality.
{% endcomment %}

{% comment %} {% assign max_width_image = image.width | at_most: max_width %}
{% assign max_height_image = image.height | at_most: max_height %}

<style>
  #ImageWrapper-{{ image.id }}-{{ responsive_image_counter }} {
    max-width: {{ max_width_image }}px;
    margin: 0 auto;
  }
  #Image-{{ image.id }}-{{ responsive_image_counter }} {
    width: 100%;
    height: auto;
    max-width: {{ max_width_image }}px;
    max-height: {{ max_height_image }}px;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  #Image-{{ image.id }}-{{ responsive_image_counter }}.loaded {
    opacity: 1;
  }
</style>

<div id="ImageWrapper-{{ image.id }}-{{ responsive_image_counter }}" class="{{ wrapper_class }}" {{ wrapper_attributes }}>
  <img id="Image-{{ image.id }}-{{ responsive_image_counter }}"
       class="{{ image_class }}"
       src="{{ image | img_url: '300x' }}"
       data-src="{{ image | img_url: '{width}x' }}"
       data-widths="[180,360,540,720,900,1080,1296,1512,1728,1944,2160,2376,2592,2808,3024]"
       data-aspectratio="{{ image.aspect_ratio }}"
       data-sizes="auto"
       alt="{{ image.alt | escape }}"
       loading="lazy"
       {{ image_attributes }}>
</div>

<script>
  (function() {
    var image = document.getElementById('Image-{{ image.id }}-{{ responsive_image_counter }}');
    var imageWrapper = document.getElementById('ImageWrapper-{{ image.id }}-{{ responsive_image_counter }}');

    function setImageSizes() {
      var containerWidth = imageWrapper.offsetWidth;
      image.sizes = containerWidth + 'px';
    }

    function generateSrcset() {
      var widths = JSON.parse(image.getAttribute('data-widths'));
      var dataSrc = image.getAttribute('data-src');
      var srcset = widths.map(function(w) {
        return dataSrc.replace('{width}', w) + ' ' + w + 'w';
      }).join(', ');
      image.setAttribute('srcset', srcset);
    }

    function loadImage() {
      setImageSizes();
      generateSrcset();
      image.classList.add('loaded');
    }

    if ('IntersectionObserver' in window) {
      var observer = new IntersectionObserver(function(entries) {
        if (entries[0].isIntersecting) {
          loadImage();
          observer.unobserve(image);
        }
      });
      observer.observe(image);
    } else {
      loadImage();
    }

    window.addEventListener('resize', setImageSizes);
  })();
</script> {% endcomment %}